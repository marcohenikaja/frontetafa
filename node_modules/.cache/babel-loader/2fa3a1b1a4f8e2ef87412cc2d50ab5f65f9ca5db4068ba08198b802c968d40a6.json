{"ast":null,"code":"import _regeneratorRuntime from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"E:/react_mongodb/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.6.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      var starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n    var keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n        key = _keyMatch[1],\n        optional = _keyMatch[2];\n      var param = params[key];\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n      return param;\n    } // Remove any optional markers from optional static segments\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref3.pathname,\n    _ref3$search = _ref3.search,\n    search = _ref3$search === void 0 ? \"\" : _ref3$search,\n    _ref3$hash = _ref3.hash,\n    hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n          key = _ref5[0],\n          value = _ref5[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser;\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n  var manifest = {}; // Routes in tree format for matching\n\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\"; // Config driven behavior flags\n\n  var future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(function (m) {\n    return m.route.lazy;\n  }) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null);\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n          key = _step2$value[0];\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 16;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                }); // Send the same navigation through\n\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                deleteBlocker(blockerKey);\n                updateState({\n                  blockers: new Map(state.blockers)\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 16:\n            _context2.next = 18;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 15;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 15:\n            if (!(isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n              _context3.next = 18;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 18:\n            // Create a controller/Request for this navigation\n\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 24;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 35;\n            break;\n          case 24:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 35;\n              break;\n            }\n            _context3.next = 27;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 27:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 30;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 30:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation; // Create a GET request for the loaders\n\n            request = new Request(request.url, {\n              signal: request.signal\n            });\n          case 35:\n            _context3.next = 37;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n          case 37:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 43;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 43:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: matches\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 45:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads(); // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            }); // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context4.next = 8;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 18;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              replace = result.location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 17;\n            return startRedirectNavigation(state, result, {\n              submission: submission,\n              replace: replace\n            });\n          case 17:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            if (!isErrorResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              // Send back an empty object we can use to clear out any prior actionData\n              pendingActionData: {},\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 22:\n            if (!isDeferredResult(result)) {\n              _context4.next = 24;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 24:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = _extends({\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission);\n              loadingNavigation = navigation;\n            } // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n              formMethod: loadingNavigation.formMethod,\n              formAction: loadingNavigation.formAction,\n              formData: loadingNavigation.formData,\n              formEncType: loadingNavigation.formEncType\n            } : undefined;\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 10;\n              break;\n            }\n            _updatedFetchers = markFetchRedirectsDone();\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, _updatedFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 10:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (rf) {\n                var fetcher = state.fetchers.get(rf.key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(rf.key, revalidatingFetcher);\n              });\n              actionData = pendingActionData || state.actionData;\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData ? Object.keys(actionData).length === 0 ? {\n                actionData: null\n              } : {\n                actionData: actionData\n              } : {}, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (rf) {\n              if (rf.controller) {\n                // Fetchers use an independent AbortController so that aborting a fetcher\n                // (via deleteFetcher) does not abort the triggering navigation that\n                // triggered the revalidation\n                fetchControllers.set(rf.key, rf.controller);\n              }\n            }); // Proxy navigation abort through to revalidation fetchers\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (f) {\n                return abortFetcher(f.key);\n              });\n            };\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            _context5.next = 17;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 17:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 23;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 23:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.delete(rf.key);\n            }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 30;\n              break;\n            }\n            _context5.next = 29;\n            return startRedirectNavigation(state, redirect, {\n              replace: replace\n            });\n          case 29:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 30:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            updatedFetchers = markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, shouldUpdateFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 36:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x21, _x22, _x23, _x24, _x25, _x26) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (!(!match.route.action && !match.route.lazy)) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 26;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n              submission: submission,\n              isFetchActionRedirect: true\n            }));\n          case 26:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 31;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 31:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission, {\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, _defineProperty({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above\n            ), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (rf) {\n              return rf.key !== key;\n            }).forEach(function (rf) {\n              var staleKey = rf.key;\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              if (rf.controller) {\n                fetchControllers.set(staleKey, rf.controller);\n              }\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (rf) {\n                return abortFetcher(rf.key);\n              });\n            };\n            abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            _context6.next = 47;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 47:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 53;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 53:\n            abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (r) {\n              return fetchControllers.delete(r.key);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 60;\n              break;\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n          case 60:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n            doneFetcher = {\n              state: \"idle\",\n              data: actionResult.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n              }, didAbortFetchLoads ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 65:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x27, _x28, _x29, _x30, _x31, _x32) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = _extends({\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by our our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 25;\n              break;\n            }\n            fetchRedirectIds.add(key);\n            _context7.next = 24;\n            return startRedirectNavigation(state, result);\n          case 24:\n            return _context7.abrupt(\"return\");\n          case 25:\n            if (!isErrorResult(result)) {\n              _context7.next = 30;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 30:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 34:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x33, _x34, _x35) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref6, submission, replace, isFetchActionRedirect, redirectLocation, url, isDifferentBasename, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            redirectLocation = createLocation(state.location, redirect.location,\n            // TODO: This can be removed once we get rid of useTransition in Remix v2\n            _extends({\n              _isRedirect: true\n            }, isFetchActionRedirect ? {\n              _isFetchActionRedirect: true\n            } : {}));\n            invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n            if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n              _context8.next = 10;\n              break;\n            }\n            url = init.history.createURL(redirect.location);\n            isDifferentBasename = stripBasename(url.pathname, basename) == null;\n            if (!(window.location.origin !== url.origin || isDifferentBasename)) {\n              _context8.next = 10;\n              break;\n            }\n            if (replace) {\n              window.location.replace(redirect.location);\n            } else {\n              window.location.assign(redirect.location);\n            }\n            return _context8.abrupt(\"return\");\n          case 10:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n            if (!submission && formMethod && formAction && formData && formEncType) {\n              submission = {\n                formMethod: formMethod,\n                formAction: formAction,\n                formEncType: formEncType,\n                formData: formData\n              };\n            } // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n              _context8.next = 19;\n              break;\n            }\n            _context8.next = 17;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, submission, {\n                formAction: redirect.location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 17:\n            _context8.next = 26;\n            break;\n          case 19:\n            if (!isFetchActionRedirect) {\n              _context8.next = 24;\n              break;\n            }\n            _context8.next = 22;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              },\n              fetcherSubmission: submission,\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 22:\n            _context8.next = 26;\n            break;\n          case 24:\n            _context8.next = 26;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: submission ? submission.formMethod : undefined,\n                formAction: submission ? submission.formAction : undefined,\n                formEncType: submission ? submission.formEncType : undefined,\n                formData: submission ? submission.formData : undefined\n              },\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 26:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x36, _x37, _x38, _x39, _x40) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename);\n            })), _toConsumableArray(fetchersToLoad.map(function (f) {\n              if (f.matches && f.match && f.controller) {\n                return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n              } else {\n                var _error3 = {\n                  type: ResultType.error,\n                  error: getInternalRouterError(404, {\n                    pathname: f.path\n                  })\n                };\n                return _error3;\n              }\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n              return request.signal;\n            }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n              return f.match;\n            }), fetcherResults, fetchersToLoad.map(function (f) {\n              return f.controller ? f.controller.signal : null;\n            }), true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n          key = _step5$value[0],\n          id = _step5$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n      nextLocation = _ref2.nextLocation,\n      historyAction = _ref2.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x41, _x42) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error4, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n              _context10.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context10.next = 15;\n              break;\n            }\n            _error4 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error4),\n              statusCode: _error4.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context10.next = 17;\n            return queryImpl(request, location, matches, requestContext);\n          case 17:\n            result = _context10.sent;\n            if (!isResponse(result)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 20:\n            return _context10.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x43, _x44) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n              _context11.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context11.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context11.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context11.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context11.next = 20;\n            return queryImpl(request, location, matches, requestContext, match);\n          case 20:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 23;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context11.next = 28;\n              break;\n            }\n            return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context11.next = 32;\n              break;\n            }\n            data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context11.abrupt(\"return\", data);\n          case 32:\n            return _context11.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x45, _x46, _x47, _x48, _x49) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context12.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context12.next = 7;\n              break;\n            }\n            _context12.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          case 5:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", _result);\n          case 7:\n            _context12.next = 9;\n            return loadRouteData(request, matches, requestContext, routeMatch);\n          case 9:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context12.prev = 13;\n            _context12.t0 = _context12[\"catch\"](1);\n            if (!isQueryRouteResponse(_context12.t0)) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n              _context12.next = 18;\n              break;\n            }\n            throw _context12.t0.response;\n          case 18:\n            return _context12.abrupt(\"return\", _context12.t0.response);\n          case 19:\n            if (!isRedirectResponse(_context12.t0)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", _context12.t0);\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x50, _x51, _x52, _x53, _x54) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error5, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context14.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context14.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context14.next = 13;\n            break;\n          case 7:\n            _context14.next = 9;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n          case 9:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 15:\n            if (!isDeferredResult(result)) {\n              _context14.next = 20;\n              break;\n            }\n            _error5 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context14.next = 19;\n              break;\n            }\n            throw _error5;\n          case 19:\n            result = {\n              type: ResultType.error,\n              error: _error5\n            };\n          case 20:\n            if (!isRouteRequest) {\n              _context14.next = 24;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 23;\n              break;\n            }\n            throw result.error;\n          case 23:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 24:\n            if (!isErrorResult(result)) {\n              _context14.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 28;\n            return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n          case 28:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            _context14.next = 33;\n            return loadRouteData(loaderRequest, matches, requestContext);\n          case 33:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 35:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x55, _x56, _x57, _x58, _x59) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n              _context15.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader || m.route.lazy;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 7;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context15.next = 9;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n            })));\n          case 9:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 18:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    var _iterator6 = _createForOfIteratorHelper(matches),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var match = _step6.value;\n        contextualMatches.push(match);\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n  var path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(function (m) {\n    return m.pathnameBase;\n  }), location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  var submission;\n  if (opts.formData) {\n    var formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.toString() === nextUrl.toString() ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      return;\n    }\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n    var shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl: currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl: nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult: actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nfunction loadLazyRouteModule(_x60, _x61, _x62) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (route.lazy) {\n            _context16.next = 2;\n            break;\n          }\n          return _context16.abrupt(\"return\");\n        case 2:\n          _context16.next = 4;\n          return route.lazy();\n        case 4:\n          lazyRoute = _context16.sent;\n          if (route.lazy) {\n            _context16.next = 7;\n            break;\n          }\n          return _context16.abrupt(\"return\");\n        case 7:\n          routeToUpdate = manifest[route.id];\n          invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n          // we could yet be sitting on this route as we can't get there without\n          // resolving lazy() first.\n          //\n          // This is different than the HMR \"update\" use-case where we may actively be\n          // on the route being updated.  The main concern boils down to \"does this\n          // mutation affect any ongoing navigations or any current state.matches\n          // values?\".  If not, it should be safe to update in place.\n          routeUpdates = {};\n          for (lazyRouteProperty in lazyRoute) {\n            staticRouteValue = routeToUpdate[lazyRouteProperty];\n            isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n            // This property isn't static since it should always be updated based\n            // on the route updates\n            lazyRouteProperty !== \"hasErrorBoundary\";\n            warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n            if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n              routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n            }\n          } // Mutate the route with the provided updates.  Do this first so we pass\n          // the updated version to mapRouteProperties\n\n          Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n          // updates and remove the `lazy` function so we don't resolve the lazy\n          // route again.\n\n          Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n            lazy: undefined\n          }));\n        case 13:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction callLoaderOrAction(_x63, _x64, _x65, _x66, _x67, _x68, _x69, _x70, _x71, _x72) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, onReject, runHandler, handler, values, url, pathname, _url, _pathname, status, location, currentUrl, _url2, isSameBasename, data, contentType, _result$init, _result$init2;\n    return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          if (isStaticRequest === void 0) {\n            isStaticRequest = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n          runHandler = function runHandler(handler) {\n            // Setup a promise we can race against so that abort signals short circuit\n            var reject;\n            var abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n            onReject = function onReject() {\n              return reject();\n            };\n            request.signal.addEventListener(\"abort\", onReject);\n            return Promise.race([handler({\n              request: request,\n              params: match.params,\n              context: requestContext\n            }), abortPromise]);\n          };\n          _context17.prev = 3;\n          handler = match.route[type];\n          if (!match.route.lazy) {\n            _context17.next = 31;\n            break;\n          }\n          if (!handler) {\n            _context17.next = 13;\n            break;\n          }\n          _context17.next = 9;\n          return Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        case 9:\n          values = _context17.sent;\n          result = values[0];\n          _context17.next = 29;\n          break;\n        case 13:\n          _context17.next = 15;\n          return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        case 15:\n          handler = match.route[type];\n          if (!handler) {\n            _context17.next = 22;\n            break;\n          }\n          _context17.next = 19;\n          return runHandler(handler);\n        case 19:\n          result = _context17.sent;\n          _context17.next = 29;\n          break;\n        case 22:\n          if (!(type === \"action\")) {\n            _context17.next = 28;\n            break;\n          }\n          url = new URL(request.url);\n          pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: pathname,\n            routeId: match.route.id\n          });\n        case 28:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.data,\n            data: undefined\n          });\n        case 29:\n          _context17.next = 40;\n          break;\n        case 31:\n          if (handler) {\n            _context17.next = 37;\n            break;\n          }\n          _url = new URL(request.url);\n          _pathname = _url.pathname + _url.search;\n          throw getInternalRouterError(404, {\n            pathname: _pathname\n          });\n        case 37:\n          _context17.next = 39;\n          return runHandler(handler);\n        case 39:\n          result = _context17.sent;\n        case 40:\n          invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context17.next = 47;\n          break;\n        case 43:\n          _context17.prev = 43;\n          _context17.t0 = _context17[\"catch\"](3);\n          resultType = ResultType.error;\n          result = _context17.t0;\n        case 47:\n          _context17.prev = 47;\n          if (onReject) {\n            request.signal.removeEventListener(\"abort\", onReject);\n          }\n          return _context17.finish(47);\n        case 50:\n          if (!isResponse(result)) {\n            _context17.next = 75;\n            break;\n          }\n          status = result.status; // Process redirects\n          if (!redirectStatusCodes.has(status)) {\n            _context17.next = 60;\n            break;\n          }\n          location = result.headers.get(\"Location\");\n          invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n          if (!ABSOLUTE_URL_REGEX.test(location)) {\n            location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n          } else if (!isStaticRequest) {\n            // Strip off the protocol+origin for same-origin + same-basename absolute\n            // redirects. If this is a static request, we can let it go back to the\n            // browser as-is\n            currentUrl = new URL(request.url);\n            _url2 = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n            isSameBasename = stripBasename(_url2.pathname, basename) != null;\n            if (_url2.origin === currentUrl.origin && isSameBasename) {\n              location = _url2.pathname + _url2.search + _url2.hash;\n            }\n          } // Don't process redirects in the router during static requests requests.\n          // Instead, throw the Response and let the server handle it with an HTTP\n          // redirect.  We also update the Location header in place in this flow so\n          // basename and relative routing is taken into account\n          if (!isStaticRequest) {\n            _context17.next = 59;\n            break;\n          }\n          result.headers.set(\"Location\", location);\n          throw result;\n        case 59:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 60:\n          if (!isRouteRequest) {\n            _context17.next = 62;\n            break;\n          }\n          throw {\n            type: resultType || ResultType.data,\n            response: result\n          };\n        case 62:\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context17.next = 69;\n            break;\n          }\n          _context17.next = 66;\n          return result.json();\n        case 66:\n          data = _context17.sent;\n          _context17.next = 72;\n          break;\n        case 69:\n          _context17.next = 71;\n          return result.text();\n        case 71:\n          data = _context17.sent;\n        case 72:\n          if (!(resultType === ResultType.error)) {\n            _context17.next = 74;\n            break;\n          }\n          return _context17.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 74:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 75:\n          if (!(resultType === ResultType.error)) {\n            _context17.next = 77;\n            break;\n          }\n          return _context17.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 77:\n          if (!isDeferredData(result)) {\n            _context17.next = 79;\n            break;\n          }\n          return _context17.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result,\n            statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n            headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n          });\n        case 79:\n          return _context17.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 80:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee16, null, [[3, 43, 47, 50]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator7 = _createForOfIteratorHelper(formData.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        key = _step7$value[0],\n        value = _step7$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match,\n      controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator8 = _createForOfIteratorHelper(matches),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n    pathname = _ref11.pathname,\n    routeId = _ref11.routeId,\n    method = _ref11.method,\n    type = _ref11.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveDeferredResults(_x73, _x74, _x75, _x76, _x77, _x78) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader, signal;\n            return _regeneratorRuntime().wrap(function _loop$(_context18) {\n              while (1) switch (_context18.prev = _context18.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                  // anything with.  This is for revalidating fetchers where the route was\n                  // removed during HMR\n                  if (match) {\n                    _context18.next = 4;\n                    break;\n                  }\n                  return _context18.abrupt(\"return\", \"continue\");\n                case 4:\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context18.next = 11;\n                    break;\n                  }\n                  // Note: we do not have to touch activeDeferreds here since we race them\n                  // against the signal in resolveDeferredData and they'll get aborted\n                  // there if needed\n                  signal = signals[index];\n                  invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                  _context18.next = 11;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 11:\n                case \"end\":\n                  return _context18.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context19.next = 10;\n            break;\n          }\n          return _context19.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          _ret = _context19.t0;\n          if (!(_ret === \"continue\")) {\n            _context19.next = 7;\n            break;\n          }\n          return _context19.abrupt(\"continue\", 7);\n        case 7:\n          index++;\n          _context19.next = 2;\n          break;\n        case 10:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x79, _x80, _x81) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee18$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context20.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context20.sent;\n          if (!aborted) {\n            _context20.next = 6;\n            break;\n          }\n          return _context20.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context20.next = 14;\n            break;\n          }\n          _context20.prev = 7;\n          return _context20.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context20.prev = 11;\n          _context20.t0 = _context20[\"catch\"](7);\n          return _context20.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context20.t0\n          });\n        case 14:\n          return _context20.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee18, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;;AAEG;IACSA;AAAZ,WAAYA,MAAZ,EAAkB;EAChB;;;;;;AAMG;EACHA;EAEA;;;;AAIG;;EACHA;EAEA;;;AAGG;;EACHA;AACD,CAtBD,EAAYA,MAAM,KAANA,MAAM,GAsBjB,EAtBiB,CAAlB;AAwLA,IAAMC,iBAAiB,GAAG,UAA1B;AA+BA;;;AAGG;;AACa,6BACdC,OADc,EACoB;EAAA,IAAlCA,OAAkC;IAAlCA,OAAkC,GAAF,EAAE;EAAA;EAElC,eAAiEA,OAAjE;IAAAC,iCAAMC,cAAc;IAAdA,cAAc,sCAAG,CAAC,GAAD,CAAnB;IAA0BC,YAA1B,YAA0BA,YAA1B;IAAAC,6BAAwCC,QAAQ;IAARA,QAAQ,kCAAG;EACvD,IAAIC,OAAJ,CAHkC;;EAIlCA,OAAO,GAAGJ,cAAc,CAACK,GAAf,CAAmB,UAACC,KAAD,EAAQC,KAAR;IAAA,OAC3BC,oBAAoB,CAClBF,KADkB,EAElB,OAAOA,KAAP,KAAiB,QAAjB,GAA4B,IAA5B,GAAmCA,KAAK,CAACG,KAFvB,EAGlBF,KAAK,KAAK,CAAV,GAAc,SAAd,GAA0BG,SAHR,CADZ;EAAA,EAAV;EAOA,IAAIH,KAAK,GAAGI,UAAU,CACpBV,YAAY,IAAI,IAAhB,GAAuBG,OAAO,CAACQ,MAAR,GAAiB,CAAxC,GAA4CX,YADxB,CAAtB;EAGA,IAAIY,MAAM,GAAGjB,MAAM,CAACkB,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;EAEA,SAASJ,UAATA,CAAoBK,CAApB,EAA6B;IAC3B,OAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,CAAT,EAAY,CAAZ,CAAT,EAAyBZ,OAAO,CAACQ,MAAR,GAAiB,CAA1C,CAAP;EACD;EACD,SAASQ,kBAATA,GAA2B;IACzB,OAAOhB,OAAO,CAACG,KAAD,CAAd;EACD;EACD,SAASC,oBAATA,CACEa,EADF,EAEEZ,KAFF,EAGEa,GAHF,EAGc;IAAA,IADZb,KACY;MADZA,KACY,GADC,IACD;IAAA;IAEZ,IAAIc,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGgB,kBAAkB,GAAGK,QAAxB,GAAmC,GADf,EAE3BJ,EAF2B,EAG3BZ,KAH2B,EAI3Ba,GAJ2B,CAA7B;IAMAI,OAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,QAD3B,+DAEsDC,IAAI,CAACC,SAAL,CACzDR,EADyD,CAFtD,CAAP;IAMA,OAAOE,QAAP;EACD;EAED,SAASO,UAATA,CAAoBT,EAApB,EAA0B;IACxB,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C;EACD;EAED,IAAIW,OAAO,GAAkB;IAC3B,IAAIzB,KAAJA,GAAS;MACP,OAAOA,KAAP;KAFyB;IAI3B,IAAIM,MAAJA,GAAU;MACR,OAAOA,MAAP;KALyB;IAO3B,IAAIU,QAAJA,GAAY;MACV,OAAOH,kBAAkB,EAAzB;KARyB;IAU3BU,UAV2B,EAU3BA,UAV2B;IAW3BG,SAAS,qBAACZ,EAAD,EAAG;MACV,OAAO,IAAIa,GAAJ,CAAQJ,UAAU,CAACT,EAAD,CAAlB,EAAwB,kBAAxB,CAAP;KAZyB;IAc3Bc,cAAc,0BAACd,EAAD,EAAO;MACnB,IAAIe,IAAI,GAAG,OAAOf,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAApD;MACA,OAAO;QACLI,QAAQ,EAAEW,IAAI,CAACX,QAAL,IAAiB,EADtB;QAELa,MAAM,EAAEF,IAAI,CAACE,MAAL,IAAe,EAFlB;QAGLC,IAAI,EAAEH,IAAI,CAACG,IAAL,IAAa;OAHrB;KAhByB;IAsB3BC,IAAI,gBAACnB,EAAD,EAAKZ,KAAL,EAAU;MACZI,MAAM,GAAGjB,MAAM,CAAC6C,IAAhB;MACA,IAAIC,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC;MACAF,KAAK,IAAI,CAAT;MACAH,OAAO,CAACuC,MAAR,CAAepC,KAAf,EAAsBH,OAAO,CAACQ,MAA9B,EAAsC8B,YAAtC;MACA,IAAIvC,QAAQ,IAAIY,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF,EAAEA,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAK,EAAE;QAAzC,CAAD,CAAR;MACD;KA7BwB;IA+B3BC,OAAO,mBAACxB,EAAD,EAAKZ,KAAL,EAAU;MACfI,MAAM,GAAGjB,MAAM,CAACkD,OAAhB;MACA,IAAIJ,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC;MACAL,OAAO,CAACG,KAAD,CAAP,GAAiBmC,YAAjB;MACA,IAAIvC,QAAQ,IAAIY,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF,EAAEA,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAK,EAAE;QAAzC,CAAD,CAAR;MACD;KArCwB;IAuC3BG,EAAE,cAACH,KAAD,EAAM;MACN/B,MAAM,GAAGjB,MAAM,CAACkB,GAAhB;MACA,IAAIkC,SAAS,GAAGrC,UAAU,CAACJ,KAAK,GAAGqC,KAAT,CAA1B;MACA,IAAIF,YAAY,GAAGtC,OAAO,CAAC4C,SAAD,CAA1B;MACAzC,KAAK,GAAGyC,SAAR;MACA,IAAIjC,QAAJ,EAAc;QACZA,QAAQ,CAAC;UAAEF,MAAF,EAAEA,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE;QAAlC,CAAD,CAAR;MACD;KA9CwB;IAgD3BK,MAAM,kBAACC,EAAD,EAAa;MACjBnC,QAAQ,GAAGmC,EAAX;MACA,OAAO,YAAK;QACVnC,QAAQ,GAAG,IAAX;OADF;IAGD;GArDH;EAwDA,OAAOiB,OAAP;AACD;AAkBD;;;;;;AAMG;;AACa,8BACdlC,OADc,EACqB;EAAA,IAAnCA,OAAmC;IAAnCA,OAAmC,GAAF,EAAE;EAAA;EAEnC,SAASqD,qBAATA,CACEC,MADF,EAEEC,aAFF,EAEkC;IAEhC,uBAAiCD,MAAM,CAAC7B,QAAxC;MAAME,QAAF,oBAAEA,QAAF;MAAYa,MAAZ,oBAAYA,MAAZ;MAAoBC;IACxB,OAAOf,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF,EAAEA,QAAF;MAAYa,MAAZ,EAAYA,MAAZ;MAAoBC;IAApB,CAFmB;IAAA;IAIlBc,aAAa,CAAC5C,KAAd,IAAuB4C,aAAa,CAAC5C,KAAd,CAAoB6C,GAA5C,IAAoD,IAJjC,EAKlBD,aAAa,CAAC5C,KAAd,IAAuB4C,aAAa,CAAC5C,KAAd,CAAoBa,GAA5C,IAAoD,SALjC,CAArB;EAOD;EAED,SAASiC,iBAATA,CAA2BH,MAA3B,EAA2C/B,EAA3C,EAAiD;IAC/C,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C;EACD;EAED,OAAOmC,kBAAkB,CACvBL,qBADuB,EAEvBI,iBAFuB,EAGvB,IAHuB,EAIvBzD,OAJuB,CAAzB;AAMD;AAsBD;;;;;;;AAOG;;AACa,2BACdA,OADc,EACkB;EAAA,IAAhCA,OAAgC;IAAhCA,OAAgC,GAAF,EAAE;EAAA;EAEhC,SAAS2D,kBAATA,CACEL,MADF,EAEEC,aAFF,EAEkC;IAEhC,iBAIIhB,SAAS,CAACe,MAAM,CAAC7B,QAAP,CAAgBgB,IAAhB,CAAqBmB,MAArB,CAA4B,CAA5B,CAAD,CAJb;MAAAC,iCACElC,QAAQ;MAARA,QAAQ,oCAAG,GADT;MAAAmC,+BAEFtB,MAAM;MAANA,MAAM,kCAAG,EAFP;MAAAuB,6BAGFtB,IAAI;MAAJA,IAAI,gCAAG;IAET,OAAOf,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF,EAAEA,QAAF;MAAYa,MAAZ,EAAYA,MAAZ;MAAoBC;IAApB,CAFmB;IAAA;IAIlBc,aAAa,CAAC5C,KAAd,IAAuB4C,aAAa,CAAC5C,KAAd,CAAoB6C,GAA5C,IAAoD,IAJjC,EAKlBD,aAAa,CAAC5C,KAAd,IAAuB4C,aAAa,CAAC5C,KAAd,CAAoBa,GAA5C,IAAoD,SALjC,CAArB;EAOD;EAED,SAASwC,cAATA,CAAwBV,MAAxB,EAAwC/B,EAAxC,EAA8C;IAC5C,IAAI0C,IAAI,GAAGX,MAAM,CAACY,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAX;IACA,IAAIC,IAAI,GAAG,EAAX;IAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAL,CAAkB,MAAlB,CAAZ,EAAuC;MACrC,IAAIC,GAAG,GAAGhB,MAAM,CAAC7B,QAAP,CAAgB2C,IAA1B;MACA,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAhB;MACAJ,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAf,GAAmBD,GAAnB,GAAyBA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,SAAb,CAAhC;IACD;IAED,OAAOH,IAAI,GAAG,GAAP,IAAc,OAAO7C,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAtD,CAAP;EACD;EAED,SAASmD,oBAATA,CAA8BjD,QAA9B,EAAkDF,EAAlD,EAAwD;IACtDK,OAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,QAD3B,iEAEwDC,IAAI,CAACC,SAAL,CAC3DR,EAD2D,CAFxD,GAAP;EAMD;EAED,OAAOmC,kBAAkB,CACvBC,kBADuB,EAEvBK,cAFuB,EAGvBU,oBAHuB,EAIvB1E,OAJuB,CAAzB;AAMD;AAee,mBAAU2E,KAAV,EAAsBC,OAAtB,EAAsC;EACpD,IAAID,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,IAA7B,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;IACrE,MAAM,IAAIE,KAAJ,CAAUD,OAAV,CAAN;EACD;AACF;AAEe,iBAAQE,IAAR,EAAmBF,OAAnB,EAAkC;EAChD,IAAI,CAACE,IAAL,EAAW;IACT;IACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaJ,OAAb;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN,CANE;IAQH,CARD,CAQE,OAAOK,CAAP,EAAU;EACb;AACF;AAED,SAASC,SAATA,GAAkB;EAChB,OAAO/D,IAAI,CAACgE,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BxB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD;AAED;;AAEG;;AACH,SAASyB,eAATA,CAAyB5D,QAAzB,EAA6ChB,KAA7C,EAA0D;EACxD,OAAO;IACL+C,GAAG,EAAE/B,QAAQ,CAACd,KADT;IAELa,GAAG,EAAEC,QAAQ,CAACD,GAFT;IAGL8D,GAAG,EAAE7E;GAHP;AAKD;AAED;;AAEG;;AACG,SAAUiB,cAAVA,CACJ6D,OADI,EAEJhE,EAFI,EAGJZ,KAHI,EAIJa,GAJI,EAIQ;EAAA,IADZb,KACY;IADZA,KACY,GADC,IACD;EAAA;EAEZ,IAAIc,QAAQ;IACVE,QAAQ,EAAE,OAAO4D,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAAC5D,QADhD;IAEVa,MAAM,EAAE,EAFE;IAGVC,IAAI,EAAE;GACF,SAAOlB,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJnC;IAKVZ,KALU,EAKVA,KALU;IAMV;IACA;IACA;IACA;IACAa,GAAG,EAAGD,EAAE,IAAKA,EAAe,CAACC,GAAxB,IAAgCA,GAAhC,IAAuC0D,SAAS;GAVvD;EAYA,OAAOzD,QAAP;AACD;AAED;;AAEG;;AACa,oBAIA+D;EAAA,yBAHd7D,QAAQ;IAARA,QAAQ,8BAAG,GADc;IAAA8D,cAIXD,KAFdhD,MAAM;IAANA,MAAM,4BAAG,EAFgB;IAAAkD,YAIXF,KADd/C,IAAI;IAAJA,IAAI,0BAAG;EAEP,IAAID,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACEb,QAAQ,IAAIa,MAAM,CAACX,MAAP,CAAc,CAAd,CAAqB,QAArB,GAA2BW,MAA3B,GAAoC,MAAMA,MAAtD;EACF,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEd,QAAQ,IAAIc,IAAI,CAACZ,MAAL,CAAY,CAAZ,CAAmB,QAAnB,GAAyBY,IAAzB,GAAgC,MAAMA,IAAlD;EACF,OAAOd,QAAP;AACD;AAED;;AAEG;;AACG,SAAUY,SAAVA,CAAoBD,IAApB,EAAgC;EACpC,IAAIqD,UAAU,GAAkB,EAAhC;EAEA,IAAIrD,IAAJ,EAAU;IACR,IAAIiC,SAAS,GAAGjC,IAAI,CAACkC,OAAL,CAAa,GAAb,CAAhB;IACA,IAAID,SAAS,IAAI,CAAjB,EAAoB;MAClBoB,UAAU,CAAClD,IAAX,GAAkBH,IAAI,CAACsB,MAAL,CAAYW,SAAZ,CAAlB;MACAjC,IAAI,GAAGA,IAAI,CAACsB,MAAL,CAAY,CAAZ,EAAeW,SAAf,CAAP;IACD;IAED,IAAIqB,WAAW,GAAGtD,IAAI,CAACkC,OAAL,CAAa,GAAb,CAAlB;IACA,IAAIoB,WAAW,IAAI,CAAnB,EAAsB;MACpBD,UAAU,CAACnD,MAAX,GAAoBF,IAAI,CAACsB,MAAL,CAAYgC,WAAZ,CAApB;MACAtD,IAAI,GAAGA,IAAI,CAACsB,MAAL,CAAY,CAAZ,EAAegC,WAAf,CAAP;IACD;IAED,IAAItD,IAAJ,EAAU;MACRqD,UAAU,CAAChE,QAAX,GAAsBW,IAAtB;IACD;EACF;EAED,OAAOqD,UAAP;AACD;AASD,SAASjC,kBAATA,CACEmC,WADF,EAEE7D,WAFF,EAGE8D,gBAHF,EAIE9F,OAJF,EAIiC;EAAA,IAA/BA,OAA+B;IAA/BA,OAA+B,GAAF,EAAE;EAAA;EAE/B,gBAA2DA,OAA3D;IAAA+F,6BAAMzC,MAAM;IAANA,MAAM,iCAAGY,QAAQ,CAAC8B,WAApB;IAAAC,+BAAkC5F,QAAQ;IAARA,QAAQ,mCAAG;EACjD,IAAIkD,aAAa,GAAGD,MAAM,CAACpB,OAA3B;EACA,IAAInB,MAAM,GAAGjB,MAAM,CAACkB,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;EAEA,IAAIR,KAAK,GAAGyF,QAAQ,EAApB,CAP+B;EAS/B;EACA;;EACA,IAAIzF,KAAK,IAAI,IAAb,EAAmB;IACjBA,KAAK,GAAG,CAAR;IACA8C,aAAa,CAAC4C,YAAd,CAAgC5C,0BAAa,CAAC5C,KAA9C;MAAqD2E,GAAG,EAAE7E;IAA1D,IAAmE,EAAnE;EACD;EAED,SAASyF,QAATA,GAAiB;IACf,IAAIvF,KAAK,GAAG4C,aAAa,CAAC5C,KAAd,IAAuB;MAAE2E,GAAG,EAAE;KAA1C;IACA,OAAO3E,KAAK,CAAC2E,GAAb;EACD;EAED,SAASc,SAATA,GAAkB;IAChBrF,MAAM,GAAGjB,MAAM,CAACkB,GAAhB;IACA,IAAIkC,SAAS,GAAGgD,QAAQ,EAAxB;IACA,IAAIpD,KAAK,GAAGI,SAAS,IAAI,IAAb,GAAoB,IAApB,GAA2BA,SAAS,GAAGzC,KAAnD;IACAA,KAAK,GAAGyC,SAAR;IACA,IAAIjC,QAAJ,EAAc;MACZA,QAAQ,CAAC;QAAEF,MAAF,EAAEA,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB;MAAtC,CAAD,CAAR;IACD;EACF;EAED,SAASJ,IAATA,CAAcnB,EAAd,EAAsBZ,KAAtB,EAAiC;IAC/BI,MAAM,GAAGjB,MAAM,CAAC6C,IAAhB;IACA,IAAIlB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B;IACA,IAAImF,gBAAJ,EAAsBA,gBAAgB,CAACrE,QAAD,EAAWF,EAAX,CAAhB;IAEtBd,KAAK,GAAGyF,QAAQ,KAAK,CAArB;IACA,IAAIG,YAAY,GAAGhB,eAAe,CAAC5D,QAAD,EAAWhB,KAAX,CAAlC;IACA,IAAI6D,GAAG,GAAGpC,OAAO,CAACF,UAAR,CAAmBP,QAAnB,CAAV,CAP+B;;IAU/B,IAAI;MACF8B,aAAa,CAAC+C,SAAd,CAAwBD,YAAxB,EAAsC,EAAtC,EAA0C/B,GAA1C;KADF,CAEE,OAAOiC,KAAP,EAAc;MACd;MACA;MACAjD,MAAM,CAAC7B,QAAP,CAAgB+E,MAAhB,CAAuBlC,GAAvB;IACD;IAED,IAAIjE,QAAQ,IAAIY,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF,EAAEA,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAK,EAAE;MAA7C,CAAD,CAAR;IACD;EACF;EAED,SAASC,OAATA,CAAiBxB,EAAjB,EAAyBZ,KAAzB,EAAoC;IAClCI,MAAM,GAAGjB,MAAM,CAACkD,OAAhB;IACA,IAAIvB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B;IACA,IAAImF,gBAAJ,EAAsBA,gBAAgB,CAACrE,QAAD,EAAWF,EAAX,CAAhB;IAEtBd,KAAK,GAAGyF,QAAQ,EAAhB;IACA,IAAIG,YAAY,GAAGhB,eAAe,CAAC5D,QAAD,EAAWhB,KAAX,CAAlC;IACA,IAAI6D,GAAG,GAAGpC,OAAO,CAACF,UAAR,CAAmBP,QAAnB,CAAV;IACA8B,aAAa,CAAC4C,YAAd,CAA2BE,YAA3B,EAAyC,EAAzC,EAA6C/B,GAA7C;IAEA,IAAIjE,QAAQ,IAAIY,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF,EAAEA,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAK,EAAE;MAA7C,CAAD,CAAR;IACD;EACF;EAED,SAASX,SAATA,CAAmBZ,EAAnB,EAAyB;IACvB;IACA;IACA;IACA,IAAI0C,IAAI,GACNX,MAAM,CAAC7B,QAAP,CAAgBgF,MAAhB,KAA2B,MAA3B,GACInD,MAAM,CAAC7B,QAAP,CAAgBgF,MADpB,GAEInD,MAAM,CAAC7B,QAAP,CAAgB2C,IAHtB;IAKA,IAAIA,IAAI,GAAG,OAAO7C,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAnD;IACAmF,SAAS,CACPzC,IADO,EAE+DG,4EAF/D,CAAT;IAIA,OAAO,IAAIhC,GAAJ,CAAQgC,IAAR,EAAcH,IAAd,CAAP;EACD;EAED,IAAI/B,OAAO,GAAY;IACrB,IAAInB,MAAJA,GAAU;MACR,OAAOA,MAAP;KAFmB;IAIrB,IAAIU,QAAJA,GAAY;MACV,OAAOoE,WAAW,CAACvC,MAAD,EAASC,aAAT,CAAlB;KALmB;IAOrBJ,MAAM,kBAACC,EAAD,EAAa;MACjB,IAAInC,QAAJ,EAAc;QACZ,MAAM,IAAI4D,KAAJ,CAAU,4CAAV,CAAN;MACD;MACDvB,MAAM,CAACqD,gBAAP,CAAwB5G,iBAAxB,EAA2CqG,SAA3C;MACAnF,QAAQ,GAAGmC,EAAX;MAEA,OAAO,YAAK;QACVE,MAAM,CAACsD,mBAAP,CAA2B7G,iBAA3B,EAA8CqG,SAA9C;QACAnF,QAAQ,GAAG,IAAX;OAFF;KAdmB;IAmBrBe,UAAU,sBAACT,EAAD,EAAG;MACX,OAAOS,WAAU,CAACsB,MAAD,EAAS/B,EAAT,CAAjB;KApBmB;IAsBrBY,SAtBqB,EAsBrBA,SAtBqB;IAuBrBE,cAAc,0BAACd,EAAD,EAAG;MACf;MACA,IAAI+C,GAAG,GAAGnC,SAAS,CAACZ,EAAD,CAAnB;MACA,OAAO;QACLI,QAAQ,EAAE2C,GAAG,CAAC3C,QADT;QAELa,MAAM,EAAE8B,GAAG,CAAC9B,MAFP;QAGLC,IAAI,EAAE6B,GAAG,CAAC7B;OAHZ;KA1BmB;IAgCrBC,IAhCqB,EAgCrBA,IAhCqB;IAiCrBK,OAjCqB,EAiCrBA,OAjCqB;IAkCrBE,EAAE,cAAC/B,CAAD,EAAE;MACF,OAAOqC,aAAa,CAACN,EAAd,CAAiB/B,CAAjB,CAAP;IACD;GApCH;EAuCA,OAAOgB,OAAP;AACD;;ACpsBD,IAAY2E,UAAZ;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,UAAU,KAAVA,UAAU,GAKrB,EALqB,CAAtB;AA+LO,IAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAA2B,CAC3D,MAD2D,EAE3D,eAF2D,EAG3D,MAH2D,EAI3D,IAJ2D,EAK3D,OAL2D,EAM3D,UAN2D,CAA3B,CAA3B;AAoJP,SAASC,YAATA,CACEC,KADF,EAC4B;EAE1B,OAAOA,KAAK,CAACxG,KAAN,KAAgB,IAAvB;AACD;AAGD;;AACM,SAAUyG,yBAAVA,CACJC,MADI,EAEJC,kBAFI,EAGJC,UAHI,EAIJC,QAJI,EAIwB;EAAA,IAD5BD,UAC4B;IAD5BA,UAC4B,GADL,EACK;EAAA;EAAA,IAA5BC,QAA4B;IAA5BA,QAA4B,GAAF,EAAE;EAAA;EAE5B,OAAOH,MAAM,CAAC5G,GAAP,CAAW,UAAC0G,KAAD,EAAQxG,KAAR,EAAiB;IACjC,IAAI8G,QAAQ,gCAAOF,UAAJ,IAAgB5G,KAAhB,EAAf;IACA,IAAI+G,EAAE,GAAG,OAAOP,KAAK,CAACO,EAAb,KAAoB,QAApB,GAA+BP,KAAK,CAACO,EAArC,GAA0CD,QAAQ,CAACE,IAAT,CAAc,GAAd,CAAnD;IACAf,SAAS,CACPO,KAAK,CAACxG,KAAN,KAAgB,IAAhB,IAAwB,CAACwG,KAAK,CAACS,QADxB,EAAT;IAIAhB,SAAS,CACP,CAACY,QAAQ,CAACE,EAAD,CADF,EAEP,qCAAqCA,KAArC,GACE,wEAHK,CAAT;IAMA,IAAIR,YAAY,CAACC,KAAD,CAAhB,EAAyB;MACvB,IAAIU,UAAU,GACTV,kBADS,EAETG,kBAAkB,CAACH,KAAD,CAFT;QAGZO;OAHF;MAKAF,QAAQ,CAACE,EAAD,CAAR,GAAeG,UAAf;MACA,OAAOA,UAAP;IACD,CARD,MAQO;MACL,IAAIC,iBAAiB,GAChBX,kBADgB,EAEhBG,kBAAkB,CAACH,KAAD,CAFF;QAGnBO,EAHmB,EAGnBA,EAHmB;QAInBE,QAAQ,EAAE9G;OAJZ;MAMA0G,QAAQ,CAACE,EAAD,CAAR,GAAeI,iBAAf;MAEA,IAAIX,KAAK,CAACS,QAAV,EAAoB;QAClBE,iBAAiB,CAACF,QAAlB,GAA6BR,yBAAyB,CACpDD,KAAK,CAACS,QAD8C,EAEpDN,kBAFoD,EAGpDG,QAHoD,EAIpDD,QAJoD,CAAtD;MAMD;MAED,OAAOM,iBAAP;IACD;EACF,CAzCM,CAAP;AA0CD;AAED;;;;AAIG;;AACG,SAAUC,WAAVA,CAGJV,MAHI,EAIJW,WAJI,EAKJC,QALI,EAKU;EAAA,IAAdA,QAAc;IAAdA,QAAc,GAAH,GAAG;EAAA;EAEd,IAAItG,QAAQ,GACV,OAAOqG,WAAP,KAAuB,QAAvB,GAAkCvF,SAAS,CAACuF,WAAD,CAA3C,GAA2DA,WAD7D;EAGA,IAAInG,QAAQ,GAAGqG,aAAa,CAACvG,QAAQ,CAACE,QAAT,IAAqB,GAAtB,EAA2BoG,QAA3B,CAA5B;EAEA,IAAIpG,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,IAAP;EACD;EAED,IAAIsG,QAAQ,GAAGC,aAAa,CAACf,MAAD,CAA5B;EACAgB,iBAAiB,CAACF,QAAD,CAAjB;EAEA,IAAIG,OAAO,GAAG,IAAd;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAX,IAAmBC,CAAC,GAAGJ,QAAQ,CAACnH,MAAhD,EAAwD,EAAEuH,CAA1D,EAA6D;IAC3DD,OAAO,GAAGE,gBAAgB,CACxBL,QAAQ,CAACI,CAAD,CADgB;IAAA;IAGxB;IACA;IACA;IACA;IACA;IACAE,eAAe,CAAC5G,QAAD,CARS,CAA1B;EAUD;EAED,OAAOyG,OAAP;AACD;AAmBD,SAASF,aAATA,CAGEf,MAHF,EAIEc,QAJF,EAKEO,WALF,EAMEnB,UANF,EAMiB;EAAA,IAFfY,QAEe;IAFfA,QAEe,GAF4B,EAE5B;EAAA;EAAA,IADfO,WACe;IADfA,WACe,GAD6B,EAC7B;EAAA;EAAA,IAAfnB,UAAe;IAAfA,UAAe,GAAF,EAAE;EAAA;EAEf,IAAIoB,YAAY,GAAG,SAAfA,YAAYA,CACdxB,KADiB,EAEjBxG,KAFiB,EAGjBiI,YAHiB,EAIf;IACF,IAAIC,IAAI,GAA+B;MACrCD,YAAY,EACVA,YAAY,KAAK9H,SAAjB,GAA6BqG,KAAK,CAAC3E,IAAN,IAAc,EAA3C,GAAgDoG,YAFb;MAGrCE,aAAa,EAAE3B,KAAK,CAAC2B,aAAN,KAAwB,IAHF;MAIrCC,aAAa,EAAEpI,KAJsB;MAKrCwG;KALF;IAQA,IAAI0B,IAAI,CAACD,YAAL,CAAkBI,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;MACrCpC,SAAS,CACPiC,IAAI,CAACD,YAAL,CAAkBI,UAAlB,CAA6BzB,UAA7B,CADO,EAEP,2BAAwBsB,IAAI,CAACD,YAA7B,GACMrB,4CADN,oHAFO,CAAT;MAOAsB,IAAI,CAACD,YAAL,GAAoBC,IAAI,CAACD,YAAL,CAAkBjE,KAAlB,CAAwB4C,UAAU,CAACvG,MAAnC,CAApB;IACD;IAED,IAAIwB,IAAI,GAAGyG,SAAS,CAAC,CAAC1B,UAAD,EAAasB,IAAI,CAACD,YAAlB,CAAD,CAApB;IACA,IAAIM,UAAU,GAAGR,WAAW,CAACS,MAAZ,CAAmBN,IAAnB,CAAjB,CArBE;IAwBF;IACA;;IACA,IAAI1B,KAAK,CAACS,QAAN,IAAkBT,KAAK,CAACS,QAAN,CAAe5G,MAAf,GAAwB,CAA9C,EAAiD;MAC/C4F,SAAS;MAAA;MAEP;MACAO,KAAK,CAACxG,KAAN,KAAgB,IAHT,EAIP,yDACuC6B,gDADvC,SAJO,CAAT;MAQA4F,aAAa,CAACjB,KAAK,CAACS,QAAP,EAAiBO,QAAjB,EAA2Be,UAA3B,EAAuC1G,IAAvC,CAAb;IACD,CApCC;IAuCF;;IACA,IAAI2E,KAAK,CAAC3E,IAAN,IAAc,IAAd,IAAsB,CAAC2E,KAAK,CAACxG,KAAjC,EAAwC;MACtC;IACD;IAEDwH,QAAQ,CAACvF,IAAT,CAAc;MACZJ,IADY,EACZA,IADY;MAEZ4G,KAAK,EAAEC,YAAY,CAAC7G,IAAD,EAAO2E,KAAK,CAACxG,KAAb,CAFP;MAGZuI;KAHF;GAhDF;EAsDA7B,MAAM,CAACiC,OAAP,CAAe,UAACnC,KAAD,EAAQxG,KAAR,EAAiB;IAAA;;IAC9B;IACA,IAAIwG,KAAK,CAAC3E,IAAN,KAAe,EAAf,IAAqB,EAAC2E,oBAAK,CAAC3E,IAAP,aAAC+G,WAAYC,SAAZ,CAAqB,GAArB,CAAD,CAAzB,EAAqD;MACnDb,YAAY,CAACxB,KAAD,EAAQxG,KAAR,CAAZ;IACD,CAFD,MAEO;MAAA,2CACgB8I,uBAAuB,CAACtC,KAAK,CAAC3E,IAAP,CAA5C;QAAAkH;MAAA;QAAA,oDAA0D;UAAA,IAAjDC,QAAT;UACEhB,YAAY,CAACxB,KAAD,EAAQxG,KAAR,EAAegJ,QAAf,CAAZ;QACD;MAAA;QAAAC;MAAA;QAAAA;MAAA;IACF;GARH;EAWA,OAAOzB,QAAP;AACD;AAED;;;;;;;;;;;;;AAaG;;AACH,SAASsB,uBAATA,CAAiCjH,IAAjC,EAA6C;EAC3C,IAAIqH,QAAQ,GAAGrH,IAAI,CAACsH,KAAL,CAAW,GAAX,CAAf;EACA,IAAID,QAAQ,CAAC7I,MAAT,KAAoB,CAAxB,EAA2B,OAAO,EAAP;EAE3B,yBAAuB6I,QAAvB;IAAKE,KAAD;IAAWC,IAAX,sBAJuC;;EAO3C,IAAIC,UAAU,GAAGF,KAAK,CAACG,QAAN,CAAe,GAAf,CAAjB,CAP2C;;EAS3C,IAAIC,QAAQ,GAAGJ,KAAK,CAAC9G,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAf;EAEA,IAAI+G,IAAI,CAAChJ,MAAL,KAAgB,CAApB,EAAuB;IACrB;IACA;IACA,OAAOiJ,UAAU,GAAG,CAACE,QAAD,EAAW,EAAX,CAAH,GAAoB,CAACA,QAAD,CAArC;EACD;EAED,IAAIC,YAAY,GAAGX,uBAAuB,CAACO,IAAI,CAACrC,IAAL,CAAU,GAAV,CAAD,CAA1C;EAEA,IAAI0C,MAAM,GAAa,EAAvB,CAnB2C;EAsB3C;EACA;EACA;EACA;EACA;EACA;;EACAA,MAAM,CAACzH,IAAP,aAAM,qBACDwH,YAAY,CAAC3J,GAAb,CAAkB6J,iBAAD;IAAA,OAClBA,OAAO,KAAK,EAAZ,GAAiBH,QAAjB,GAA4B,CAACA,QAAD,EAAWG,OAAX,EAAoB3C,IAApB,CAAyB,GAAzB,CAD3B;EAAA,EADL,GA5B2C;;EAmC3C,IAAIsC,UAAJ,EAAgB;IACdI,MAAM,CAACzH,IAAP,aAAM,qBAASwH,YAAf;EACD,CArC0C;;EAwC3C,OAAOC,MAAM,CAAC5J,GAAP,CAAYkJ,kBAAD;IAAA,OAChBnH,IAAI,CAACwG,UAAL,CAAgB,GAAhB,KAAwBW,QAAQ,KAAK,EAArC,GAA0C,GAA1C,GAAgDA,QAD3C;EAAA,EAAP;AAGD;AAED,SAAStB,iBAATA,CAA2BF,QAA3B,EAAkD;EAChDA,QAAQ,CAACoC,IAAT,CAAc,UAACC,CAAD,EAAIC,CAAJ;IAAA,OACZD,CAAC,CAACpB,KAAF,KAAYqB,CAAC,CAACrB,KAAd,GACIqB,CAAC,CAACrB,KAAF,GAAUoB,CAAC,CAACpB,KADhB;IAAA,EAEIsB,cAAc,CACZF,CAAC,CAACtB,UAAF,CAAazI,GAAb,CAAkBoI,cAAD;MAAA,OAAUA,IAAI,CAACE,aAAhC;IAAA,EADY,EAEZ0B,CAAC,CAACvB,UAAF,CAAazI,GAAb,CAAkBoI,cAAD;MAAA,OAAUA,IAAI,CAACE,aAAhC;IAAA,EAFY,CAHpB;EAAA;AAQD;AAED,IAAM4B,OAAO,GAAG,QAAhB;AACA,IAAMC,mBAAmB,GAAG,CAA5B;AACA,IAAMC,eAAe,GAAG,CAAxB;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA,IAAMC,kBAAkB,GAAG,EAA3B;AACA,IAAMC,YAAY,GAAG,CAAC,CAAtB;AACA,IAAMC,OAAO,GAAIC,SAAXD,OAAOA,CAAIC,CAAD;EAAA,OAAeA,CAAC,KAAK,GAArC;AAAA;AAEA,SAAS7B,YAATA,CAAsB7G,IAAtB,EAAoC7B,KAApC,EAA8D;EAC5D,IAAIkJ,QAAQ,GAAGrH,IAAI,CAACsH,KAAL,CAAW,GAAX,CAAf;EACA,IAAIqB,YAAY,GAAGtB,QAAQ,CAAC7I,MAA5B;EACA,IAAI6I,QAAQ,CAACuB,IAAT,CAAcH,OAAd,CAAJ,EAA4B;IAC1BE,YAAY,IAAIH,YAAhB;EACD;EAED,IAAIrK,KAAJ,EAAW;IACTwK,YAAY,IAAIN,eAAhB;EACD;EAED,OAAOhB,QAAQ,CACZwB,MADI,CACIH,WAAD;IAAA,OAAO,CAACD,OAAO,CAACC,CAAD,CADlB;EAAA,EAEJI,OAFI,CAGH,UAAClC,KAAD,EAAQmC,OAAR;IAAA,OACEnC,KAAK,IACJuB,OAAO,CAACa,IAAR,CAAaD,OAAb,IACGX,mBADH,GAEGW,OAAO,KAAK,EAAZ,GACAT,iBADA,GAEAC,kBALC,CAJJ;EAAA,GAUHI,YAVG,CAAP;AAYD;AAED,SAAST,cAATA,CAAwBF,CAAxB,EAAqCC,CAArC,EAAgD;EAC9C,IAAIgB,QAAQ,GACVjB,CAAC,CAACxJ,MAAF,KAAayJ,CAAC,CAACzJ,MAAf,IAAyBwJ,CAAC,CAAC7F,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAe+G,MAAf,CAAqB,UAACtK,CAAD,EAAImH,CAAJ;IAAA,OAAUnH,CAAC,KAAKqJ,CAAC,CAAClC,CAAD,CAAtC;EAAA,EAD3B;EAGA,OAAOkD,QAAQ;EAAA;EAEX;EACA;EACA;EACAjB,CAAC,CAACA,CAAC,CAACxJ,MAAF,GAAW,CAAZ,CAAD,GAAkByJ,CAAC,CAACA,CAAC,CAACzJ,MAAF,GAAW,CAAZ,CALR;EAAA;EAOX;EACA,CARJ;AASD;AAED,SAASwH,gBAATA,CAIEmD,MAJF,EAKE9J,QALF,EAKkB;EAEhB,IAAMqH,aAAeyC,MAArB,CAAMzC;EAEN,IAAI0C,aAAa,GAAG,EAApB;EACA,IAAIC,eAAe,GAAG,GAAtB;EACA,IAAIvD,OAAO,GAAoD,EAA/D;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,UAAU,CAAClI,MAA/B,EAAuC,EAAEuH,CAAzC,EAA4C;IAC1C,IAAIM,IAAI,GAAGK,UAAU,CAACX,CAAD,CAArB;IACA,IAAIuD,GAAG,GAAGvD,CAAC,KAAKW,UAAU,CAAClI,MAAX,GAAoB,CAApC;IACA,IAAI+K,iBAAiB,GACnBF,eAAe,KAAK,GAApB,GACIhK,QADJ,GAEIA,QAAQ,CAAC8C,KAAT,CAAekH,eAAe,CAAC7K,MAA/B,KAA0C,GAHhD;IAIA,IAAIgL,KAAK,GAAGC,SAAS,CACnB;MAAEzJ,IAAI,EAAEqG,IAAI,CAACD,YAAb;MAA2BE,aAAa,EAAED,IAAI,CAACC,aAA/C;MAA8DgD;KAD3C,EAEnBC,iBAFmB,CAArB;IAKA,IAAI,CAACC,KAAL,EAAY,OAAO,IAAP;IAEZE,MAAM,CAACxF,MAAP,CAAckF,aAAd,EAA6BI,KAAK,CAACG,MAAnC;IAEA,IAAIhF,KAAK,GAAG0B,IAAI,CAAC1B,KAAjB;IAEAmB,OAAO,CAAC1F,IAAR,CAAa;MACX;MACAuJ,MAAM,EAAEP,aAFG;MAGX/J,QAAQ,EAAEoH,SAAS,CAAC,CAAC4C,eAAD,EAAkBG,KAAK,CAACnK,QAAxB,CAAD,CAHR;MAIXuK,YAAY,EAAEC,iBAAiB,CAC7BpD,SAAS,CAAC,CAAC4C,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CADoB,CAJpB;MAOXjF;KAPF;IAUA,IAAI6E,KAAK,CAACI,YAAN,KAAuB,GAA3B,EAAgC;MAC9BP,eAAe,GAAG5C,SAAS,CAAC,CAAC4C,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CAA3B;IACD;EACF;EAED,OAAO9D,OAAP;AACD;AAED;;;;AAIG;;SACagE,aACdC,cACAJ,QAEa;EAAA,IAFbA,MAEa;IAFbA,MAEa,GAAT,EAAS;EAAA;EAEb,IAAI3J,IAAI,GAAW+J,YAAnB;EACA,IAAI/J,IAAI,CAAC0H,QAAL,CAAc,GAAd,KAAsB1H,IAAI,KAAK,GAA/B,IAAsC,CAACA,IAAI,CAAC0H,QAAL,CAAc,IAAd,CAA3C,EAAgE;IAC9DpI,OAAO,CACL,KADK,EAEL,eAAeU,OAAf,iDACMA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCT,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP;IAOAT,IAAI,GAAGA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAP;EACD,CAZY;;EAeb,IAAMuJ,MAAM,GAAGhK,IAAI,CAACwG,UAAL,CAAgB,GAAhB,IAAuB,GAAvB,GAA6B,EAA5C;EAEA,IAAMa,QAAQ,GAAGrH,IAAI,CAClBsH,KADc,CACR,KADQ,EAEdrJ,GAFc,CAEV,UAAC8K,OAAD,EAAU5K,KAAV,EAAiB8L,KAAjB,EAA0B;IAC7B,IAAMC,aAAa,GAAG/L,KAAK,KAAK8L,KAAK,CAACzL,MAAN,GAAe,CAA/C,CAD6B;;IAI7B,IAAI0L,aAAa,IAAInB,OAAO,KAAK,GAAjC,EAAsC;MACpC,IAAMoB,IAAI,GAAG,GAAb;MACA,IAAMC,SAAS,GAAGT,MAAM,CAACQ,IAAD,CAAxB,CAFoC;;MAKpC,OAAOC,SAAP;IACD;IAED,IAAMC,QAAQ,GAAGtB,OAAO,CAACS,KAAR,CAAc,eAAd,CAAjB;IACA,IAAIa,QAAJ,EAAc;MACZ,+BAA0BA,QAA1B;QAASnL,GAAH;QAAQoL,QAAR;MACN,IAAIC,KAAK,GAAGZ,MAAM,CAACzK,GAAD,CAAlB;MAEA,IAAIoL,QAAQ,KAAK,GAAjB,EAAsB;QACpB,OAAOC,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAA5B;MACD;MAED,IAAIA,KAAK,IAAI,IAAb,EAAmB;QACjBnG,SAAS,CAAC,KAAD,EAAqBlF,mBAArB,GAAT;MACD;MAED,OAAOqL,KAAP;IACD,CA1B4B;;IA6B7B,OAAOxB,OAAO,CAACtI,OAAR,CAAgB,MAAhB,EAAwB,EAAxB,CAAP;EACD,CAhCc,CAiCf;EAAA,CACCoI,MAlCc,CAkCNE,iBAAD;IAAA,OAAa,CAAC,CAACA,OAlCR;EAAA,EAAjB;EAoCA,OAAOiB,MAAM,GAAG3C,QAAQ,CAAClC,IAAT,CAAc,GAAd,CAAhB;AACD;AAiDD;;;;;AAKG;;AACa,mBAIdqF,OAJc,EAKdnL,QALc,EAKE;EAEhB,IAAI,OAAOmL,OAAP,KAAmB,QAAvB,EAAiC;IAC/BA,OAAO,GAAG;MAAExK,IAAI,EAAEwK,OAAR;MAAiBlE,aAAa,EAAE,KAAhC;MAAuCgD,GAAG,EAAE;KAAtD;EACD;EAED,mBAA4BmB,WAAW,CACrCD,OAAO,CAACxK,IAD6B,EAErCwK,OAAO,CAAClE,aAF6B,EAGrCkE,OAAO,CAAClB,GAH6B,CAAvC;IAAAoB;IAAKC,OAAD;IAAUC,UAAV;EAMJ,IAAIpB,KAAK,GAAGnK,QAAQ,CAACmK,KAAT,CAAemB,OAAf,CAAZ;EACA,IAAI,CAACnB,KAAL,EAAY,OAAO,IAAP;EAEZ,IAAIH,eAAe,GAAGG,KAAK,CAAC,CAAD,CAA3B;EACA,IAAII,YAAY,GAAGP,eAAe,CAAC5I,OAAhB,CAAwB,SAAxB,EAAmC,IAAnC,CAAnB;EACA,IAAIoK,aAAa,GAAGrB,KAAK,CAACrH,KAAN,CAAY,CAAZ,CAApB;EACA,IAAIwH,MAAM,GAAWiB,UAAU,CAAC9B,MAAX,CACnB,UAACgC,IAAD,EAAOC,SAAP,EAAkB5M,KAAlB,EAA2B;IACzB;IACA;IACA,IAAI4M,SAAS,KAAK,GAAlB,EAAuB;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAAC1M,KAAD,CAAb,IAAwB,EAAzC;MACAyL,YAAY,GAAGP,eAAe,CAC3BlH,KADY,CACN,CADM,EACHkH,eAAe,CAAC7K,MAAhB,GAAyBwM,UAAU,CAACxM,MADjC,CAEZiC,QAFY,CAEJ,SAFI,EAEO,IAFP,CAAf;IAGD;IAEDqK,IAAI,CAACC,SAAD,CAAJ,GAAkBE,wBAAwB,CACxCJ,aAAa,CAAC1M,KAAD,CAAb,IAAwB,EADgB,EAExC4M,SAFwC,CAA1C;IAIA,OAAOD,IAAP;GAfiB,EAiBnB,EAjBmB,CAArB;EAoBA,OAAO;IACLnB,MADK,EACLA,MADK;IAELtK,QAAQ,EAAEgK,eAFL;IAGLO,YAHK,EAGLA,YAHK;IAILY;GAJF;AAMD;AAED,SAASC,WAATA,CACEzK,IADF,EAEEsG,aAFF,EAGEgD,GAHF,EAGY;EAAA,IADVhD,aACU;IADVA,aACU,GADM,KACN;EAAA;EAAA,IAAVgD,GAAU;IAAVA,GAAU,GAAJ,IAAI;EAAA;EAEVhK,OAAO,CACLU,IAAI,KAAK,GAAT,IAAgB,CAACA,IAAI,CAAC0H,QAAL,CAAc,GAAd,CAAjB,IAAuC1H,IAAI,CAAC0H,QAAL,CAAc,IAAd,CADlC,EAEL,eAAe1H,OAAf,iDACMA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCT,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP;EAQA,IAAImK,UAAU,GAAa,EAA3B;EACA,IAAIM,YAAY,GACd,MACAlL,IAAI,CACDS,OADH,CACW,SADX,EACsB,EADtB,CAC0B;EAAA,CACvBA,OAFH,CAEW,MAFX,EAEmB,GAFnB,CAEwB;EAAA,CACrBA,OAHH,CAGW,qBAHX,EAGkC,MAHlC,CAG0C;EAAA,CACvCA,OAJH,CAIW,WAJX,EAIwB,UAAC0K,CAAD,EAAYJ,SAAZ,EAAiC;IACrDH,UAAU,CAACxK,IAAX,CAAgB2K,SAAhB;IACA,OAAO,YAAP;EACD,CAPH,CAFF;EAWA,IAAI/K,IAAI,CAAC0H,QAAL,CAAc,GAAd,CAAJ,EAAwB;IACtBkD,UAAU,CAACxK,IAAX,CAAgB,GAAhB;IACA8K,YAAY,IACVlL,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,GACI,OADJ;IAAA,EAEI,mBAHN,CAFsB;GAAxB,MAMO,IAAIsJ,GAAJ,EAAS;IACd;IACA4B,YAAY,IAAI,OAAhB;GAFK,MAGA,IAAIlL,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACAkL,YAAY,IAAI,eAAhB;EACD,CATM,MASA;EAIP,IAAIP,OAAO,GAAG,IAAIS,MAAJ,CAAWF,YAAX,EAAyB5E,aAAa,GAAGhI,SAAH,GAAe,GAArD,CAAd;EAEA,OAAO,CAACqM,OAAD,EAAUC,UAAV,CAAP;AACD;AAED,SAAS3E,eAATA,CAAyB5D,KAAzB,EAAsC;EACpC,IAAI;IACF,OAAOgJ,SAAS,CAAChJ,KAAD,CAAhB;GADF,CAEE,OAAO4B,KAAP,EAAc;IACd3E,OAAO,CACL,KADK,EAEL,oBAAiB+C,KAAjB,GAEe4B,uIAFf,QAFK,CAAP;IAOA,OAAO5B,KAAP;EACD;AACF;AAED,SAAS4I,wBAATA,CAAkC5I,KAAlC,EAAiD0I,SAAjD,EAAkE;EAChE,IAAI;IACF,OAAOO,kBAAkB,CAACjJ,KAAD,CAAzB;GADF,CAEE,OAAO4B,KAAP,EAAc;IACd3E,OAAO,CACL,KADK,EAEL,gCAAgCyL,YAAhC,0DACkB1I,KADlB,8FAEqC4B,KAFrC,QAFK,CAAP;IAOA,OAAO5B,KAAP;EACD;AACF;AAED;;AAEG;;AACa,uBACdhD,QADc,EAEdoG,QAFc,EAEE;EAEhB,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAOpG,QAAP;EAEtB,IAAI,CAACA,QAAQ,CAACkM,WAAT,EAAuB/E,WAAvB,CAAkCf,QAAQ,CAAC8F,WAAT,EAAlC,CAAL,EAAgE;IAC9D,OAAO,IAAP;EACD,CANe;EAShB;;EACA,IAAIC,UAAU,GAAG/F,QAAQ,CAACiC,QAAT,CAAkB,GAAlB,IACbjC,QAAQ,CAACjH,MAAT,GAAkB,CADL,GAEbiH,QAAQ,CAACjH,MAFb;EAGA,IAAIiN,QAAQ,GAAGpM,QAAQ,CAACE,MAAT,CAAgBiM,UAAhB,CAAf;EACA,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;IAChC;IACA,OAAO,IAAP;EACD;EAED,OAAOpM,QAAQ,CAAC8C,KAAT,CAAeqJ,UAAf,KAA8B,GAArC;AACD;AAED;;;;AAIG;;SACaE,YAAYzM,IAAQ0M,cAAkB;EAAA,IAAlBA,YAAkB;IAAlBA,YAAkB,GAAH,GAAG;EAAA;EACpD,YAII,OAAO1M,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJ7C;IACY2M,UADR,SACFvM,QAAQ;IAAAwM,qBACR3L,MAAM;IAANA,MAAM,6BAAG,EAFP;IAAA4L,mBAGF3L,IAAI;IAAJA,IAAI,2BAAG;EAGT,IAAId,QAAQ,GAAGuM,UAAU,GACrBA,UAAU,CAACpF,UAAX,CAAsB,GAAtB,IACEoF,UADF,GAEEG,eAAe,CAACH,UAAD,EAAaD,YAAb,CAHI,GAIrBA,YAJJ;EAMA,OAAO;IACLtM,QADK,EACLA,QADK;IAELa,MAAM,EAAE8L,eAAe,CAAC9L,MAAD,CAFlB;IAGLC,IAAI,EAAE8L,aAAa,CAAC9L,IAAD;GAHrB;AAKD;AAED,SAAS4L,eAATA,CAAyB3F,YAAzB,EAA+CuF,YAA/C,EAAmE;EACjE,IAAItE,QAAQ,GAAGsE,YAAY,CAAClL,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EAAiC6G,KAAjC,CAAuC,GAAvC,CAAf;EACA,IAAI4E,gBAAgB,GAAG9F,YAAY,CAACkB,KAAb,CAAmB,GAAnB,CAAvB;EAEA4E,gBAAgB,CAACpF,OAAjB,CAA0BiC,iBAAD,EAAY;IACnC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;MACpB;MACA,IAAI1B,QAAQ,CAAC7I,MAAT,GAAkB,CAAtB,EAAyB6I,QAAQ,CAAC8E,GAAT;IAC1B,CAHD,MAGO,IAAIpD,OAAO,KAAK,GAAhB,EAAqB;MAC1B1B,QAAQ,CAACjH,IAAT,CAAc2I,OAAd;IACD;GANH;EASA,OAAO1B,QAAQ,CAAC7I,MAAT,GAAkB,CAAlB,GAAsB6I,QAAQ,CAAClC,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAAlD;AACD;AAED,SAASiH,mBAATA,CACEC,IADF,EAEEC,KAFF,EAGEC,IAHF,EAIEvM,IAJF,EAIqB;EAEnB,OACE,oBAAqBqM,OAArB,GACQC,wDADR,GAC0B9M,kBAAI,CAACC,SAAL,CACxBO,IADwB,CAD1B,qDAIQuM,IAJR,GADF;AAQD;AAED;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACG,SAAUC,0BAAVA,CAEJ1G,OAFI,EAEQ;EACZ,OAAOA,OAAO,CAAC+C,MAAR,CACL,UAACW,KAAD,EAAQrL,KAAR;IAAA,OACEA,KAAK,KAAK,CAAV,IAAgBqL,KAAK,CAAC7E,KAAN,CAAY3E,IAAZ,IAAoBwJ,KAAK,CAAC7E,KAAN,CAAY3E,IAAZ,CAAiBxB,MAAjB,GAA0B,CAF3D;EAAA,EAAP;AAID;AAED;;AAEG;;AACG,SAAUiO,SAAVA,CACJC,KADI,EAEJC,cAFI,EAGJC,gBAHI,EAIJC,cAJI,EAIkB;EAAA,IAAtBA,cAAsB;IAAtBA,cAAsB,GAAL,KAAK;EAAA;EAEtB,IAAI5N,EAAJ;EACA,IAAI,OAAOyN,KAAP,KAAiB,QAArB,EAA+B;IAC7BzN,EAAE,GAAGgB,SAAS,CAACyM,KAAD,CAAd;EACD,CAFD,MAEO;IACLzN,EAAE,gBAAQyN,KAAR,CAAF;IAEAtI,SAAS,CACP,CAACnF,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAH,CAAY2H,QAAZ,CAAqB,GAArB,CADV,EAEPoF,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,QAAlB,EAA4BnN,EAA5B,CAFZ,CAAT;IAIAmF,SAAS,CACP,CAACnF,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAH,CAAY2H,QAAZ,CAAqB,GAArB,CADV,EAEPoF,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,MAAlB,EAA0BnN,EAA1B,CAFZ,CAAT;IAIAmF,SAAS,CACP,CAACnF,EAAE,CAACiB,MAAJ,IAAc,CAACjB,EAAE,CAACiB,MAAH,CAAU8G,QAAV,CAAmB,GAAnB,CADR,EAEPoF,mBAAmB,CAAC,GAAD,EAAM,QAAN,EAAgB,MAAhB,EAAwBnN,EAAxB,CAFZ,CAAT;EAID;EAED,IAAI6N,WAAW,GAAGJ,KAAK,KAAK,EAAV,IAAgBzN,EAAE,CAACI,QAAH,KAAgB,EAAlD;EACA,IAAIuM,UAAU,GAAGkB,WAAW,GAAG,GAAH,GAAS7N,EAAE,CAACI,QAAxC;EAEA,IAAI0N,IAAJ,CAzBsB;EA4BtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIF,cAAc,IAAIjB,UAAU,IAAI,IAApC,EAA0C;IACxCmB,IAAI,GAAGH,gBAAP;EACD,CAFD,MAEO;IACL,IAAII,kBAAkB,GAAGL,cAAc,CAACnO,MAAf,GAAwB,CAAjD;IAEA,IAAIoN,UAAU,CAACpF,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;MAC/B,IAAIyG,UAAU,GAAGrB,UAAU,CAACtE,KAAX,CAAiB,GAAjB,CAAjB,CAD+B;MAI/B;MACA;;MACA,OAAO2F,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAzB,EAA+B;QAC7BA,UAAU,CAACC,KAAX;QACAF,kBAAkB,IAAI,CAAtB;MACD;MAED/N,EAAE,CAACI,QAAH,GAAc4N,UAAU,CAAC9H,IAAX,CAAgB,GAAhB,CAAd;IACD,CAfI;IAkBL;;IACA4H,IAAI,GAAGC,kBAAkB,IAAI,CAAtB,GAA0BL,cAAc,CAACK,kBAAD,CAAxC,GAA+D,GAAtE;EACD;EAED,IAAIhN,IAAI,GAAG0L,WAAW,CAACzM,EAAD,EAAK8N,IAAL,CAAtB,CA5DsB;;EA+DtB,IAAII,wBAAwB,GAC1BvB,UAAU,IAAIA,UAAU,KAAK,GAA7B,IAAoCA,UAAU,CAAClE,QAAX,CAAoB,GAApB,CADtC,CA/DsB;;EAkEtB,IAAI0F,uBAAuB,GACzB,CAACN,WAAW,IAAIlB,UAAU,KAAK,GAA/B,KAAuCgB,gBAAgB,CAAClF,QAAjB,CAA0B,GAA1B,CADzC;EAEA,IACE,CAAC1H,IAAI,CAACX,QAAL,CAAcqI,QAAd,CAAuB,GAAvB,CAAD,KACCyF,wBAAwB,IAAIC,uBAD7B,CADF,EAGE;IACApN,IAAI,CAACX,QAAL,IAAiB,GAAjB;EACD;EAED,OAAOW,IAAP;AACD;AAED;;AAEG;;AACG,SAAUqN,aAAVA,CAAwBpO,EAAxB,EAA8B;EAClC;EACA,OAAOA,EAAE,KAAK,EAAP,IAAcA,EAAW,CAACI,QAAZ,KAAyB,EAAvC,GACH,GADG,GAEH,OAAOJ,EAAP,KAAc,QAAd,GACAgB,SAAS,CAAChB,EAAD,CAAT,CAAcI,QADd,GAEAJ,EAAE,CAACI,QAJP;AAKD;AAED;;AAEG;;IACUoH,SAAS,GAAI6G,SAAb7G,SAASA,CAAI6G,KAAD;EAAA,OACvBA,KAAK,CAACnI,IAAN,CAAW,GAAX,EAAgB1E,OAAhB,CAAwB,QAAxB,EAAkC,GAAlC;AAAA;AAEF;;AAEG;;IACUoJ,iBAAiB,GAAIxK,SAArBwK,iBAAiBA,CAAIxK,QAAD;EAAA,OAC/BA,QAAQ,CAACoB,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAA6BA,QAA7B,CAAqC,MAArC,EAA6C,GAA7C;AAAA;AAEF;;AAEG;;AACI,IAAMuL,eAAe,GAAI9L,SAAnB8L,eAAeA,CAAI9L,MAAD;EAAA,OAC7B,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACsG,UAAP,CAAkB,GAAlB,CACAtG,SADA,GAEA,MAAMA,MALL;AAAA;AAOP;;AAEG;;AACI,IAAM+L,aAAa,GAAI9L,SAAjB8L,aAAaA,CAAI9L,IAAD;EAAA,OAC3B,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAACqG,UAAL,CAAgB,GAAhB,CAAuBrG,OAAvB,GAA8B,MAAMA,IAD5D;AAAA;AAQP;;;AAGG;;AACI,IAAMoN,IAAI,GAAiB,SAArBA,IAAqBA,CAACC,IAAD,EAAOC,IAAP,EAAoB;EAAA,IAAbA,IAAa;IAAbA,IAAa,GAAN,EAAM;EAAA;EACpD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,IAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;EACA,IAAI,CAACA,OAAO,CAACE,GAAR,CAAY,cAAZ,CAAL,EAAkC;IAChCF,OAAO,CAACG,GAAR,CAAY,cAAZ,EAA4B,iCAA5B;EACD;EAED,OAAO,IAAIC,QAAJ,CAAaxO,IAAI,CAACC,SAAL,CAAe+N,IAAf,CAAb,eACFE,YADE;IAELE;GAFF;AAID;AAZM,IAoBMK,oBAAP;EAAAC;EAAA;EAAA;IAAAC;IAAA;EAAA;EAAA;AAAA,iCAAoC5L,KAApC;AAAA,IAEO6L;EAWXC,sBAAYb,MAA+BE,YAA/B,EAA0D;IAAA;IAAAS;IAV9D,sBAA8B,IAAI1J,GAAJ,EAA9B;IAIA,mBACN,IAAIA,GAAJ,EADM;IAIR,IAAY6J,aAAZ,GAAyB,EAAzB;IAGElK,SAAS,CACPoJ,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACe,KAAK,CAACC,OAAN,CAAchB,IAAd,CAD9B,EAEP,oCAFO,CAAT,CADoE;IAOpE;;IACA,IAAIiB,MAAJ;IACA,KAAKC,YAAL,GAAoB,IAAIC,OAAJ,CAAY,UAACxD,CAAD,EAAIyD,CAAJ;MAAA,OAAWH,MAAM,GAAGG,CAAhC;IAAA,EAApB;IACA,KAAKC,UAAL,GAAkB,IAAIC,eAAJ,EAAlB;IACA,IAAIC,OAAO,GAAG,SAAVA,OAAOA;MAAA,OACTN,MAAM,CAAC,IAAIR,oBAAJ,CAAyB,uBAAzB,CAAD,CADR;IAAA;IAEA,KAAKe,mBAAL,GAA2B;MAAA,OACzBC,MAAKJ,UAAL,CAAgBK,MAAhB,CAAuB5K,mBAAvB,CAA2C,OAA3C,EAAoDyK,OAApD,CADF;IAAA;IAEA,IAAKF,WAAL,CAAgBK,MAAhB,CAAuB7K,gBAAvB,CAAwC,OAAxC,EAAiD0K,OAAjD;IAEA,IAAKvB,KAAL,GAAY9D,MAAM,CAAC1L,OAAP,CAAewP,IAAf,CAAqB1E,OAArB,CACV,UAACqG,GAAD;MAAA;QAAOjQ,GAAD;QAAMmD,KAAN;MAAN,OACEqH,MAAM,CAACxF,MAAP,CAAciL,GAAd,sBACGjQ,GAAD,EAAO+P,MAAKG,YAAL,CAAkBlQ,GAAlB,EAAuBmD,KAAvB,GAFX;KADU,EAKV,EALU,CAAZ;IAQA,IAAI,KAAKgN,IAAT,EAAe;MACb;MACA,KAAKL,mBAAL;IACD;IAED,IAAKvB,KAAL,GAAYC,YAAZ;EACD;EAAA4B;IAAApQ;IAAAmD,OAEO+M,sBACNlQ,GADkB,EAElBmD,KAFkB,EAEe;MAAA;MAEjC,IAAI,EAAEA,KAAK,YAAYsM,OAAnB,CAAJ,EAAiC;QAC/B,OAAOtM,KAAP;MACD;MAED,KAAKiM,YAAL,CAAkBlO,IAAlB,CAAuBlB,GAAvB;MACA,KAAKqQ,cAAL,CAAoBC,GAApB,CAAwBtQ,GAAxB,EAPiC;MAUjC;;MACA,IAAIuQ,OAAO,GAAmBd,OAAO,CAACe,IAAR,CAAa,CAACrN,KAAD,EAAQ,KAAKqM,YAAb,CAAb,EAAyCiB,IAAzC,CAC3BnC,cAAD;QAAA,OAAUoC,OAAKC,QAAL,CAAcJ,OAAd,EAAuBvQ,GAAvB,EAA4B,IAA5B,EAAkCsO,IAAlC,CADkB;MAAA,GAE3BvJ,eAAD;QAAA,OAAW2L,OAAKC,QAAL,CAAcJ,OAAd,EAAuBvQ,GAAvB,EAA4B+E,KAA5B,CAFiB;MAAA,EAA9B,CAXiC;MAiBjC;;MACAwL,OAAO,CAACK,KAAR,CAAc,YAAO,EAArB;MAEApG,MAAM,CAACqG,cAAP,CAAsBN,OAAtB,EAA+B,UAA/B,EAA2C;QAAEO,GAAG,EAAE;UAAA,OAAM;QAAA;OAAxD;MACA,OAAOP,OAAP;IACD;EAAA;IAAAvQ;IAAAmD,OAEOwN,kBACNJ,OADc,EAEdvQ,GAFc,EAGd+E,KAHc,EAIduJ,IAJc,EAIA;MAEd,IACE,KAAKqB,UAAL,CAAgBK,MAAhB,CAAuBe,OAAvB,IACAhM,KAAK,YAAYgK,oBAFnB,EAGE;QACA,KAAKe,mBAAL;QACAtF,MAAM,CAACqG,cAAP,CAAsBN,OAAtB,EAA+B,QAA/B,EAAyC;UAAEO,GAAG,EAAE;YAAA,OAAM/L;UAAAA;SAAtD;QACA,OAAO0K,OAAO,CAACF,MAAR,CAAexK,KAAf,CAAP;MACD;MAED,KAAKsL,cAAL,CAAoBW,MAApB,CAA2BhR,GAA3B;MAEA,IAAI,KAAKmQ,IAAT,EAAe;QACb;QACA,KAAKL,mBAAL;MACD;MAED,IAAI/K,KAAJ,EAAW;QACTyF,MAAM,CAACqG,cAAP,CAAsBN,OAAtB,EAA+B,QAA/B,EAAyC;UAAEO,GAAG,EAAE;YAAA,OAAM/L;UAAAA;SAAtD;QACA,KAAKkM,IAAL,CAAU,KAAV,EAAiBjR,GAAjB;QACA,OAAOyP,OAAO,CAACF,MAAR,CAAexK,KAAf,CAAP;MACD;MAEDyF,MAAM,CAACqG,cAAP,CAAsBN,OAAtB,EAA+B,OAA/B,EAAwC;QAAEO,GAAG,EAAE;UAAA,OAAMxC;QAAAA;OAArD;MACA,KAAK2C,IAAL,CAAU,KAAV,EAAiBjR,GAAjB;MACA,OAAOsO,IAAP;IACD;EAAA;IAAAtO;IAAAmD,OAEO8N,cAAKF,OAAD,EAAmBG,UAAnB,EAAsC;MAChD,IAAKC,YAAL,CAAiBvJ,OAAjB,CAA0BwJ,oBAAD;QAAA,OAAgBA,UAAU,CAACL,OAAD,EAAUG,UAAV,CAAnD;MAAA;IACD;EAAA;IAAAlR;IAAAmD,OAEDkO,mBAAUzP,EAAD,EAAoD;MAAA;MAC3D,KAAKuP,WAAL,CAAiBb,GAAjB,CAAqB1O,EAArB;MACA,OAAO;QAAA,OAAM0P,MAAKH,YAAL,CAAiBH,MAAjB,CAAwBpP,EAAxB,CAAb;MAAA;IACD;EAAA;IAAA5B;IAAAmD,OAEDoO,kBAAM;MAAA;MACJ,IAAK5B,WAAL,CAAgB6B,KAAhB;MACA,KAAKnB,cAAL,CAAoBzI,OAApB,CAA4B,UAAC6J,CAAD,EAAIC,CAAJ;QAAA,OAAUC,OAAKtB,cAAL,CAAoBW,MAApB,CAA2BU,CAA3B,CAAtC;MAAA;MACA,IAAKT,KAAL,CAAU,IAAV;IACD;EAAA;IAAAjR;IAAAmD;MAAA,8EAEgB,iBAAC6M,MAAD;QAAA;QAAA;QAAA;UAAA;YAAA;cACXe,OAAO,GAAG,KAAd;cAAA,IACK,IAAKZ,KAAV;gBAAAyB;gBAAA;cAAA;cACM/B,OAAO,GAAG,SAAVA,OAAOA;gBAAA,OAASgC,OAAKN,MAAL,EAApB;cAAA;cACAvB,MAAM,CAAC7K,gBAAP,CAAwB,OAAxB,EAAiC0K,OAAjC;cAAA+B;cAAA,OACgB,IAAInC,OAAJ,CAAaqC,iBAAD,EAAY;gBACtCD,MAAKR,UAAL,CAAgBN,iBAAD,EAAY;kBACzBf,MAAM,CAAC5K,mBAAP,CAA2B,OAA3B,EAAoCyK,OAApC;kBACA,IAAIkB,OAAO,IAAIc,MAAK1B,KAApB,EAA0B;oBACxB2B,OAAO,CAACf,OAAD,CAAP;kBACD;iBAJH;cAMD,CAPe,CAAhB;YAAA;cAAAA,OAAO;YAAA;cAAA,iCASFA,OAAP;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA/Q;IAAA8Q,KAEO;MACN,OAAO,IAAKT,eAAL,CAAoB0B,IAApB,KAA6B,CAApC;IACD;EAAA;IAAA/R;IAAA8Q,KAEgB;MACf5L,SAAS,CACP,IAAKoJ,KAAL,KAAc,IAAd,IAAsB,IAAK6B,KADpB,EAEP,2DAFO,CAAT;MAKA,OAAO3F,MAAM,CAAC1L,OAAP,CAAe,KAAKwP,IAApB,CAA0B1E,OAA1B,CACL,UAACqG,GAAD;QAAA;UAAOjQ,GAAD;UAAMmD,KAAN;QAAN,OACEqH,MAAM,CAACxF,MAAP,CAAciL,GAAd,sBACGjQ,GAAD,EAAOgS,oBAAoB,CAAC7O,KAAD,GAF/B;OADK,EAKL,EALK,CAAP;IAOD;EAAA;IAAAnD;IAAA8Q,KAEc;MACb,OAAOzB,KAAK,CAACxB,IAAN,CAAW,KAAKwC,cAAhB,CAAP;IACD;EAAA;EAAA;AAAA;AAGH,SAAS4B,gBAATA,CAA0B9O,KAA1B,EAAoC;EAClC,OACEA,KAAK,YAAYsM,OAAjB,IAA6BtM,KAAwB,CAAC+O,QAAzB,KAAsC,IADrE;AAGD;AAED,SAASF,oBAATA,CAA8B7O,KAA9B,EAAwC;EACtC,IAAI,CAAC8O,gBAAgB,CAAC9O,KAAD,CAArB,EAA8B;IAC5B,OAAOA,KAAP;EACD;EAED,IAAIA,KAAK,CAACgP,MAAV,EAAkB;IAChB,MAAMhP,KAAK,CAACgP,MAAZ;EACD;EACD,OAAOhP,KAAK,CAACiP,KAAb;AACD;AAOM,IAAMC,KAAK,GAAkB,SAAvBA,KAAuBA,CAAC/D,IAAD,EAAOC,IAAP,EAAoB;EAAA,IAAbA,IAAa;IAAbA,IAAa,GAAN,EAAM;EAAA;EACtD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,OAAO,IAAIW,YAAJ,CAAiBZ,IAAjB,EAAuBE,YAAvB,CAAP;AACD;AAOD;;;AAGG;;AACI,IAAM8D,QAAQ,GAAqB,SAA7BA,QAA6BA,CAACxP,GAAD,EAAMyL,IAAN,EAAoB;EAAA,IAAdA,IAAc;IAAdA,IAAc,GAAP,GAAO;EAAA;EAC5D,IAAIC,YAAY,GAAGD,IAAnB;EACA,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;IACpCA,YAAY,GAAG;MAAEC,MAAM,EAAED;KAAzB;GADF,MAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;IACrDD,YAAY,CAACC,MAAb,GAAsB,GAAtB;EACD;EAED,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;EACAA,OAAO,CAACG,GAAR,CAAY,UAAZ,EAAwB/L,GAAxB;EAEA,OAAO,IAAIgM,QAAJ,CAAa,IAAb,eACFN,YADE;IAELE;GAFF;AAID;AAED;;;AAGG;AAHH,IAIa6D,0CAOXpD,uBACEV,QACA+D,UADA,EAEAlE,IAFA,EAGAmE,QAHA,EAGgB;EAAAxD;EAAA,IAAhBwD,QAAgB;IAAhBA,QAAgB,GAAL,KAAK;EAAA;EAEhB,IAAKhE,OAAL,GAAcA,MAAd;EACA,KAAK+D,UAAL,GAAkBA,UAAU,IAAI,EAAhC;EACA,IAAKC,SAAL,GAAgBA,QAAhB;EACA,IAAInE,IAAI,YAAYjL,KAApB,EAA2B;IACzB,KAAKiL,IAAL,GAAYA,IAAI,CAAC1K,QAAL,EAAZ;IACA,IAAKmB,MAAL,GAAauJ,IAAb;EACD,CAHD,MAGO;IACL,IAAKA,KAAL,GAAYA,IAAZ;EACD;AACF;AAGH;;;AAGG;AACG,SAAUoE,oBAAVA,CAA+B3N,KAA/B,EAAyC;EAC7C,OACEA,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAAC0J,MAAb,KAAwB,QADxB,IAEA,OAAO1J,KAAK,CAACyN,UAAb,KAA4B,QAF5B,IAGA,OAAOzN,KAAK,CAAC0N,QAAb,KAA0B,SAH1B,IAIA,UAAU1N,KALZ;AAOD;ACn2BD,IAAM4N,uBAAuB,GAAyB,CACpD,MADoD,EAEpD,KAFoD,EAGpD,OAHoD,EAIpD,QAJoD,CAAtD;AAMA,IAAMC,oBAAoB,GAAG,IAAIrN,GAAJ,CAC3BoN,uBAD2B,CAA7B;AAIA,IAAME,sBAAsB,IAC1B,KAD2C,SAExCF,uBAFwC,CAA7C;AAIA,IAAMG,mBAAmB,GAAG,IAAIvN,GAAJ,CAAoBsN,sBAApB,CAA5B;AAEA,IAAME,mBAAmB,GAAG,IAAIxN,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAR,CAA5B;AACA,IAAMyN,iCAAiC,GAAG,IAAIzN,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,CAA1C;AAEO,IAAM0N,eAAe,GAA6B;EACvD9T,KAAK,EAAE,MADgD;EAEvDc,QAAQ,EAAEb,SAF6C;EAGvD8T,UAAU,EAAE9T,SAH2C;EAIvD+T,UAAU,EAAE/T,SAJ2C;EAKvDgU,WAAW,EAAEhU,SAL0C;EAMvDiU,QAAQ,EAAEjU;AAN6C;AASlD,IAAMkU,YAAY,GAA0B;EACjDnU,KAAK,EAAE,MAD0C;EAEjDmP,IAAI,EAAElP,SAF2C;EAGjD8T,UAAU,EAAE9T,SAHqC;EAIjD+T,UAAU,EAAE/T,SAJqC;EAKjDgU,WAAW,EAAEhU,SALoC;EAMjDiU,QAAQ,EAAEjU;AANuC;AAS5C,IAAMmU,YAAY,GAAqB;EAC5CpU,KAAK,EAAE,WADqC;EAE5CqU,OAAO,EAAEpU,SAFmC;EAG5CqU,KAAK,EAAErU,SAHqC;EAI5Ca,QAAQ,EAAEb;AAJkC;AAO9C,IAAMsU,kBAAkB,GAAG,+BAA3B;AAEA,IAAMC,SAAS,GACb,OAAO7R,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACY,QAAd,KAA2B,WAD3B,IAEA,OAAOZ,MAAM,CAACY,QAAP,CAAgBkR,aAAvB,KAAyC,WAH3C;AAIA,IAAMC,QAAQ,GAAG,CAACF,SAAlB;AAEA,IAAMG,yBAAyB,GAAgCrO,SAAzDqO,yBAAyBA,CAAgCrO,KAAD;EAAA,OAAY;IACxEsO,gBAAgB,EAAEC,OAAO,CAACvO,KAAK,CAACsO,gBAAP;EAD+C,CAAZ;AAAA,CAA9D;AAMA;AACA;AACA;;AAEA;;AAEG;;AACG,SAAUE,YAAVA,CAAuB1F,IAAvB,EAAuC;EAC3CrJ,SAAS,CACPqJ,IAAI,CAAC5I,MAAL,CAAYrG,MAAZ,GAAqB,CADd,EAEP,2DAFO,CAAT;EAKA,IAAIsG,kBAAJ;EACA,IAAI2I,IAAI,CAAC3I,kBAAT,EAA6B;IAC3BA,kBAAkB,GAAG2I,IAAI,CAAC3I,kBAA1B;EACD,CAFD,MAEO,IAAI2I,IAAI,CAAC2F,mBAAT,EAA8B;IACnC;IACA,IAAIA,mBAAmB,GAAG3F,IAAI,CAAC2F,mBAA/B;IACAtO,kBAAkB,GAAIH,iCAAD;MAAA,OAAY;QAC/BsO,gBAAgB,EAAEG,mBAAmB,CAACzO,KAAD;MADN,CAAZ;IAAA,CAArB;EAGD,CANM,MAMA;IACLG,kBAAkB,GAAGkO,yBAArB;EACD,CAjB0C;;EAoB3C,IAAIhO,QAAQ,GAAkB,EAA9B,CApB2C;;EAsB3C,IAAIqO,UAAU,GAAGzO,yBAAyB,CACxC6I,IAAI,CAAC5I,MADmC,EAExCC,kBAFwC,EAGxCxG,SAHwC,EAIxC0G,QAJwC,CAA1C;EAMA,IAAIsO,kBAAJ;EACA,IAAI7N,QAAQ,GAAGgI,IAAI,CAAChI,QAAL,IAAiB,GAAhC,CA7B2C;;EA+B3C,IAAI8N,MAAM;IACRC,sBAAsB,EAAE,KADhB;IAERC,kBAAkB,EAAE;EAFZ,GAGLhG,IAAI,CAAC8F,MAHA,CAAV,CA/B2C;;EAqC3C,IAAIG,eAAe,GAAwB,IAA3C,CArC2C;;EAuC3C,IAAIrD,WAAW,GAAG,IAAI5L,GAAJ,EAAlB,CAvC2C;;EAyC3C,IAAIkP,oBAAoB,GAAkC,IAA1D,CAzC2C;;EA2C3C,IAAIC,uBAAuB,GAA2C,IAAtE,CA3C2C;;EA6C3C,IAAIC,iBAAiB,GAAqC,IAA1D,CA7C2C;EA+C3C;EACA;EACA;EACA;EACA;;EACA,IAAIC,qBAAqB,GAAGrG,IAAI,CAACsG,aAAL,IAAsB,IAAlD;EAEA,IAAIC,cAAc,GAAGzO,WAAW,CAAC8N,UAAD,EAAa5F,IAAI,CAAC7N,OAAL,CAAaT,QAA1B,EAAoCsG,QAApC,CAAhC;EACA,IAAIwO,aAAa,GAAqB,IAAtC;EAEA,IAAID,cAAc,IAAI,IAAtB,EAA4B;IAC1B;IACA;IACA,IAAI/P,KAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;MACtC7U,QAAQ,EAAEoO,IAAI,CAAC7N,OAAL,CAAaT,QAAb,CAAsBE;IADM,CAAN,CAAlC;IAGA,4BAAyB8U,sBAAsB,CAACd,UAAD,CAA/C;MAAMvN,OAAF,yBAAEA,OAAF;MAAWnB;IACfqP,cAAc,GAAGlO,OAAjB;IACAmO,aAAa,uBAAMtP,KAAK,CAACO,EAAP,EAAYjB,MAA9B;EACD;EAED,IAAImQ,WAAW;EAAA;EAEb;EACA,CAACJ,cAAc,CAACpL,IAAf,CAAqByL,WAAD;IAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQ2P,IAAnC;EAAA,EAAD;EAAA;EAEC,CAACN,cAAc,CAACpL,IAAf,CAAqByL,WAAD;IAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQ4P,MAAnC;EAAA,EAAD,IAA+C9G,IAAI,CAACsG,aAAL,IAAsB,IAFtE,CAHF;EAOA,IAAIS,MAAJ;EACA,IAAInW,KAAK,GAAgB;IACvBoW,aAAa,EAAEhH,IAAI,CAAC7N,OAAL,CAAanB,MADL;IAEvBU,QAAQ,EAAEsO,IAAI,CAAC7N,OAAL,CAAaT,QAFA;IAGvB2G,OAAO,EAAEkO,cAHc;IAIvBI,WAJuB,EAIvBA,WAJuB;IAKvBM,UAAU,EAAEvC,eALW;IAMvB;IACAwC,qBAAqB,EAAElH,IAAI,CAACsG,aAAL,IAAsB,IAAtB,GAA6B,KAA7B,GAAqC,IAPrC;IAQvBa,kBAAkB,EAAE,KARG;IASvBC,YAAY,EAAE,MATS;IAUvBC,UAAU,EAAGrH,IAAI,CAACsG,aAAL,IAAsBtG,IAAI,CAACsG,aAAL,CAAmBe,UAA1C,IAAyD,EAV9C;IAWvBC,UAAU,EAAGtH,IAAI,CAACsG,aAAL,IAAsBtG,IAAI,CAACsG,aAAL,CAAmBgB,UAA1C,IAAyD,IAX9C;IAYvBC,MAAM,EAAGvH,IAAI,CAACsG,aAAL,IAAsBtG,IAAI,CAACsG,aAAL,CAAmBiB,MAA1C,IAAqDf,aAZtC;IAavBgB,QAAQ,EAAE,IAAIC,GAAJ,EAba;IAcvBC,QAAQ,EAAE,IAAID,GAAJ;EAda,CAAzB,CA5E2C;EA8F3C;;EACA,IAAIE,aAAa,GAAkBC,MAAa,CAAC3W,GAAjD,CA/F2C;EAkG3C;;EACA,IAAI4W,yBAAyB,GAAG,KAAhC,CAnG2C;;EAsG3C,IAAIC,2BAAJ,CAtG2C;EAyG3C;;EACA,IAAIC,2BAA2B,GAAG,KAAlC,CA1G2C;EA6G3C;EACA;EACA;;EACA,IAAIC,sBAAsB,GAAG,KAA7B,CAhH2C;EAmH3C;;EACA,IAAIC,uBAAuB,GAAa,EAAxC,CApH2C;EAuH3C;;EACA,IAAIC,qBAAqB,GAAa,EAAtC,CAxH2C;;EA2H3C,IAAIC,gBAAgB,GAAG,IAAIV,GAAJ,EAAvB,CA3H2C;;EA8H3C,IAAIW,kBAAkB,GAAG,CAAzB,CA9H2C;EAiI3C;EACA;;EACA,IAAIC,uBAAuB,GAAG,CAAC,CAA/B,CAnI2C;;EAsI3C,IAAIC,cAAc,GAAG,IAAIb,GAAJ,EAArB,CAtI2C;;EAyI3C,IAAIc,gBAAgB,GAAG,IAAIvR,GAAJ,EAAvB,CAzI2C;;EA4I3C,IAAIwR,gBAAgB,GAAG,IAAIf,GAAJ,EAAvB,CA5I2C;EA+I3C;EACA;EACA;;EACA,IAAIgB,eAAe,GAAG,IAAIhB,GAAJ,EAAtB,CAlJ2C;EAqJ3C;;EACA,IAAIiB,gBAAgB,GAAG,IAAIjB,GAAJ,EAAvB,CAtJ2C;EAyJ3C;;EACA,IAAIkB,uBAAuB,GAAG,KAA9B,CA1J2C;EA6J3C;EACA;;EACA,SAASC,UAATA,GAAmB;IACjB;IACA;IACA3C,eAAe,GAAGjG,IAAI,CAAC7N,OAAL,CAAaiB,MAAb,CAChB,cAA+C;MAAA,IAApC4T,aAAV,GAA8CvR,KAA5CzE,MAAM;QAAiBU,QAAzB,GAA8C+D,KAArB/D,QAAzB;QAAmCqB,QAAW0C,KAAX1C;;MAClC;MACA;MACA,IAAI4V,uBAAJ,EAA6B;QAC3BA,uBAAuB,GAAG,KAA1B;QACA;MACD;MAED9W,OAAO,CACL6W,gBAAgB,CAAClF,IAAjB,KAA0B,CAA1B,IAA+BzQ,KAAK,IAAI,IADnC,EAEL,oEACE,2EADF,GAEE,uEAFF,GAGE,yEAHF,GAIE,iEAJF,GAKE,yDAPG,CAAP;MAUA,IAAI8V,UAAU,GAAGC,qBAAqB,CAAC;QACrCC,eAAe,EAAEnY,KAAK,CAACc,QADc;QAErCmB,YAAY,EAAEnB,QAFuB;QAGrCsV;MAHqC,CAAD,CAAtC;MAMA,IAAI6B,UAAU,IAAI9V,KAAK,IAAI,IAA3B,EAAiC;QAC/B;QACA4V,uBAAuB,GAAG,IAA1B;QACA3I,IAAI,CAAC7N,OAAL,CAAae,EAAb,CAAgBH,KAAK,GAAG,CAAC,CAAzB,EAH+B;;QAM/BiW,aAAa,CAACH,UAAD,EAAa;UACxBjY,KAAK,EAAE,SADiB;UAExBc,QAFwB,EAExBA,QAFwB;UAGxBuT,OAAO;YACL+D,aAAa,CAACH,UAAD,EAAc;cACzBjY,KAAK,EAAE,YADkB;cAEzBqU,OAAO,EAAEpU,SAFgB;cAGzBqU,KAAK,EAAErU,SAHkB;cAIzBa;aAJW,CAAb,CADK;;YAQLsO,IAAI,CAAC7N,OAAL,CAAae,EAAb,CAAgBH,KAAhB;WAXsB;UAaxBmS,KAAK;YACH+D,aAAa,CAACJ,UAAD,CAAb;YACAK,WAAW,CAAC;cAAExB,QAAQ,EAAE,IAAID,GAAJ,CAAQV,MAAM,CAACnW,KAAP,CAAa8W,QAArB;YAAZ,CAAD,CAAX;UACD;QAhBuB,CAAb,CAAb;QAkBA;MACD;MAED,OAAOyB,eAAe,CAACnC,aAAD,EAAgBtV,QAAhB,CAAtB;KApDc,CAAlB,CAHiB;IA4DjB;IACA;IACA;IACA;;IACA,IAAI,CAACd,KAAK,CAAC+V,WAAX,EAAwB;MACtBwC,eAAe,CAACvB,MAAa,CAAC3W,GAAf,EAAoBL,KAAK,CAACc,QAA1B,CAAf;IACD;IAED,OAAOqV,MAAP;EACD,CApO0C;;EAuO3C,SAASqC,OAATA,GAAgB;IACd,IAAInD,eAAJ,EAAqB;MACnBA,eAAe;IAChB;IACDrD,WAAW,CAACyG,KAAZ;IACAvB,2BAA2B,IAAIA,2BAA2B,CAAC7E,KAA5B,EAA/B;IACArS,KAAK,CAAC4W,QAAN,CAAenO,OAAf,CAAuB,UAACqE,CAAD,EAAIjM,GAAJ;MAAA,OAAY6X,aAAa,CAAC7X,GAAD,CAAhD;IAAA;IACAb,KAAK,CAAC8W,QAAN,CAAerO,OAAf,CAAuB,UAACqE,CAAD,EAAIjM,GAAJ;MAAA,OAAYwX,aAAa,CAACxX,GAAD,CAAhD;IAAA;EACD,CA/O0C;;EAkP3C,SAASqR,SAATA,CAAmBzP,EAAnB,EAAuC;IACrCuP,WAAW,CAACb,GAAZ,CAAgB1O,EAAhB;IACA,OAAO;MAAA,OAAMuP,WAAW,CAACH,MAAZ,CAAmBpP,EAAnB,CAAb;IAAA;EACD,CArP0C;;EAwP3C,SAAS6V,WAATA,CAAqBK,QAArB,EAAmD;IACjD3Y,KAAK,GACAA,kBADA,EAEA2Y,QAFA,CAAL;IAIA3G,WAAW,CAACvJ,OAAZ,CAAqBwJ,oBAAD;MAAA,OAAgBA,UAAU,CAACjS,KAAD,CAA9C;IAAA;EACD,CA9P0C;EAiQ3C;EACA;EACA;EACA;;EACA,SAAS4Y,kBAATA,CACE9X,QADF,EAEE6X,QAFF,EAE4E;IAAA;;IAE1E;IACA;IACA;IACA;IACA;IACA,IAAIE,cAAc,GAChB7Y,KAAK,CAAC0W,UAAN,IAAoB,IAApB,IACA1W,KAAK,CAACqW,UAAN,CAAiBtC,UAAjB,IAA+B,IAD/B,IAEA+E,gBAAgB,CAAC9Y,KAAK,CAACqW,UAAN,CAAiBtC,UAAlB,CAFhB,IAGA/T,KAAK,CAACqW,UAAN,CAAiBrW,KAAjB,KAA2B,SAH3B,IAIA,4BAAQ,CAACA,KAAT,KAAgB+Y,2CAAhB,MAAgC,IALlC;IAOA,IAAIrC,UAAJ;IACA,IAAIiC,QAAQ,CAACjC,UAAb,EAAyB;MACvB,IAAIrL,MAAM,CAAC2N,IAAP,CAAYL,QAAQ,CAACjC,UAArB,CAAiCvW,OAAjC,GAA0C,CAA9C,EAAiD;QAC/CuW,UAAU,GAAGiC,QAAQ,CAACjC,UAAtB;MACD,CAFD,MAEO;QACL;QACAA,UAAU,GAAG,IAAb;MACD;KANH,MAOO,IAAImC,cAAJ,EAAoB;MACzB;MACAnC,UAAU,GAAG1W,KAAK,CAAC0W,UAAnB;IACD,CAHM,MAGA;MACL;MACAA,UAAU,GAAG,IAAb;IACD,CA5ByE;;IA+B1E,IAAID,UAAU,GAAGkC,QAAQ,CAAClC,UAAT,GACbwC,eAAe,CACbjZ,KAAK,CAACyW,UADO,EAEbkC,QAAQ,CAAClC,UAFI,EAGbkC,QAAQ,CAAClR,OAAT,IAAoB,EAHP,EAIbkR,QAAQ,CAAChC,MAJI,CADF,GAOb3W,KAAK,CAACyW,UAPV,CA/B0E;IAyC1E;IAAA,4CACkBqB,gBAAlB;MAAAoB;IAAA;MAAA,uDAAoC;QAAA;UAA1BrY,GAAD;QACPwX,aAAa,CAACxX,GAAD,CAAb;MACD,CA5CyE;MA+C1E;IAAA;MAAAsY;IAAA;MAAAA;IAAA;IACA,IAAI5C,kBAAkB,GACpBU,yBAAyB,KAAK,IAA9B,IACCjX,KAAK,CAACqW,UAAN,CAAiBtC,UAAjB,IAA+B,IAA/B,IACC+E,gBAAgB,CAAC9Y,KAAK,CAACqW,UAAN,CAAiBtC,UAAlB,CADjB,IAEC,6BAAQ,CAAC/T,KAAT,KAAgB+Y,4CAAhB,MAAgC,IAJpC;IAMA,IAAI9D,kBAAJ,EAAwB;MACtBD,UAAU,GAAGC,kBAAb;MACAA,kBAAkB,GAAGhV,SAArB;IACD;IAEDqY,WAAW,cACNK,QADM;MAETjC,UAFS,EAETA,UAFS;MAGTD,UAHS,EAGTA,UAHS;MAITL,aAAa,EAAEW,aAJN;MAKTjW,QALS,EAKTA,QALS;MAMTiV,WAAW,EAAE,IANJ;MAOTM,UAAU,EAAEvC,eAPH;MAQT0C,YAAY,EAAE,MARL;MASTF,qBAAqB,EAAE8C,sBAAsB,CAC3CtY,QAD2C,EAE3C6X,QAAQ,CAAClR,OAAT,IAAoBzH,KAAK,CAACyH,OAFiB,CATpC;MAaT8O,kBAbS,EAaTA,kBAbS;MAcTO,QAAQ,EAAE,IAAID,GAAJ,CAAQ7W,KAAK,CAAC8W,QAAd;KAdZ;IAiBA,IAAIK,2BAAJ,EAAiC,CAAjC,KAEO,IAAIJ,aAAa,KAAKC,MAAa,CAAC3W,GAApC,EAAyC,CAAzC,KAEA,IAAI0W,aAAa,KAAKC,MAAa,CAAChV,IAApC,EAA0C;MAC/CoN,IAAI,CAAC7N,OAAL,CAAaQ,IAAb,CAAkBjB,QAAlB,EAA4BA,QAAQ,CAACd,KAArC;IACD,CAFM,MAEA,IAAI+W,aAAa,KAAKC,MAAa,CAAC3U,OAApC,EAA6C;MAClD+M,IAAI,CAAC7N,OAAL,CAAaa,OAAb,CAAqBtB,QAArB,EAA+BA,QAAQ,CAACd,KAAxC;IACD,CApFyE;;IAuF1E+W,aAAa,GAAGC,MAAa,CAAC3W,GAA9B;IACA4W,yBAAyB,GAAG,KAA5B;IACAE,2BAA2B,GAAG,KAA9B;IACAC,sBAAsB,GAAG,KAAzB;IACAC,uBAAuB,GAAG,EAA1B;IACAC,qBAAqB,GAAG,EAAxB;EACD,CApW0C;EAuW3C;EAAA,SACe+B,QAAfA;IAAA;EAAA,EAxW2C;EA8c3C;EACA;EAAA;IAAAC,uEAvGA,kBACE1Y,EADF,EAEE2Y,IAFF;MAAA;MAAA;QAAA;UAAA;YAAA,MAIM,OAAO3Y,EAAP,KAAc,QAAlB;cAAA4Y;cAAA;YAAA;YACEpK,IAAI,CAAC7N,OAAL,CAAae,EAAb,CAAgB1B,EAAhB;YAAA;UAAA;YAIE6Y,cAAc,GAAGC,WAAW,CAC9B1Z,KAAK,CAACc,QADwB,EAE9Bd,KAAK,CAACyH,OAFwB,EAG9BL,QAH8B,EAI9B8N,MAAM,CAACE,kBAJuB,EAK9BxU,EAL8B,EAM9B2Y,IAN8B,oBAM9BA,IAAI,CAAEI,WANwB,EAO9BJ,IAP8B,oBAO9BA,IAAI,CAAEK,QAPwB,CAAhC;YAAAC,yBASkCC,wBAAwB,CACxD5E,MAAM,CAACC,sBADiD,EAExD,KAFwD,EAGxDsE,cAHwD,EAIxDF,IAJwD,CAA1D,EAAM5X,IAAF,0BAAEA,IAAF,EAAQoY,UAAR,0BAAQA,UAAR,EAAoBnU;YAOpBuS,eAAe,GAAGnY,KAAK,CAACc,QAA5B;YACImB,YAAY,GAAGlB,cAAc,CAACf,KAAK,CAACc,QAAP,EAAiBa,IAAjB,EAAuB4X,IAAI,IAAIA,IAAI,CAACvZ,KAApC,CAAjC,EAxB4B;YA2B5B;YACA;YACA;YACA;YACAiC,YAAY,gBACPA,YADO,EAEPmN,IAAI,CAAC7N,OAAL,CAAaG,cAAb,CAA4BO,YAA5B,CAFO,CAAZ;YAKI+X,WAAW,GAAGT,IAAI,IAAIA,IAAI,CAACnX,OAAL,IAAgB,IAAxB,GAA+BmX,IAAI,CAACnX,OAApC,GAA8CnC,SAAhE;YAEImW,aAAa,GAAGY,MAAa,CAAChV,IAAlC;YAEA,IAAIgY,WAAW,KAAK,IAApB,EAA0B;cACxB5D,aAAa,GAAGY,MAAa,CAAC3U,OAA9B;YACD,CAFD,MAEO,IAAI2X,WAAW,KAAK,KAApB,EAA2B,CAA3B,KAEA,IACLD,UAAU,IAAI,IAAd,IACAjB,gBAAgB,CAACiB,UAAU,CAAChG,UAAZ,CADhB,IAEAgG,UAAU,CAAC/F,UAAX,KAA0BhU,KAAK,CAACc,QAAN,CAAeE,QAAf,GAA0BhB,KAAK,CAACc,QAAN,CAAee,MAH9D,EAIL;cACA;cACA;cACA;cACA;cACAuU,aAAa,GAAGY,MAAa,CAAC3U,OAA9B;YACD;YAEGkU,kBAAkB,GACpBgD,IAAI,IAAI,oBAAwBA,QAAhC,GACIA,IAAI,CAAChD,kBAAL,KAA4B,IADhC,GAEItW,SAHN;YAKIgY,UAAU,GAAGC,qBAAqB,CAAC;cACrCC,eADqC,EACrCA,eADqC;cAErClW,YAFqC,EAErCA,YAFqC;cAGrCmU;YAHqC,CAAD,CAAtC;YAAA,KAKI6B,UAAJ;cAAAuB;cAAA;YAAA;YACE;YACApB,aAAa,CAACH,UAAD,EAAa;cACxBjY,KAAK,EAAE,SADiB;cAExBc,QAAQ,EAAEmB,YAFc;cAGxBoS,OAAO;gBACL+D,aAAa,CAACH,UAAD,EAAc;kBACzBjY,KAAK,EAAE,YADkB;kBAEzBqU,OAAO,EAAEpU,SAFgB;kBAGzBqU,KAAK,EAAErU,SAHkB;kBAIzBa,QAAQ,EAAEmB;iBAJC,CAAb,CADK;;gBAQLoX,QAAQ,CAACzY,EAAD,EAAK2Y,IAAL,CAAR;eAXsB;cAaxBjF,KAAK;gBACH+D,aAAa,CAACJ,UAAD,CAAb;gBACAK,WAAW,CAAC;kBAAExB,QAAQ,EAAE,IAAID,GAAJ,CAAQ7W,KAAK,CAAC8W,QAAd;gBAAZ,CAAD,CAAX;cACD;YAhBuB,CAAb,CAAb;YAAA;UAAA;YAAA0C;YAAA,OAqBWjB,eAAe,CAACnC,aAAD,EAAgBnU,YAAhB,EAA8B;cACxD8X,UADwD,EACxDA,UADwD;cAExD;cACA;cACAE,YAAY,EAAErU,KAJ0C;cAKxD2Q,kBALwD,EAKxDA,kBALwD;cAMxDnU,OAAO,EAAEmX,IAAI,IAAIA,IAAI,CAACnX;YANkC,CAA9B,CAA5B;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAncyC;IAAA;EAAA;EAgd3C,SAAS8X,UAATA,GAAmB;IACjBC,oBAAoB;IACpB7B,WAAW,CAAC;MAAE9B,YAAY,EAAE;KAAjB,CAAX,CAFiB;IAKjB;;IACA,IAAIxW,KAAK,CAACqW,UAAN,CAAiBrW,KAAjB,KAA2B,YAA/B,EAA6C;MAC3C;IACD,CARgB;IAWjB;IACA;;IACA,IAAIA,KAAK,CAACqW,UAAN,CAAiBrW,KAAjB,KAA2B,MAA/B,EAAuC;MACrCuY,eAAe,CAACvY,KAAK,CAACoW,aAAP,EAAsBpW,KAAK,CAACc,QAA5B,EAAsC;QACnDsZ,8BAA8B,EAAE;MADmB,CAAtC,CAAf;MAGA;IACD,CAlBgB;IAqBjB;IACA;;IACA7B,eAAe,CACbxB,aAAa,IAAI/W,KAAK,CAACoW,aADV,EAEbpW,KAAK,CAACqW,UAAN,CAAiBvV,QAFJ,EAGb;MAAEuZ,kBAAkB,EAAEra,KAAK,CAACqW;IAA5B,CAHa,CAAf;EAKD,CA5e0C;EA+e3C;EACA;EAAA,SACekC,eAAfA;IAAA;EAAA,EAjf2C;EA8nB3C;EAAA;IAAA+B,8EA7IA,kBACElE,aADF,EAEEtV,QAFF,EAGEyY,IAHF;MAAA;MAAA;QAAA;UAAA;YAaE;YACA;YACA;YACArC,2BAA2B,IAAIA,2BAA2B,CAAC7E,KAA5B,EAA/B;YACA6E,2BAA2B,GAAG,IAA9B;YACAH,aAAa,GAAGX,aAAhB;YACAe,2BAA2B,GACzB,CAACoC,IAAI,IAAIA,IAAI,CAACa,8BAAd,MAAkD,IADpD,CARC;YAYD;;YACAG,kBAAkB,CAACva,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACyH,OAAvB,CAAlB;YACAwP,yBAAyB,GAAG,CAACsC,IAAI,IAAIA,IAAI,CAAChD,kBAAd,MAAsC,IAAlE;YAEIiE,WAAW,GAAGvF,kBAAkB,IAAID,UAAxC;YACIyF,iBAAiB,GAAGlB,IAAI,IAAIA,IAAI,CAACc,kBAArC;YACI5S,OAAO,GAAGP,WAAW,CAACsT,WAAD,EAAc1Z,QAAd,EAAwBsG,QAAxB,CAAzB,EAlBC;YAAA,IAqBIK,OAAL;cAAAiT;cAAA;YAAA;YACM9U,MAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;cAAE7U,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAAlC;YAAA2Z,yBAEE7E,sBAAsB,CAAC0E,WAAD,CADxB,EAAeI,eAAX,0BAAEnT,OAAO,EAAmBnB,uCAFpB;YAKZuU,qBAAqB;YACrBjC,kBAAkB,CAAC9X,QAAD,EAAW;cAC3B2G,OAAO,EAAEmT,eADkB;cAE3BnE,UAAU,EAAE,EAFe;cAG3BE,MAAM,sBACHrQ,MAAK,CAACO,EAAP,EAAYjB;YAJa,CAAX,CAAlB;YAAA;UAAA;YAAA,MAcAkV,gBAAgB,CAAC9a,KAAK,CAACc,QAAP,EAAiBA,QAAjB,CAAhB,IACA,EAAEyY,IAAI,IAAIA,IAAI,CAACQ,UAAb,IAA2BjB,gBAAgB,CAACS,IAAI,CAACQ,UAAL,CAAgBhG,UAAjB,CAA7C,CAFF;cAAA2G;cAAA;YAAA;YAIE9B,kBAAkB,CAAC9X,QAAD,EAAW;cAAE2G;YAAF,CAAX,CAAlB;YAAA;UAAA;YA5CD;;YAiDDyP,2BAA2B,GAAG,IAAIzG,eAAJ,EAA9B;YACIsK,OAAO,GAAGC,uBAAuB,CACnC5L,IAAI,CAAC7N,OAD8B,EAEnCT,QAFmC,EAGnCoW,2BAA2B,CAACrG,MAHO,EAInC0I,IAAI,IAAIA,IAAI,CAACQ,UAJsB,CAArC;YAAA,MASIR,IAAI,IAAIA,IAAI,CAACU,YAAjB;cAAAS;cAAA;YAAA;YACE;YACA;YACA;YACA;YACAT,YAAY,uBACTgB,mBAAmB,CAACxT,OAAD,CAAnB,CAA6BnB,KAA7B,CAAmCO,EAApC,EAAyC0S,IAAI,CAACU,aADhD;YAAAS;YAAA;UAAA;YAAA,MAIAnB,IAAI,IACJA,IAAI,CAACQ,UADL,IAEAjB,gBAAgB,CAACS,IAAI,CAACQ,UAAL,CAAgBhG,UAAjB,CAHX;cAAA2G;cAAA;YAAA;YAAAA;YAAA,OAMoBQ,YAAY,CACnCH,OADmC,EAEnCja,QAFmC,EAGnCyY,IAAI,CAACQ,UAH8B,EAInCtS,OAJmC,EAKnC;cAAErF,OAAO,EAAEmX,IAAI,CAACnX;YAAhB,CALmC,CAArC;UAAA;YAAI+Y,YAAY;YAAA,KAQZA,YAAY,CAACC,cAAjB;cAAAV;cAAA;YAAA;YAAA;UAAA;YAIAW,iBAAiB,GAAGF,YAAY,CAACE,iBAAjC;YACApB,YAAY,GAAGkB,YAAY,CAACG,kBAA5B;YAEIjF,UAAU;cACZrW,KAAK,EAAE,SADK;cAEZc;aACGyY,MAAI,CAACQ,UAHI,CAAd;YAKAU,iBAAiB,GAAGpE,UAApB,CAtBA;;YAyBA0E,OAAO,GAAG,IAAIQ,OAAJ,CAAYR,OAAO,CAACpX,GAApB,EAAyB;cAAEkN,MAAM,EAAEkK,OAAO,CAAClK;YAAlB,CAAzB,CAAV;UAAA;YAAA6J;YAAA,OAIiDc,aAAa,CAC9DT,OAD8D,EAE9Dja,QAF8D,EAG9D2G,OAH8D,EAI9DgT,iBAJ8D,EAK9DlB,IAAI,IAAIA,IAAI,CAACQ,UALiD,EAM9DR,IAAI,IAAIA,IAAI,CAACkC,iBANiD,EAO9DlC,IAAI,IAAIA,IAAI,CAACnX,OAPiD,EAQ9DiZ,iBAR8D,EAS9DpB,YAT8D,CAAhE;UAAA;YAAAyB;YAAMN,cAAF,wBAAEA,cAAF;YAAkB3E,UAAlB,wBAAkBA,UAAlB;YAA8BE;YAAAA,KAY9ByE,cAAJ;cAAAV;cAAA;YAAA;YAAA;UAAA;YAhHC;YAqHD;YACA;;YACAxD,2BAA2B,GAAG,IAA9B;YAEA0B,kBAAkB,CAAC9X,QAAD;cAChB2G;YADgB,GAEZ4T,iBAAiB,GAAG;cAAE3E,UAAU,EAAE2E;YAAd,CAAH,GAAuC,EAF5C;cAGhB5E,UAHgB,EAGhBA,UAHgB;cAIhBE;aAJF;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CArnByC;IAAA;EAAA;EAAA,SA+nB5BuE,YAAfA;IAAA;EAAA,EA/nB2C;EA0tB3C;EAAA;IAAAS,2EA3FA,kBACEZ,OADF,EAEEja,QAFF,EAGEiZ,UAHF,EAIEtS,OAJF,EAKE8R,IALF;MAAA;MAAA;QAAA;UAAA;YAOEY,oBAAoB,GAFQ;YAKxB9D,UAAU;cACZrW,KAAK,EAAE,YADK;cAEZc;YAFY,GAGTiZ,UAHS,CAAd;YAKAzB,WAAW,CAAC;cAAEjC;aAAH,CAAX,CAV4B;YAcxBuF,WAAW,GAAGC,cAAc,CAACpU,OAAD,EAAU3G,QAAV,CAAhC;YAAA,MAEI,CAAC8a,WAAW,CAACtV,KAAZ,CAAkBlG,MAAnB,IAA6B,CAACwb,WAAW,CAACtV,KAAZ,CAAkB2P,IAApD;cAAA6F;cAAA;YAAA;YACEtS,MAAM,GAAG;cACPuS,IAAI,EAAE7V,UAAU,CAACN,KADV;cAEPA,KAAK,EAAEiQ,sBAAsB,CAAC,GAAD,EAAM;gBACjCmG,MAAM,EAAEjB,OAAO,CAACiB,MADiB;gBAEjChb,QAAQ,EAAEF,QAAQ,CAACE,QAFc;gBAGjCib,OAAO,EAAEL,WAAW,CAACtV,KAAZ,CAAkBO;eAHA;aAF/B;YAAAiV;YAAA;UAAA;YAAAA;YAAA,OASeI,kBAAkB,CAC/B,QAD+B,EAE/BnB,OAF+B,EAG/Ba,WAH+B,EAI/BnU,OAJ+B,EAK/Bd,QAL+B,EAM/BF,kBAN+B,EAO/BW,QAP+B,CAAjC;UAAA;YAAAoC,MAAM;YAAA,KAUFuR,OAAO,CAAClK,MAAR,CAAee,OAAnB;cAAAkK;cAAA;YAAA;YAAA,kCACS;cAAEV,cAAc,EAAE;aAAzB;UAAA;YAAA,KAIAe,gBAAgB,CAAC3S,MAAD,CAApB;cAAAsS;cAAA;YAAA;YAEE,IAAIvC,IAAI,IAAIA,IAAI,CAACnX,OAAL,IAAgB,IAA5B,EAAkC;cAChCA,OAAO,GAAGmX,IAAI,CAACnX,OAAf;YACD,CAFD,MAEO;cACL;cACA;cACA;cACAA,OAAO,GACLoH,MAAM,CAAC1I,QAAP,KAAoBd,KAAK,CAACc,QAAN,CAAeE,QAAf,GAA0BhB,KAAK,CAACc,QAAN,CAAee,MAD/D;YAED;YAAAia;YAAA,OACKM,uBAAuB,CAACpc,KAAD,EAAQwJ,MAAR,EAAgB;cAAEuQ,UAAF,EAAEA,UAAF;cAAc3X;YAAd,CAAhB,CAA7B;UAAA;YAAA,kCACO;cAAEgZ,cAAc,EAAE;aAAzB;UAAA;YAAA,KAGEiB,aAAa,CAAC7S,MAAD,CAAjB;cAAAsS;cAAA;YAAA;YACE;YACA;YACIQ,aAAa,GAAGrB,mBAAmB,CAACxT,OAAD,EAAUmU,WAAW,CAACtV,KAAZ,CAAkBO,EAA5B,CAAvC,EAHyB;YAMzB;YACA;YACA;YACA,IAAI,CAAC0S,IAAI,IAAIA,IAAI,CAACnX,OAAd,MAA2B,IAA/B,EAAqC;cACnC2U,aAAa,GAAGC,MAAa,CAAChV,IAA9B;YACD;YAAA,kCAEM;cACL;cACAqZ,iBAAiB,EAAE,EAFd;cAGLC,kBAAkB,sBAAKgB,aAAa,CAAChW,KAAd,CAAoBO,EAArB,EAA0B2C,MAAM,CAAC5D;aAHzD;UAAA;YAAA,KAOE2W,gBAAgB,CAAC/S,MAAD,CAApB;cAAAsS;cAAA;YAAA;YAAA,MACQjG,sBAAsB,CAAC,GAAD,EAAM;cAAEkG,IAAI,EAAE;YAAR,CAAN,CAA5B;UAAA;YAAA,kCAGK;cACLV,iBAAiB,sBAAKO,WAAW,CAACtV,KAAZ,CAAkBO,EAAnB,EAAwB2C,MAAM,CAAC2F;aADtD;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAptByC;IAAA;EAAA;EAAA,SA2tB5BqM,aAAfA;IAAA;EAAA;EAAA;IAAAgB,8FACEzB,OADF,EAEEja,QAFF,EAGE2G,OAHF,EAIE4S,kBAJF,EAKEN,UALF,EAME0B,iBANF,EAOErZ,OAPF,EAQEiZ,iBARF,EASEpB,YATF;MAAA;MAAA;QAAA;UAAA;YAWE;YACIQ,iBAAiB,GAAGJ,kBAAxB;YACA,IAAI,CAACI,iBAAL,EAAwB;cAClBpE,UAAU;gBACZrW,KAAK,EAAE,SADK;gBAEZc,QAFY,EAEZA,QAFY;gBAGZiT,UAAU,EAAE9T,SAHA;gBAIZ+T,UAAU,EAAE/T,SAJA;gBAKZgU,WAAW,EAAEhU,SALD;gBAMZiU,QAAQ,EAAEjU;cANE,GAOT8Z,UAPS,CAAd;cASAU,iBAAiB,GAAGpE,UAApB;YACD,CAfuB;YAkBxB;YACIoG,gBAAgB,GAClB1C,UAAU,IAAI0B,iBAAd,GACI1B,UAAU,IAAI0B,iBADlB,GAEIhB,iBAAiB,CAAC1G,UAAlB,IACA0G,iBAAiB,CAACzG,UADlB,IAEAyG,iBAAiB,CAACvG,QAFlB,IAGAuG,iBAAiB,CAACxG,WAHlB,GAIA;cACEF,UAAU,EAAE0G,iBAAiB,CAAC1G,UADhC;cAEEC,UAAU,EAAEyG,iBAAiB,CAACzG,UAFhC;cAGEE,QAAQ,EAAEuG,iBAAiB,CAACvG,QAH9B;cAIED,WAAW,EAAEwG,iBAAiB,CAACxG;YAJjC,CAJA,GAUAhU,SAbN;YAeIua,WAAW,GAAGvF,kBAAkB,IAAID,UAAxC;YAAA0H,oBAC4CC,gBAAgB,CAC1DvN,IAAI,CAAC7N,OADqD,EAE1DvB,KAF0D,EAG1DyH,OAH0D,EAI1DgV,gBAJ0D,EAK1D3b,QAL0D,EAM1DsW,sBAN0D,EAO1DC,uBAP0D,EAQ1DC,qBAR0D,EAS1DM,gBAT0D,EAU1D4C,WAV0D,EAW1DpT,QAX0D,EAY1DiU,iBAZ0D,EAa1DpB,YAb0D,CAA5D,6DAAK2C,aAAD,0BAAgBC,oBAAhB,0BAnCoB;YAoDxB;YACA;YACAhC,qBAAqB,CAClBoB,iBAAD;cAAA,OACE,EAAExU,OAAO,IAAIA,OAAO,CAAC8C,IAAR,CAAcyL,WAAD;gBAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAeoV,OAAnC;cAAA,EAAb,KACCW,aAAa,IAAIA,aAAa,CAACrS,IAAd,CAAoByL,WAAD;gBAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAeoV,OAAzC;cAAA,EAHD;YAAA,EAArB,CAtDwB;YAAA,MA6DpBW,aAAa,CAACzc,MAAd,KAAyB,CAAzB,IAA8B0c,oBAAoB,CAAC1c,MAArB,KAAgC,CAAlE;cAAA2c;cAAA;YAAA;YACMC,gBAAe,GAAGC,sBAAsB,EAA5C;YACApE,kBAAkB,CAAC9X,QAAD;cAChB2G,OADgB,EAChBA,OADgB;cAEhBgP,UAAU,EAAE,EAFI;cAGhB;cACAE,MAAM,EAAEsD,YAAY,IAAI;YAJR,GAKZoB,iBAAiB,GAAG;cAAE3E,UAAU,EAAE2E;YAAd,CAAH,GAAuC,EAL5C,EAMZ0B,gBAAe,GAAG;cAAEnG,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;aAAf,GAA2C,EAN9C,CAAlB;YAAA,kCAQO;cAAEwE,cAAc,EAAE;aAAzB;UAAA;YAvEsB;YA2ExB;YACA;YACA;;YACA,IAAI,CAACjE,2BAAL,EAAkC;cAChC0F,oBAAoB,CAACpU,OAArB,CAA8BwU,YAAD,EAAO;gBAClC,IAAIC,OAAO,GAAGld,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmBsL,EAAE,CAACpc,GAAtB,CAAd;gBACA,IAAIsc,mBAAmB,GAA6B;kBAClDnd,KAAK,EAAE,SAD2C;kBAElDmP,IAAI,EAAE+N,OAAO,IAAIA,OAAO,CAAC/N,IAFyB;kBAGlD4E,UAAU,EAAE9T,SAHsC;kBAIlD+T,UAAU,EAAE/T,SAJsC;kBAKlDgU,WAAW,EAAEhU,SALqC;kBAMlDiU,QAAQ,EAAEjU,SANwC;kBAOlD,2BAA6B;iBAP/B;gBASAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmBuN,EAAE,CAACpc,GAAtB,EAA2Bsc,mBAA3B;eAXF;cAaIzG,UAAU,GAAG2E,iBAAiB,IAAIrb,KAAK,CAAC0W,UAA5C;cACA4B,WAAW;gBACTjC,UAAU,EAAEoE;eACR/D,YAAU,GACVrL,MAAM,CAAC2N,IAAP,CAAYtC,UAAZ,CAAwBvW,OAAxB,KAAmC,CAAnC,GACE;gBAAEuW,UAAU,EAAE;cAAd,CADF,GAEE;gBAAEA;eAHM,GAIV,EANK,EAOLmG,oBAAoB,CAAC1c,MAArB,GAA8B,CAA9B,GACA;gBAAEyW,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;eADZ,GAEA,EATK,CAAX;YAWD;YAEDa,uBAAuB,GAAG,EAAED,kBAA5B;YACAqF,oBAAoB,CAACpU,OAArB,CAA8BwU,YAAD,EAAO;cAClC,IAAIA,EAAE,CAACzM,UAAP,EAAmB;gBACjB;gBACA;gBACA;gBACA+G,gBAAgB,CAAC7H,GAAjB,CAAqBuN,EAAE,CAACpc,GAAxB,EAA6Boc,EAAE,CAACzM,UAAhC;cACD;YACF,CAPD,EA3GwB;YAqHpB4M,8BAA8B,GAAG,SAAjCA,8BAA8BA;cAAA,OAChCP,oBAAoB,CAACpU,OAArB,CAA8B4U,WAAD;gBAAA,OAAOC,YAAY,CAACD,CAAC,CAACxc,GAAH,CAAhD;cAAA,EADF;YAAA;YAEA,IAAIqW,2BAAJ,EAAiC;cAC/BA,2BAA2B,CAACrG,MAA5B,CAAmC7K,gBAAnC,CACE,OADF,EAEEoX,8BAFF;YAID;YAAAN;YAAA,OAGOS,8BAA8B,CAClCvd,KAAK,CAACyH,OAD4B,EAElCA,OAFkC,EAGlCmV,aAHkC,EAIlCC,oBAJkC,EAKlC9B,OALkC,CADtC;UAAA;YAAAyC;YAAMC,OAAF,yBAAEA,OAAF;YAAWC,aAAX,yBAAWA,aAAX;YAA0BC;YAAAA,KAS1B5C,OAAO,CAAClK,MAAR,CAAee,OAAnB;cAAAkL;cAAA;YAAA;YAAA,kCACS;cAAE1B,cAAc,EAAE;aAAzB;UAAA;YAxIsB;YA4IxB;YACA;;YACA,IAAIlE,2BAAJ,EAAiC;cAC/BA,2BAA2B,CAACrG,MAA5B,CAAmC5K,mBAAnC,CACE,OADF,EAEEmX,8BAFF;YAID;YACDP,oBAAoB,CAACpU,OAArB,CAA8BwU,YAAD;cAAA,OAAQ1F,gBAAgB,CAAC1F,MAAjB,CAAwBoL,EAAE,CAACpc,GAA3B,CAArC;YAAA,GApJwB;YAuJpBsS,QAAQ,GAAGyK,YAAY,CAACH,OAAD,CAA3B;YAAA,KACItK,QAAJ;cAAA2J;cAAA;YAAA;YAAAA;YAAA,OACQV,uBAAuB,CAACpc,KAAD,EAAQmT,QAAR,EAAkB;cAAE/Q;YAAF,CAAlB,CAA7B;UAAA;YAAA,kCACO;cAAEgZ,cAAc,EAAE;aAAzB;UAAA;YA1JsB;YAAAyC,qBA8JKC,iBAAiB,CAC5C9d,KAD4C,EAE5CyH,OAF4C,EAG5CmV,aAH4C,EAI5Cc,aAJ4C,EAK5CzD,YAL4C,EAM5C4C,oBAN4C,EAO5Cc,cAP4C,EAQ5C9F,eAR4C,CAA9C,EAAMpB,UAAF,sBAAEA,UAAF,EAAcE,oCA9JM;YA0KxBkB,eAAe,CAACpP,OAAhB,CAAwB,UAACsV,YAAD,EAAe9B,OAAf,EAA0B;cAChD8B,YAAY,CAAC7L,SAAb,CAAwBN,iBAAD,EAAY;gBACjC;gBACA;gBACA;gBACA,IAAIA,OAAO,IAAImM,YAAY,CAAC/M,IAA5B,EAAkC;kBAChC6G,eAAe,CAAChG,MAAhB,CAAuBoK,OAAvB;gBACD;eANH;aADF;YAWIc,eAAe,GAAGC,sBAAsB,EAA5C;YACIgB,kBAAkB,GAAGC,oBAAoB,CAACxG,uBAAD,CAA7C;YACIyG,oBAAoB,GACtBnB,eAAe,IAAIiB,kBAAnB,IAAyCnB,oBAAoB,CAAC1c,MAArB,GAA8B,CADzE;YAAA,kCAGAge;cACE1H,UADF,EACEA,UADF;cAEEE;YAFF,GAGMuH,oBAAoB,GAAG;cAAEtH,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;YAAZ,CAAH,GAA2C,EAHrE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAKD;IAAA;EAAA;EAED,SAASwH,UAATA,CAAiCvd,GAAjC,EAA4C;IAC1C,OAAOb,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmB9Q,GAAnB,KAA2BsT,YAAlC;EACD,CAv6B0C;;EA06B3C,SAASkK,KAATA,CACExd,GADF,EAEEob,OAFF,EAGExY,IAHF,EAIE8V,IAJF,EAI2B;IAEzB,IAAI7E,QAAJ,EAAc;MACZ,MAAM,IAAIxQ,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN;IAKD;IAED,IAAIqT,gBAAgB,CAAC9H,GAAjB,CAAqB5O,GAArB,CAAJ,EAA+Byc,YAAY,CAACzc,GAAD,CAAZ;IAE/B,IAAI2Z,WAAW,GAAGvF,kBAAkB,IAAID,UAAxC;IACA,IAAIyE,cAAc,GAAGC,WAAW,CAC9B1Z,KAAK,CAACc,QADwB,EAE9Bd,KAAK,CAACyH,OAFwB,EAG9BL,QAH8B,EAI9B8N,MAAM,CAACE,kBAJuB,EAK9B3R,IAL8B,EAM9BwY,OAN8B,EAO9B1C,IAP8B,IAO9BA,oBAAI,CAAEK,QAPwB,CAAhC;IASA,IAAInS,OAAO,GAAGP,WAAW,CAACsT,WAAD,EAAcf,cAAd,EAA8BrS,QAA9B,CAAzB;IAEA,IAAI,CAACK,OAAL,EAAc;MACZ6W,eAAe,CACbzd,GADa,EAEbob,OAFa,EAGbpG,sBAAsB,CAAC,GAAD,EAAM;QAAE7U,QAAQ,EAAEyY;MAAZ,CAAN,CAHT,CAAf;MAKA;IACD;IAED,4BAA2BK,wBAAwB,CACjD5E,MAAM,CAACC,sBAD0C,EAEjD,IAFiD,EAGjDsE,cAHiD,EAIjDF,IAJiD,CAAnD;MAAM5X,IAAF,yBAAEA,IAAF;MAAQoY;IAMZ,IAAI5O,KAAK,GAAG0Q,cAAc,CAACpU,OAAD,EAAU9F,IAAV,CAA1B;IAEAsV,yBAAyB,GAAG,CAACsC,IAAI,IAAIA,IAAI,CAAChD,kBAAd,MAAsC,IAAlE;IAEA,IAAIwD,UAAU,IAAIjB,gBAAgB,CAACiB,UAAU,CAAChG,UAAZ,CAAlC,EAA2D;MACzDwK,mBAAmB,CAAC1d,GAAD,EAAMob,OAAN,EAAeta,IAAf,EAAqBwJ,KAArB,EAA4B1D,OAA5B,EAAqCsS,UAArC,CAAnB;MACA;IACD,CA9CwB;IAiDzB;;IACAnC,gBAAgB,CAAClI,GAAjB,CAAqB7O,GAArB,EAA0B;MAAEob,OAAF,EAAEA,OAAF;MAAWta;KAArC;IACA6c,mBAAmB,CAAC3d,GAAD,EAAMob,OAAN,EAAeta,IAAf,EAAqBwJ,KAArB,EAA4B1D,OAA5B,EAAqCsS,UAArC,CAAnB;EACD,CAl+B0C;EAq+B3C;EAAA,SACewE,mBAAfA;IAAA;EAAA,EAt+B2C;EAAA;IAAAE,kFAs+B3C,kBACE5d,GADF,EAEEob,OAFF,EAGEta,IAHF,EAIEwJ,KAJF,EAKEuT,cALF,EAME3E,UANF;MAAA;MAAA;QAAA;UAAA;YAQEI,oBAAoB;YACpBvC,gBAAgB,CAAC/F,MAAjB,CAAwBhR,GAAxB;YAAA,MAEI,CAACsK,KAAK,CAAC7E,KAAN,CAAYlG,MAAb,IAAuB,CAAC+K,KAAK,CAAC7E,KAAN,CAAY2P,IAAxC;cAAA0I;cAAA;YAAA;YACM/Y,OAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;cACtCmG,MAAM,EAAEjC,UAAU,CAAChG,UADmB;cAEtC/S,QAAQ,EAAEW,IAF4B;cAGtCsa,OAAO,EAAEA;YAH6B,CAAN,CAAlC;YAKAqC,eAAe,CAACzd,GAAD,EAAMob,OAAN,EAAerW,OAAf,CAAf;YAAA;UAAA;YAXoB;YAgBlBgZ,eAAe,GAAG5e,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmB9Q,GAAnB,CAAtB;YACIqc,OAAO;cACTld,KAAK,EAAE;YADE,GAEN+Z,UAFM;cAGT5K,IAAI,EAAEyP,eAAe,IAAIA,eAAe,CAACzP,IAHhC;cAIT,2BAA6B;aAJ/B;YAMAnP,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwBqc,OAAxB;YACA5E,WAAW,CAAC;cAAE1B,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;aAAb,CAAX,CAxBsB;YA2BlBiI,eAAe,GAAG,IAAIpO,eAAJ,EAAtB;YACIqO,YAAY,GAAG9D,uBAAuB,CACxC5L,IAAI,CAAC7N,OADmC,EAExCI,IAFwC,EAGxCkd,eAAe,CAAChO,MAHwB,EAIxCkJ,UAJwC,CAA1C;YAMAxC,gBAAgB,CAAC7H,GAAjB,CAAqB7O,GAArB,EAA0Bge,eAA1B;YAAAF;YAAA,OAEyBzC,kBAAkB,CACzC,QADyC,EAEzC4C,YAFyC,EAGzC3T,KAHyC,EAIzCuT,cAJyC,EAKzC/X,QALyC,EAMzCF,kBANyC,EAOzCW,QAPyC,CAA3C;UAAA;YAAI2X,YAAY;YAAA,KAUZD,YAAY,CAACjO,MAAb,CAAoBe,OAAxB;cAAA+M;cAAA;YAAA;YACE;YACA;YACA,IAAIpH,gBAAgB,CAAC5F,GAAjB,CAAqB9Q,GAArB,MAA8Bge,eAAlC,EAAmD;cACjDtH,gBAAgB,CAAC1F,MAAjB,CAAwBhR,GAAxB;YACD;YAAA;UAAA;YAAA,KAICsb,gBAAgB,CAAC4C,YAAD,CAApB;cAAAJ;cAAA;YAAA;YACEpH,gBAAgB,CAAC1F,MAAjB,CAAwBhR,GAAxB;YACA8W,gBAAgB,CAACxG,GAAjB,CAAqBtQ,GAArB;YACIme,cAAc;cAChBhf,KAAK,EAAE;YADS,GAEb+Z,UAFa;cAGhB5K,IAAI,EAAElP,SAHU;cAIhB,2BAA6B;aAJ/B;YAMAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwBme,cAAxB;YACA1G,WAAW,CAAC;cAAE1B,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;YAAZ,CAAD,CAAX;YAAA,kCAEOwF,uBAAuB,CAACpc,KAAD,EAAQ+e,YAAR,EAAsB;cAClDhF,UADkD,EAClDA,UADkD;cAElDkF,qBAAqB,EAAE;YAF2B,CAAtB,CAA9B;UAAA;YAAA,KAOE5C,aAAa,CAAC0C,YAAD,CAAjB;cAAAJ;cAAA;YAAA;YACEL,eAAe,CAACzd,GAAD,EAAMob,OAAN,EAAe8C,YAAY,CAACnZ,KAA5B,CAAf;YAAA;UAAA;YAAA,KAIE2W,gBAAgB,CAACwC,YAAD,CAApB;cAAAJ;cAAA;YAAA;YAAA,MACQ9I,sBAAsB,CAAC,GAAD,EAAM;cAAEkG,IAAI,EAAE;YAAR,CAAN,CAA5B;UAAA;YAhFoB;YAoFtB;YACI9Z,YAAY,GAAGjC,KAAK,CAACqW,UAAN,CAAiBvV,QAAjB,IAA6Bd,KAAK,CAACc,QAAtD;YACIoe,mBAAmB,GAAGlE,uBAAuB,CAC/C5L,IAAI,CAAC7N,OAD0C,EAG/CU,YAH+C,EAI/C4c,eAAe,CAAChO,MAJ+B,CAAjD;YAMI2J,WAAW,GAAGvF,kBAAkB,IAAID,UAAxC;YACIvN,OAAO,GACTzH,KAAK,CAACqW,UAAN,CAAiBrW,KAAjB,KAA2B,MAA3B,GACIkH,WAAW,CAACsT,WAAD,EAAcxa,KAAK,CAACqW,UAAN,CAAiBvV,QAA/B,EAAyCsG,QAAzC,CADf,GAEIpH,KAAK,CAACyH,OAHZ;YAKA1B,SAAS,CAAC0B,OAAD,EAAU,8CAAV,CAAT;YAEI0X,MAAM,GAAG,EAAE3H,kBAAf;YACAE,cAAc,CAAChI,GAAf,CAAmB7O,GAAnB,EAAwBse,MAAxB;YAEIC,WAAW;cACbpf,KAAK,EAAE,SADM;cAEbmP,IAAI,EAAE4P,YAAY,CAAC5P;YAFN,GAGV4K,UAHU;cAIb,2BAA6B;aAJ/B;YAMA/Z,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwBue,WAAxB;YAAAC,qBAE4C1C,gBAAgB,CAC1DvN,IAAI,CAAC7N,OADqD,EAE1DvB,KAF0D,EAG1DyH,OAH0D,EAI1DsS,UAJ0D,EAK1D9X,YAL0D,EAM1DmV,sBAN0D,EAO1DC,uBAP0D,EAQ1DC,qBAR0D,EAS1DM,gBAT0D,EAU1D4C,WAV0D,EAW1DpT,QAX0D,sBAYvD+D,KAAK,CAAC7E,KAAN,CAAYO,EAAb,EAAkBkY,YAAY,CAAC5P,OACjClP,SAb0D;YAAA,CAA5D,8DAAK2c,aAAD,0BAAgBC,oBAAhB,0BA/GkB;YAgItB;YACA;YACAA,oBAAoB,CACjBrS,MADH,CACWyS,YAAD;cAAA,OAAQA,EAAE,CAACpc,GAAH,KAAWA,GAD7B;YAAA,GAEG4H,OAFH,CAEYwU,YAAD,EAAO;cACd,IAAIqC,QAAQ,GAAGrC,EAAE,CAACpc,GAAlB;cACA,IAAI+d,eAAe,GAAG5e,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmB2N,QAAnB,CAAtB;cACA,IAAInC,mBAAmB,GAA6B;gBAClDnd,KAAK,EAAE,SAD2C;gBAElDmP,IAAI,EAAEyP,eAAe,IAAIA,eAAe,CAACzP,IAFS;gBAGlD4E,UAAU,EAAE9T,SAHsC;gBAIlD+T,UAAU,EAAE/T,SAJsC;gBAKlDgU,WAAW,EAAEhU,SALqC;gBAMlDiU,QAAQ,EAAEjU,SANwC;gBAOlD,2BAA6B;eAP/B;cASAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB4P,QAAnB,EAA6BnC,mBAA7B;cACA,IAAIF,EAAE,CAACzM,UAAP,EAAmB;gBACjB+G,gBAAgB,CAAC7H,GAAjB,CAAqB4P,QAArB,EAA+BrC,EAAE,CAACzM,UAAlC;cACD;aAjBL;YAoBA8H,WAAW,CAAC;cAAE1B,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;YAAZ,CAAD,CAAX;YAEIwG,8BAA8B,GAAG,SAAjCA,8BAA8BA;cAAA,OAChCP,oBAAoB,CAACpU,OAArB,CAA8BwU,YAAD;gBAAA,OAAQK,YAAY,CAACL,EAAE,CAACpc,GAAJ,CAAjD;cAAA,EADF;YAAA;YAGAge,eAAe,CAAChO,MAAhB,CAAuB7K,gBAAvB,CACE,OADF,EAEEoX,8BAFF;YAAAuB;YAAA,OAMQpB,8BAA8B,CAClCvd,KAAK,CAACyH,OAD4B,EAElCA,OAFkC,EAGlCmV,aAHkC,EAIlCC,oBAJkC,EAKlCqC,mBALkC,CADtC;UAAA;YAAAK;YAAM9B,OAAF,0BAAEA,OAAF;YAAWC,aAAX,0BAAWA,aAAX;YAA0BC;YAAAA,KAS1BkB,eAAe,CAAChO,MAAhB,CAAuBe,OAA3B;cAAA+M;cAAA;YAAA;YAAA;UAAA;YAIAE,eAAe,CAAChO,MAAhB,CAAuB5K,mBAAvB,CACE,OADF,EAEEmX,8BAFF;YAKA1F,cAAc,CAAC7F,MAAf,CAAsBhR,GAAtB;YACA0W,gBAAgB,CAAC1F,MAAjB,CAAwBhR,GAAxB;YACAgc,oBAAoB,CAACpU,OAArB,CAA8B8H,WAAD;cAAA,OAAOgH,gBAAgB,CAAC1F,MAAjB,CAAwBtB,CAAC,CAAC1P,GAA1B,CAApC;YAAA;YAEIsS,QAAQ,GAAGyK,YAAY,CAACH,OAAD,CAA3B;YAAA,KACItK,QAAJ;cAAAwL;cAAA;YAAA;YAAA,kCACSvC,uBAAuB,CAACpc,KAAD,EAAQmT,QAAR,CAA9B;UAAA;YAxLoB;YAAAqM,sBA4LO1B,iBAAiB,CAC5C9d,KAD4C,EAE5CA,KAAK,CAACyH,OAFsC,EAG5CmV,aAH4C,EAI5Cc,aAJ4C,EAK5Czd,SAL4C,EAM5C4c,oBAN4C,EAO5Cc,cAP4C,EAQ5C9F,eAR4C,CAA9C,EAAMpB,UAAF,uBAAEA,UAAF,EAAcE;YAWd8I,WAAW,GAA0B;cACvCzf,KAAK,EAAE,MADgC;cAEvCmP,IAAI,EAAE4P,YAAY,CAAC5P,IAFoB;cAGvC4E,UAAU,EAAE9T,SAH2B;cAIvC+T,UAAU,EAAE/T,SAJ2B;cAKvCgU,WAAW,EAAEhU,SAL0B;cAMvCiU,QAAQ,EAAEjU,SAN6B;cAOvC,2BAA6B;aAP/B;YASAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwB4e,WAAxB;YAEIzB,kBAAkB,GAAGC,oBAAoB,CAACkB,MAAD,CAA7C,EAlNsB;YAqNtB;YACA;YACA,IACEnf,KAAK,CAACqW,UAAN,CAAiBrW,KAAjB,KAA2B,SAA3B,IACAmf,MAAM,GAAG1H,uBAFX,EAGE;cACA1R,SAAS,CAACgR,aAAD,EAAgB,yBAAhB,CAAT;cACAG,2BAA2B,IAAIA,2BAA2B,CAAC7E,KAA5B,EAA/B;cAEAuG,kBAAkB,CAAC5Y,KAAK,CAACqW,UAAN,CAAiBvV,QAAlB,EAA4B;gBAC5C2G,OAD4C,EAC5CA,OAD4C;gBAE5CgP,UAF4C,EAE5CA,UAF4C;gBAG5CE,MAH4C,EAG5CA,MAH4C;gBAI5CC,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;cAJkC,CAA5B,CAAlB;YAMD,CAbD,MAaO;cACL;cACA;cACA;cACA0B,WAAW;gBACT3B,MADS,EACTA,MADS;gBAETF,UAAU,EAAEwC,eAAe,CACzBjZ,KAAK,CAACyW,UADmB,EAEzBA,UAFyB,EAGzBhP,OAHyB,EAIzBkP,MAJyB;cAFlB,GAQLqH,kBAAkB,GAAG;gBAAEpH,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;eAAf,GAA2C,EARxD,CAAX;cAUAQ,sBAAsB,GAAG,KAAzB;YACD;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CA/tCwC;IAAA;EAAA;EAAA,SAmuC5BoH,mBAAfA;IAAA;EAAA;EAqGA;;;;;;;;;;;;;;;;;;AAkBG;EAlBH;IAAAkB,kFArGA,kBACE7e,GADF,EAEEob,OAFF,EAGEta,IAHF,EAIEwJ,KAJF,EAKE1D,OALF,EAMEsS,UANF;MAAA;MAAA;QAAA;UAAA;YAQM6E,eAAe,GAAG5e,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmB9Q,GAAnB,CAAtB,EAFuB;YAInBme,cAAc;cAChBhf,KAAK,EAAE,SADS;cAEhB+T,UAAU,EAAE9T,SAFI;cAGhB+T,UAAU,EAAE/T,SAHI;cAIhBgU,WAAW,EAAEhU,SAJG;cAKhBiU,QAAQ,EAAEjU;YALM,GAMb8Z,UANa;cAOhB5K,IAAI,EAAEyP,eAAe,IAAIA,eAAe,CAACzP,IAPzB;cAQhB,2BAA6B;aAR/B;YAUAnP,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwBme,cAAxB;YACA1G,WAAW,CAAC;cAAE1B,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;aAAb,CAAX,CAfuB;YAkBnBiI,eAAe,GAAG,IAAIpO,eAAJ,EAAtB;YACIqO,YAAY,GAAG9D,uBAAuB,CACxC5L,IAAI,CAAC7N,OADmC,EAExCI,IAFwC,EAGxCkd,eAAe,CAAChO,MAHwB,CAA1C;YAKA0G,gBAAgB,CAAC7H,GAAjB,CAAqB7O,GAArB,EAA0Bge,eAA1B;YAAAc;YAAA,OAE+BzD,kBAAkB,CAC/C,QAD+C,EAE/C4C,YAF+C,EAG/C3T,KAH+C,EAI/C1D,OAJ+C,EAK/Cd,QAL+C,EAM/CF,kBAN+C,EAO/CW,QAP+C,CAAjD;UAAA;YAAIoC,MAAM;YAAA,KAcN+S,gBAAgB,CAAC/S,MAAD,CAApB;cAAAmW;cAAA;YAAA;YAAAA;YAAA,OAEWC,mBAAmB,CAACpW,MAAD,EAASsV,YAAY,CAACjO,MAAtB,EAA8B,IAA9B,CAA1B;UAAA;YAAA8O;YAAA;cAAAA;cAAA;YAAA;YAAAA,eACAnW,MAFF;UAAA;YAAAA,MAAM;UAAA;YAzCe;YA+CvB;;YACA,IAAI+N,gBAAgB,CAAC5F,GAAjB,CAAqB9Q,GAArB,MAA8Bge,eAAlC,EAAmD;cACjDtH,gBAAgB,CAAC1F,MAAjB,CAAwBhR,GAAxB;YACD;YAAA,KAEGie,YAAY,CAACjO,MAAb,CAAoBe,OAAxB;cAAA+N;cAAA;YAAA;YAAA;UAAA;YAAA,KAKIxD,gBAAgB,CAAC3S,MAAD,CAApB;cAAAmW;cAAA;YAAA;YACEhI,gBAAgB,CAACxG,GAAjB,CAAqBtQ,GAArB;YAAA8e;YAAA,OACMvD,uBAAuB,CAACpc,KAAD,EAAQwJ,MAAR,CAA7B;UAAA;YAAA;UAAA;YAAA,KAKE6S,aAAa,CAAC7S,MAAD,CAAjB;cAAAmW;cAAA;YAAA;YACMrD,aAAa,GAAGrB,mBAAmB,CAACjb,KAAK,CAACyH,OAAP,EAAgBwU,OAAhB,CAAvC;YACAjc,KAAK,CAAC4W,QAAN,CAAe/E,MAAf,CAAsBhR,GAAtB,EAFyB;YAIzB;YACA;;YACAyX,WAAW,CAAC;cACV1B,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd,CADA;cAEVD,MAAM,sBACH2F,aAAa,CAAChW,KAAd,CAAoBO,EAArB,EAA0B2C,MAAM,CAAC5D;YAHzB,CAAD,CAAX;YAAA;UAAA;YASFG,SAAS,CAAC,CAACwW,gBAAgB,CAAC/S,MAAD,CAAlB,EAA4B,iCAA5B,CAAT,CA/EuB;YAkFnBiW,WAAW,GAA0B;cACvCzf,KAAK,EAAE,MADgC;cAEvCmP,IAAI,EAAE3F,MAAM,CAAC2F,IAF0B;cAGvC4E,UAAU,EAAE9T,SAH2B;cAIvC+T,UAAU,EAAE/T,SAJ2B;cAKvCgU,WAAW,EAAEhU,SAL0B;cAMvCiU,QAAQ,EAAEjU,SAN6B;cAOvC,2BAA6B;aAP/B;YASAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwB4e,WAAxB;YACAnH,WAAW,CAAC;cAAE1B,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;YAAZ,CAAD,CAAX;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACD;IAAA;EAAA;EAAA,SAqBcwF,uBAAfA;IAAA;EAAA;EAAA;IAAAyD,wGACE7f,KADF,EAEEmT,QAFF,EAWQ2M;MAAA;MAAA;QAAA;UAAA;YAAAC,2BAAF,EAAE,UAPJhG,UADF,SACEA,UADF,EAEE3X,OAFF,SAEEA,OAFF,EAGE6c;YAOF,IAAI9L,QAAQ,CAAC+G,UAAb,EAAyB;cACvB9C,sBAAsB,GAAG,IAAzB;YACD;YAEG4I,gBAAgB,GAAGjf,cAAc,CACnCf,KAAK,CAACc,QAD6B,EAEnCqS,QAAQ,CAACrS,QAF0B;YAAA;YAAAqd;cAKjCpF,WAAW,EAAE;YALoB,GAM7BkG,qBAAqB,GAAG;cAAEgB,sBAAsB,EAAE;aAA7B,GAAsC,EAN9B,CAArC;YASAla,SAAS,CACPia,gBADO,EAEP,gDAFO,CAAT,CAfM;YAAA,MAqBJzL,kBAAkB,CAAC5J,IAAnB,CAAwBwI,QAAQ,CAACrS,QAAjC,KACA0T,SADA,IAEA,mBAAO7R,MAAP,qBAAOud,QAAQpf,QAAf,MAA4B,WAH9B;cAAAqf;cAAA;YAAA;YAKMxc,GAAG,GAAGyL,IAAI,CAAC7N,OAAL,CAAaC,SAAb,CAAuB2R,QAAQ,CAACrS,QAAhC,CAAV;YACIsf,mBAAmB,GAAG/Y,aAAa,CAAC1D,GAAG,CAAC3C,QAAL,EAAeoG,QAAf,CAAb,IAAyC,IAAnE;YAAA,MAEIzE,MAAM,CAAC7B,QAAP,CAAgBgF,MAAhB,KAA2BnC,GAAG,CAACmC,MAA/B,IAAyCsa,mBAA7C;cAAAD;cAAA;YAAA;YACE,IAAI/d,OAAJ,EAAa;cACXO,MAAM,CAAC7B,QAAP,CAAgBsB,OAAhB,CAAwB+Q,QAAQ,CAACrS,QAAjC;YACD,CAFD,MAEO;cACL6B,MAAM,CAAC7B,QAAP,CAAgB+E,MAAhB,CAAuBsN,QAAQ,CAACrS,QAAhC;YACD;YAAA;UAAA;YAjCC;YAuCN;;YACAoW,2BAA2B,GAAG,IAA9B;YAEImJ,qBAAqB,GACvBje,OAAO,KAAK,IAAZ,GAAmB4U,MAAa,CAAC3U,OAAjC,GAA2C2U,MAAa,CAAChV,IAD3D,EA1CM;YA8CN;YAAAse,oBACwDtgB,KAAK,CAACqW,UAA9D,EAAMtC,UAAF,qBAAEA,UAAF,EAAcC,UAAd,qBAAcA,UAAd,EAA0BC,WAA1B,qBAA0BA,WAA1B,EAAuCC;YAC3C,IAAI,CAAC6F,UAAD,IAAehG,UAAf,IAA6BC,UAA7B,IAA2CE,QAA3C,IAAuDD,WAA3D,EAAwE;cACtE8F,UAAU,GAAG;gBACXhG,UADW,EACXA,UADW;gBAEXC,UAFW,EAEXA,UAFW;gBAGXC,WAHW,EAGXA,WAHW;gBAIXC;eAJF;YAMD,CAvDK;YA0DN;YACA;YAAA,MAEEL,iCAAiC,CAACpE,GAAlC,CAAsC0D,QAAQ,CAAC7D,MAA/C,KACAyK,UADA,IAEAjB,gBAAgB,CAACiB,UAAU,CAAChG,UAAZ,CAHlB;cAAAoM;cAAA;YAAA;YAAAA;YAAA,OAKQ5H,eAAe,CAAC8H,qBAAD,EAAwBL,gBAAxB,EAA0C;cAC7DjG,UAAU,eACLA,UADK;gBAER/F,UAAU,EAAEb,QAAQ,CAACrS;eAHsC;cAK7D;cACAyV,kBAAkB,EAAEU;YANyC,CAA1C,CAArB;UAAA;YAAAkJ;YAAA;UAAA;YAAA,KAQSlB,qBAAJ;cAAAkB;cAAA;YAAA;YAAAA;YAAA,OAGC5H,eAAe,CAAC8H,qBAAD,EAAwBL,gBAAxB,EAA0C;cAC7D3F,kBAAkB,EAAE;gBAClBra,KAAK,EAAE,SADW;gBAElBc,QAAQ,EAAEkf,gBAFQ;gBAGlBjM,UAAU,EAAE9T,SAHM;gBAIlB+T,UAAU,EAAE/T,SAJM;gBAKlBgU,WAAW,EAAEhU,SALK;gBAMlBiU,QAAQ,EAAEjU;eAPiD;cAS7Dwb,iBAAiB,EAAE1B,UAT0C;cAU7D;cACAxD,kBAAkB,EAAEU;YAXyC,CAA1C,CAArB;UAAA;YAAAkJ;YAAA;UAAA;YAAAA;YAAA,OAgBM5H,eAAe,CAAC8H,qBAAD,EAAwBL,gBAAxB,EAA0C;cAC7D3F,kBAAkB,EAAE;gBAClBra,KAAK,EAAE,SADW;gBAElBc,QAAQ,EAAEkf,gBAFQ;gBAGlBjM,UAAU,EAAEgG,UAAU,GAAGA,UAAU,CAAChG,UAAd,GAA2B9T,SAH/B;gBAIlB+T,UAAU,EAAE+F,UAAU,GAAGA,UAAU,CAAC/F,UAAd,GAA2B/T,SAJ/B;gBAKlBgU,WAAW,EAAE8F,UAAU,GAAGA,UAAU,CAAC9F,WAAd,GAA4BhU,SALjC;gBAMlBiU,QAAQ,EAAE6F,UAAU,GAAGA,UAAU,CAAC7F,QAAd,GAAyBjU;eAPc;cAS7D;cACAsW,kBAAkB,EAAEU;YAVyC,CAA1C,CAArB;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAaH;IAAA;EAAA;EAAA,SAEcsG,8BAAfA;IAAA;EAAA;EAAA;IAAAgD,+GACEC,cADF,EAEE/Y,OAFF,EAGEmV,aAHF,EAIE6D,cAJF,EAKE1F,OALF;MAAA;MAAA;QAAA;UAAA;YAAA2F;YAAA,OAUsBpQ,OAAO,CAACqQ,GAAR,8BACf/D,aAAa,CAAChd,GAAd,CAAmBuL,eAAD;cAAA,OACnB+Q,kBAAkB,CAChB,QADgB,EAEhBnB,OAFgB,EAGhB5P,KAHgB,EAIhB1D,OAJgB,EAKhBd,QALgB,EAMhBF,kBANgB,EAOhBW,QAPgB,CADjB;YAAA,EAD2B,sBAY3BqZ,cAAc,CAAC7gB,GAAf,CAAoByd,WAAD,EAAM;cAC1B,IAAIA,CAAC,CAAC5V,OAAF,IAAa4V,CAAC,CAAClS,KAAf,IAAwBkS,CAAC,CAAC7M,UAA9B,EAA0C;gBACxC,OAAO0L,kBAAkB,CACvB,QADuB,EAEvBlB,uBAAuB,CAAC5L,IAAI,CAAC7N,OAAN,EAAe8b,CAAC,CAAC1b,IAAjB,EAAuB0b,CAAC,CAAC7M,UAAF,CAAaK,MAApC,CAFA,EAGvBwM,CAAC,CAAClS,KAHqB,EAIvBkS,CAAC,CAAC5V,OAJqB,EAKvBd,QALuB,EAMvBF,kBANuB,EAOvBW,QAPuB,CAAzB;cASD,CAVD,MAUO;gBACL,IAAIxB,OAAK,GAAgB;kBACvBmW,IAAI,EAAE7V,UAAU,CAACN,KADM;kBAEvBA,KAAK,EAAEiQ,sBAAsB,CAAC,GAAD,EAAM;oBAAE7U,QAAQ,EAAEqc,CAAC,CAAC1b;mBAApB;iBAF/B;gBAIA,OAAOiE,OAAP;cACD;aAjBA,CAZ2B,GAAhC;UAAA;YAAI6X,OAAO;YAgCPC,aAAa,GAAGD,OAAO,CAAC3Z,KAAR,CAAc,CAAd,EAAiB8Y,aAAa,CAACzc,MAA/B,CAApB;YACIwd,cAAc,GAAGF,OAAO,CAAC3Z,KAAR,CAAc8Y,aAAa,CAACzc,MAA5B,CAArB;YAAAugB;YAAA,OAEMpQ,OAAO,CAACqQ,GAAR,CAAY,CAChBC,sBAAsB,CACpBJ,cADoB,EAEpB5D,aAFoB,EAGpBc,aAHoB,EAIpBA,aAAa,CAAC9d,GAAd,CAAkB;cAAA,OAAMmb,OAAO,CAAClK,MAAhC;YAAA,EAJoB,EAKpB,KALoB,EAMpB7Q,KAAK,CAACyW,UANc,CADN,EAShBmK,sBAAsB,CACpBJ,cADoB,EAEpBC,cAAc,CAAC7gB,GAAf,CAAoByd,WAAD;cAAA,OAAOA,CAAC,CAAClS,KAA5B;YAAA,EAFoB,EAGpBwS,cAHoB,EAIpB8C,cAAc,CAAC7gB,GAAf,CAAoByd,WAAD;cAAA,OAAQA,CAAC,CAAC7M,UAAF,GAAe6M,CAAC,CAAC7M,UAAF,CAAaK,MAA5B,GAAqC,IAAhE;YAAA,EAJoB,EAKpB,IALoB,CATN,CAAZ,CAAN;UAAA;YAAA,kCAkBO;cAAE4M,OAAF,EAAEA,OAAF;cAAWC,aAAX,EAAWA,aAAX;cAA0BC;aAAjC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACD;IAAA;EAAA;EAED,SAASxD,oBAATA,GAA6B;IAAA;IAC3B;IACA/C,sBAAsB,GAAG,IAAzB,CAF2B;IAK3B;;IACAC,gDAAuB,EAACtV,IAAxB,iDAAgC8Y,qBAAqB,EAArD,GAN2B;;IAS3BjD,gBAAgB,CAACnP,OAAjB,CAAyB,UAACqE,CAAD,EAAIjM,GAAJ,EAAW;MAClC,IAAI0W,gBAAgB,CAAC9H,GAAjB,CAAqB5O,GAArB,CAAJ,EAA+B;QAC7ByW,qBAAqB,CAACvV,IAAtB,CAA2BlB,GAA3B;QACAyc,YAAY,CAACzc,GAAD,CAAZ;MACD;KAJH;EAMD;EAED,SAASyd,eAATA,CAAyBzd,GAAzB,EAAsCob,OAAtC,EAAuDrW,KAAvD,EAAiE;IAC/D,IAAI0W,aAAa,GAAGrB,mBAAmB,CAACjb,KAAK,CAACyH,OAAP,EAAgBwU,OAAhB,CAAvC;IACAvD,aAAa,CAAC7X,GAAD,CAAb;IACAyX,WAAW,CAAC;MACV3B,MAAM,sBACH2F,aAAa,CAAChW,KAAd,CAAoBO,EAArB,EAA0BjB,MAFlB;MAIVgR,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7W,KAAK,CAAC4W,QAAd;IAJA,CAAD,CAAX;EAMD;EAED,SAAS8B,aAATA,CAAuB7X,GAAvB,EAAkC;IAChC,IAAI0W,gBAAgB,CAAC9H,GAAjB,CAAqB5O,GAArB,CAAJ,EAA+Byc,YAAY,CAACzc,GAAD,CAAZ;IAC/B+W,gBAAgB,CAAC/F,MAAjB,CAAwBhR,GAAxB;IACA6W,cAAc,CAAC7F,MAAf,CAAsBhR,GAAtB;IACA8W,gBAAgB,CAAC9F,MAAjB,CAAwBhR,GAAxB;IACAb,KAAK,CAAC4W,QAAN,CAAe/E,MAAf,CAAsBhR,GAAtB;EACD;EAED,SAASyc,YAATA,CAAsBzc,GAAtB,EAAiC;IAC/B,IAAI2P,UAAU,GAAG+G,gBAAgB,CAAC5F,GAAjB,CAAqB9Q,GAArB,CAAjB;IACAkF,SAAS,CAACyK,UAAD,EAA2C3P,mCAA3C,CAAT;IACA2P,UAAU,CAAC6B,KAAX;IACAkF,gBAAgB,CAAC1F,MAAjB,CAAwBhR,GAAxB;EACD;EAED,SAASggB,gBAATA,CAA0B7H,IAA1B,EAAwC;IAAA,4CACtBA,IAAhB;MAAA8H;IAAA;MAAA,uDAAsB;QAAA,IAAbjgB,GAAT;QACE,IAAIqc,OAAO,GAAGkB,UAAU,CAACvd,GAAD,CAAxB;QACA,IAAI4e,WAAW,GAA0B;UACvCzf,KAAK,EAAE,MADgC;UAEvCmP,IAAI,EAAE+N,OAAO,CAAC/N,IAFyB;UAGvC4E,UAAU,EAAE9T,SAH2B;UAIvC+T,UAAU,EAAE/T,SAJ2B;UAKvCgU,WAAW,EAAEhU,SAL0B;UAMvCiU,QAAQ,EAAEjU,SAN6B;UAOvC,2BAA6B;SAP/B;QASAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwB4e,WAAxB;MACD;IAAA;MAAAsB;IAAA;MAAAA;IAAA;EACF;EAED,SAAS/D,sBAATA,GAA+B;IAC7B,IAAIgE,QAAQ,GAAG,EAAf;IACA,IAAIjE,eAAe,GAAG,KAAtB;IAAA,4CACgBpF,gBAAhB;MAAAsJ;IAAA;MAAA,uDAAkC;QAAA,IAAzBpgB,GAAT;QACE,IAAIqc,OAAO,GAAGld,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmB9Q,GAAnB,CAAd;QACAkF,SAAS,CAACmX,OAAD,EAA+Brc,0BAA/B,CAAT;QACA,IAAIqc,OAAO,CAACld,KAAR,KAAkB,SAAtB,EAAiC;UAC/B2X,gBAAgB,CAAC9F,MAAjB,CAAwBhR,GAAxB;UACAmgB,QAAQ,CAACjf,IAAT,CAAclB,GAAd;UACAkc,eAAe,GAAG,IAAlB;QACD;MACF;IAAA;MAAAmE;IAAA;MAAAA;IAAA;IACDL,gBAAgB,CAACG,QAAD,CAAhB;IACA,OAAOjE,eAAP;EACD;EAED,SAASkB,oBAATA,CAA8BkD,QAA9B,EAA8C;IAC5C,IAAIC,UAAU,GAAG,EAAjB;IAAA,4CACsB1J,cAAtB;MAAA2J;IAAA;MAAA,uDAAsC;QAAA;UAA5BxgB,GAAD;UAAMgG,EAAN;QACP,IAAIA,EAAE,GAAGsa,QAAT,EAAmB;UACjB,IAAIjE,OAAO,GAAGld,KAAK,CAAC4W,QAAN,CAAejF,GAAf,CAAmB9Q,GAAnB,CAAd;UACAkF,SAAS,CAACmX,OAAD,EAA+Brc,0BAA/B,CAAT;UACA,IAAIqc,OAAO,CAACld,KAAR,KAAkB,SAAtB,EAAiC;YAC/Bsd,YAAY,CAACzc,GAAD,CAAZ;YACA6W,cAAc,CAAC7F,MAAf,CAAsBhR,GAAtB;YACAugB,UAAU,CAACrf,IAAX,CAAgBlB,GAAhB;UACD;QACF;MACF;IAAA;MAAAygB;IAAA;MAAAA;IAAA;IACDT,gBAAgB,CAACO,UAAD,CAAhB;IACA,OAAOA,UAAU,CAACjhB,MAAX,GAAoB,CAA3B;EACD;EAED,SAASohB,UAATA,CAAoB1gB,GAApB,EAAiC4B,EAAjC,EAAoD;IAClD,IAAI+e,OAAO,GAAYxhB,KAAK,CAAC8W,QAAN,CAAenF,GAAf,CAAmB9Q,GAAnB,KAA2BuT,YAAlD;IAEA,IAAI0D,gBAAgB,CAACnG,GAAjB,CAAqB9Q,GAArB,MAA8B4B,EAAlC,EAAsC;MACpCqV,gBAAgB,CAACpI,GAAjB,CAAqB7O,GAArB,EAA0B4B,EAA1B;IACD;IAED,OAAO+e,OAAP;EACD;EAED,SAASnJ,aAATA,CAAuBxX,GAAvB,EAAkC;IAChCb,KAAK,CAAC8W,QAAN,CAAejF,MAAf,CAAsBhR,GAAtB;IACAiX,gBAAgB,CAACjG,MAAjB,CAAwBhR,GAAxB;EACD,CA5nD0C;;EA+nD3C,SAASuX,aAATA,CAAuBvX,GAAvB,EAAoC4gB,UAApC,EAAuD;IACrD,IAAID,OAAO,GAAGxhB,KAAK,CAAC8W,QAAN,CAAenF,GAAf,CAAmB9Q,GAAnB,KAA2BuT,YAAzC,CADqD;IAIrD;;IACArO,SAAS,CACNyb,OAAO,CAACxhB,KAAR,KAAkB,WAAlB,IAAiCyhB,UAAU,CAACzhB,KAAX,KAAqB,SAAvD,IACGwhB,OAAO,CAACxhB,KAAR,KAAkB,SAAlB,IAA+ByhB,UAAU,CAACzhB,KAAX,KAAqB,SADvD,IAEGwhB,OAAO,CAACxhB,KAAR,KAAkB,SAAlB,IAA+ByhB,UAAU,CAACzhB,KAAX,KAAqB,YAFvD,IAGGwhB,OAAO,CAACxhB,KAAR,KAAkB,SAAlB,IAA+ByhB,UAAU,CAACzhB,KAAX,KAAqB,WAHvD,IAIGwhB,OAAO,CAACxhB,KAAR,KAAkB,YAAlB,IAAkCyhB,UAAU,CAACzhB,KAAX,KAAqB,WALnD,yCAM8BwhB,OAAO,CAACxhB,KANtC,YAMkDyhB,UAAU,CAACzhB,KAN7D,CAAT;IASAA,KAAK,CAAC8W,QAAN,CAAepH,GAAf,CAAmB7O,GAAnB,EAAwB4gB,UAAxB;IACAnJ,WAAW,CAAC;MAAExB,QAAQ,EAAE,IAAID,GAAJ,CAAQ7W,KAAK,CAAC8W,QAAd;IAAZ,CAAD,CAAX;EACD;EAED,SAASoB,qBAATA,CAQCwJ;IAAA,IAPCvJ,eAD6B,GAQ9BuJ,MAPCvJ,eAD6B;MAE7BlW,YAF6B,GAQ9Byf,MANCzf,YAF6B;MAG7BmU,gBAKDsL,MALCtL;IAMA,IAAI0B,gBAAgB,CAAClF,IAAjB,KAA0B,CAA9B,EAAiC;MAC/B;IACD,CAHF;IAMC;;IACA,IAAIkF,gBAAgB,CAAClF,IAAjB,GAAwB,CAA5B,EAA+B;MAC7B3R,OAAO,CAAC,KAAD,EAAQ,8CAAR,CAAP;IACD;IAED,IAAItB,OAAO,GAAGuQ,KAAK,CAACxB,IAAN,CAAWoJ,gBAAgB,CAACnY,OAAjB,EAAX,CAAd;IACA,8BAAoCA,OAAO,CAACA,OAAO,CAACQ,MAAR,GAAiB,CAAlB,CAA3C;MAAK8X,UAAD;MAAa0J,eAAb;IACJ,IAAIH,OAAO,GAAGxhB,KAAK,CAAC8W,QAAN,CAAenF,GAAf,CAAmBsG,UAAnB,CAAd;IAEA,IAAIuJ,OAAO,IAAIA,OAAO,CAACxhB,KAAR,KAAkB,YAAjC,EAA+C;MAC7C;MACA;MACA;IACD,CAnBF;IAsBC;;IACA,IAAI2hB,eAAe,CAAC;MAAExJ,eAAF,EAAEA,eAAF;MAAmBlW,YAAnB,EAAmBA,YAAnB;MAAiCmU;IAAjC,CAAD,CAAnB,EAAuE;MACrE,OAAO6B,UAAP;IACD;EACF;EAED,SAAS4C,qBAATA,CACE+G,SADF,EAC0C;IAExC,IAAIC,iBAAiB,GAAa,EAAlC;IACAhK,eAAe,CAACpP,OAAhB,CAAwB,UAACqZ,GAAD,EAAM7F,OAAN,EAAiB;MACvC,IAAI,CAAC2F,SAAD,IAAcA,SAAS,CAAC3F,OAAD,CAA3B,EAAsC;QACpC;QACA;QACA;QACA6F,GAAG,CAAC1P,MAAJ;QACAyP,iBAAiB,CAAC9f,IAAlB,CAAuBka,OAAvB;QACApE,eAAe,CAAChG,MAAhB,CAAuBoK,OAAvB;MACD;KARH;IAUA,OAAO4F,iBAAP;EACD,CApsD0C;EAusD3C;;EACA,SAASE,uBAATA,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAG0C;IAExC5M,oBAAoB,GAAG0M,SAAvB;IACAxM,iBAAiB,GAAGyM,WAApB;IACA1M,uBAAuB,GAAG2M,MAAM,IAAMphB,kBAAD;MAAA,OAAcA,QAAQ,CAACD,GAA5B;IAAA,CAAhC,CAJwC;IAOxC;IACA;;IACA,IAAI,CAAC4U,qBAAD,IAA0BzV,KAAK,CAACqW,UAAN,KAAqBvC,eAAnD,EAAoE;MAClE2B,qBAAqB,GAAG,IAAxB;MACA,IAAI0M,CAAC,GAAG/I,sBAAsB,CAACpZ,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACyH,OAAvB,CAA9B;MACA,IAAI0a,CAAC,IAAI,IAAT,EAAe;QACb7J,WAAW,CAAC;UAAEhC,qBAAqB,EAAE6L;QAAzB,CAAD,CAAX;MACD;IACF;IAED,OAAO,YAAK;MACV7M,oBAAoB,GAAG,IAAvB;MACAE,iBAAiB,GAAG,IAApB;MACAD,uBAAuB,GAAG,IAA1B;KAHF;EAKD;EAED,SAASgF,kBAATA,CACEzZ,QADF,EAEE2G,OAFF,EAEmC;IAEjC,IAAI6N,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;MACxE,IAAI4M,WAAW,GAAG3a,OAAO,CAAC7H,GAAR,CAAaoW,WAAD;QAAA,OAC5BqM,qBAAqB,CAACrM,CAAD,EAAIhW,KAAK,CAACyW,UAAV,CADL;MAAA,EAAlB;MAGA,IAAI5V,GAAG,GAAG0U,uBAAuB,CAACzU,QAAD,EAAWshB,WAAX,CAAvB,IAAkDthB,QAAQ,CAACD,GAArE;MACAyU,oBAAoB,CAACzU,GAAD,CAApB,GAA4B2U,iBAAiB,EAA7C;IACD;EACF;EAED,SAAS4D,sBAATA,CACEtY,QADF,EAEE2G,OAFF,EAEmC;IAEjC,IAAI6N,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;MACxE,IAAI4M,WAAW,GAAG3a,OAAO,CAAC7H,GAAR,CAAaoW,WAAD;QAAA,OAC5BqM,qBAAqB,CAACrM,CAAD,EAAIhW,KAAK,CAACyW,UAAV,CADL;MAAA,EAAlB;MAGA,IAAI5V,GAAG,GAAG0U,uBAAuB,CAACzU,QAAD,EAAWshB,WAAX,CAAvB,IAAkDthB,QAAQ,CAACD,GAArE;MACA,IAAIshB,CAAC,GAAG7M,oBAAoB,CAACzU,GAAD,CAA5B;MACA,IAAI,OAAOshB,CAAP,KAAa,QAAjB,EAA2B;QACzB,OAAOA,CAAP;MACD;IACF;IACD,OAAO,IAAP;EACD;EAED,SAASG,kBAATA,CAA4BC,SAA5B,EAAgE;IAC9DtN,kBAAkB,GAAGsN,SAArB;EACD;EAEDpM,MAAM,GAAG;IACP,IAAI/O,QAAJA,GAAY;MACV,OAAOA,QAAP;KAFK;IAIP,IAAIpH,KAAJA,GAAS;MACP,OAAOA,KAAP;KALK;IAOP,IAAIwG,MAAJA,GAAU;MACR,OAAOwO,UAAP;KARK;IAUPgD,UAVO,EAUPA,UAVO;IAWP9F,SAXO,EAWPA,SAXO;IAYP6P,uBAZO,EAYPA,uBAZO;IAaP1I,QAbO,EAaPA,QAbO;IAcPgF,KAdO,EAcPA,KAdO;IAePnE,UAfO,EAePA,UAfO;IAgBP;IACA;IACA7Y,UAAU,EAAGT,sBAAD;MAAA,OAAYwO,IAAI,CAAC7N,OAAL,CAAaF,UAAb,CAAwBT,EAAxB,CAlBjB;IAAA;IAmBPc,cAAc,EAAGd,0BAAD;MAAA,OAAYwO,IAAI,CAAC7N,OAAL,CAAaG,cAAb,CAA4Bd,EAA5B,CAnBrB;IAAA;IAoBPwd,UApBO,EAoBPA,UApBO;IAqBP1F,aArBO,EAqBPA,aArBO;IAsBPF,OAtBO,EAsBPA,OAtBO;IAuBP+I,UAvBO,EAuBPA,UAvBO;IAwBPlJ,aAxBO,EAwBPA,aAxBO;IAyBPmK,yBAAyB,EAAEjL,gBAzBpB;IA0BPkL,wBAAwB,EAAE5K,eA1BnB;IA2BP;IACA;IACAyK;GA7BF;EAgCA,OAAOnM,MAAP;AACD;AAGD;AACA;AACA;;IAEauM,sBAAsB,GAAGC,MAAM,CAAC,UAAD;AAW5B,6BACdnc,MADc,EAEd+S,IAFc,EAEmB;EAEjCxT,SAAS,CACPS,MAAM,CAACrG,MAAP,GAAgB,CADT,EAEP,kEAFO,CAAT;EAKA,IAAIwG,QAAQ,GAAkB,EAA9B;EACA,IAAIS,QAAQ,GAAG,CAACmS,IAAI,GAAGA,IAAI,CAACnS,QAAR,GAAmB,IAAxB,KAAiC,GAAhD;EACA,IAAIX,kBAAJ;EACA,IAAI8S,IAAJ,YAAIA,IAAI,CAAE9S,kBAAV,EAA8B;IAC5BA,kBAAkB,GAAG8S,IAAI,CAAC9S,kBAA1B;EACD,CAFD,MAEO,IAAI8S,IAAJ,YAAIA,IAAI,CAAExE,mBAAV,EAA+B;IACpC;IACA,IAAIA,mBAAmB,GAAGwE,IAAI,CAACxE,mBAA/B;IACAtO,kBAAkB,GAAIH,iCAAD;MAAA,OAAY;QAC/BsO,gBAAgB,EAAEG,mBAAmB,CAACzO,KAAD;MADN,CAAZ;IAAA,CAArB;EAGD,CANM,MAMA;IACLG,kBAAkB,GAAGkO,yBAArB;EACD;EAED,IAAIK,UAAU,GAAGzO,yBAAyB,CACxCC,MADwC,EAExCC,kBAFwC,EAGxCxG,SAHwC,EAIxC0G,QAJwC,CAA1C;EAOA;;;;;;;;;;;;;;;;;;AAkBG;EAlBH,SAmBeic,KAAfA;IAAA;EAAA;EA2DA;;;;;;;;;;;;;;;;;;;AAmBG;EAnBH;IAAAC,oEA3DA,mBACE9H,OADF,EAEuD+H;MAAA;MAAA;QAAA;UAAA;YAAAC,4BAAF,EAAE,WAAnDC;YAEErf,GAAG,GAAG,IAAIlC,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,CAAV;YACIqY,MAAM,GAAGjB,OAAO,CAACiB,MAArB;YACIlb,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACqC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B;YACI8D,OAAO,GAAGP,WAAW,CAAC8N,UAAD,EAAalU,QAAb,EAAuBsG,QAAvB,CAAzB,EALqD;YAAA,MAQjD,CAAC6b,aAAa,CAACjH,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAAzC;cAAAkH;cAAA;YAAA;YACMtd,KAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;cAAEmG;YAAF,CAAN,CAAlC;YAAAmH,yBAEErN,sBAAsB,CAACd,UAAD,CADxB,EAAeoO,uBAAX,0BAAE3b,OAAO,EAA2BnB;YAAAA,mCAEjC;cACLc,QADK,EACLA,QADK;cAELtG,QAFK,EAELA,QAFK;cAGL2G,OAAO,EAAE2b,uBAHJ;cAIL3M,UAAU,EAAE,EAJP;cAKLC,UAAU,EAAE,IALP;cAMLC,MAAM,sBACHrQ,KAAK,CAACO,EAAP,EAAYjB,MAPT;cASLyd,UAAU,EAAEzd,KAAK,CAAC0J,MATb;cAULgU,aAAa,EAAE,EAVV;cAWLC,aAAa,EAAE,EAXV;cAYL1L,eAAe,EAAE;aAZnB;UAAA;YAAA,IAcUpQ,OAAL;cAAAyb;cAAA;YAAA;YACDtd,OAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;cAAE7U,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAAlC;YAAAwiB,yBAEE1N,sBAAsB,CAACd,UAAD,CADxB,EAAe4F,eAAX,0BAAEnT,OAAO,EAAmBnB;YAAAA,mCAEzB;cACLc,QADK,EACLA,QADK;cAELtG,QAFK,EAELA,QAFK;cAGL2G,OAAO,EAAEmT,eAHJ;cAILnE,UAAU,EAAE,EAJP;cAKLC,UAAU,EAAE,IALP;cAMLC,MAAM,sBACHrQ,OAAK,CAACO,EAAP,EAAYjB,QAPT;cASLyd,UAAU,EAAEzd,OAAK,CAAC0J,MATb;cAULgU,aAAa,EAAE,EAVV;cAWLC,aAAa,EAAE,EAXV;cAYL1L,eAAe,EAAE;aAZnB;UAAA;YAAAqL;YAAA,OAgBiBO,SAAS,CAAC1I,OAAD,EAAUja,QAAV,EAAoB2G,OAApB,EAA6Bub,cAA7B,CAA5B;UAAA;YAAIxZ,MAAM;YAAA,KACNka,UAAU,CAACla,MAAD,CAAd;cAAA0Z;cAAA;YAAA;YAAA,mCACS1Z,MAAP;UAAA;YAAA,mCAMF2U;cAASrd,QAAT,EAASA,QAAT;cAAmBsG;YAAnB,GAAgCoC,MAAhC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACD;IAAA;EAAA;EAAA,SAsBcma,UAAfA;IAAA;EAAA;EAAA;IAAAC,4FACE7I,OADF,EAKwD8I;MAAA;MAAA;QAAA;UAAA;YAAAC,4BAAF,EAAE,WAFpD7H,OADF,SACEA,OADF,EAEE+G;YAGErf,GAAG,GAAG,IAAIlC,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,CAAV;YACIqY,MAAM,GAAGjB,OAAO,CAACiB,MAArB;YACIlb,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACqC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B;YACI8D,OAAO,GAAGP,WAAW,CAAC8N,UAAD,EAAalU,QAAb,EAAuBsG,QAAvB,CAAzB,EALsD;YAAA,MAQlD,CAAC6b,aAAa,CAACjH,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAArC,IAA+CA,MAAM,KAAK,SAA9D;cAAA+H;cAAA;YAAA;YAAA,MACQlO,sBAAsB,CAAC,GAAD,EAAM;cAAEmG;YAAF,CAAN,CAA5B;UAAA;YAAA,IACUvU,OAAL;cAAAsc;cAAA;YAAA;YAAA,MACClO,sBAAsB,CAAC,GAAD,EAAM;cAAE7U,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAA5B;UAAA;YAGEmK,KAAK,GAAG8Q,OAAO,GACfxU,OAAO,CAACuc,IAAR,CAAchO,WAAD;cAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAeoV,OAAnC;YAAA,EADe,GAEfJ,cAAc,CAACpU,OAAD,EAAU3G,QAAV,CAFlB;YAAA,MAIImb,OAAO,IAAI,CAAC9Q,KAAhB;cAAA4Y;cAAA;YAAA;YAAA,MACQlO,sBAAsB,CAAC,GAAD,EAAM;cAChC7U,QAAQ,EAAEF,QAAQ,CAACE,QADa;cAEhCib;YAFgC,CAAN,CAA5B;UAAA;YAAA,IAIU9Q,KAAL;cAAA4Y;cAAA;YAAA;YAAA,MAEClO,sBAAsB,CAAC,GAAD,EAAM;cAAE7U,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAA5B;UAAA;YAAA+iB;YAAA,OAGiBN,SAAS,CAC1B1I,OAD0B,EAE1Bja,QAF0B,EAG1B2G,OAH0B,EAI1Bub,cAJ0B,EAK1B7X,KAL0B,CAA5B;UAAA;YAAI3B,MAAM;YAAA,KAONka,UAAU,CAACla,MAAD,CAAd;cAAAua;cAAA;YAAA;YAAA,mCACSva,MAAP;UAAA;YAGE5D,KAAK,GAAG4D,MAAM,CAACmN,MAAP,GAAgBtL,MAAM,CAAC4Y,MAAP,CAAcza,MAAM,CAACmN,MAArB,EAA6B,CAA7B,CAAhB,GAAkD1W,SAA9D;YAAA,MACI2F,KAAK,KAAK3F,SAAd;cAAA8jB;cAAA;YAAA;YAAA,MAKQne,KAAN;UAAA;YAAA,KAIE4D,MAAM,CAACkN,UAAX;cAAAqN;cAAA;YAAA;YAAA,mCACS1Y,MAAM,CAAC4Y,MAAP,CAAcza,MAAM,CAACkN,UAArB,CAAiC,EAAjC,CAAP;UAAA;YAAA,KAGElN,MAAM,CAACiN,UAAX;cAAAsN;cAAA;YAAA;YACM5U,IAAI,GAAG9D,MAAM,CAAC4Y,MAAP,CAAcza,MAAM,CAACiN,UAArB,CAAiC,EAAjC,CAAX;YACA,IAAIjN,+BAAM,CAACqO,eAAX,KAAI,8BAAyB1M,KAAK,CAAC7E,KAAN,CAAYO,EAArC,CAAJ,EAA8C;cAC5CsI,IAAI,CAACuT,sBAAD,CAAJ,GAA+BlZ,MAAM,CAACqO,eAAP,CAAuB1M,KAAK,CAAC7E,KAAN,CAAYO,EAAnC,CAA/B;YACD;YAAA,mCACMsI,IAAP;UAAA;YAAA,mCAGKlP,SAAP;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACD;IAAA;EAAA;EAAA,SAEcwjB,SAAfA;IAAA;EAAA;EAAA;IAAAS,2FACEnJ,OADF,EAEEja,QAFF,EAGE2G,OAHF,EAIEub,cAJF,EAKEmB,UALF;MAAA;MAAA;QAAA;UAAA;YAOEpe,SAAS,CACPgV,OAAO,CAAClK,MADD,EAEP,sEAFO,CAAT;YAAAuT;YAAA,KAMMtL,gBAAgB,CAACiC,OAAO,CAACiB,MAAR,CAAe9O,WAAf,EAAD,CAApB;cAAAkX;cAAA;YAAA;YAAAA;YAAA,OACqBC,MAAM,CACvBtJ,OADuB,EAEvBtT,OAFuB,EAGvB0c,UAAU,IAAItI,cAAc,CAACpU,OAAD,EAAU3G,QAAV,CAHL,EAIvBkiB,cAJuB,EAKvBmB,UAAU,IAAI,IALS,CAAzB;UAAA;YAAI3a,OAAM;YAAA,mCAOHA,OAAP;UAAA;YAAA4a;YAAA,OAGiBE,aAAa,CAC9BvJ,OAD8B,EAE9BtT,OAF8B,EAG9Bub,cAH8B,EAI9BmB,UAJ8B,CAAhC;UAAA;YAAI3a,MAAM;YAAA,mCAMHka,UAAU,CAACla,MAAD,CAAV,GACHA,MADG,gBAGEA,MAHF;cAIDkN,UAAU,EAAE,IAJX;cAKD6M,aAAa,EAAE;aALrB;UAAA;YAAAa;YAAAA;YAAA,KAWIG,oBAAoB,eAAxB;cAAAH;cAAA;YAAA;YAAA,MACM9f,cAAEyX,IAAF,KAAW7V,UAAU,CAACN,KAAtB,IAA+B,CAAC4e,kBAAkB,CAAClgB,cAAEmgB,QAAH,CAAtD;cAAAL;cAAA;YAAA;YAAA,MACQ9f,cAAEmgB,QAAR;UAAA;YAAA,mCAEKngB,cAAEmgB,QAAT;UAAA;YAAA,KAIED,kBAAkB,eAAtB;cAAAJ;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAKH;IAAA;EAAA;EAAA,SAEcC,MAAfA;IAAA;EAAA;EAAA;IAAAK,wFACE3J,OADF,EAEEtT,OAFF,EAGEmU,WAHF,EAIEoH,cAJF,EAKE2B,cALF;MAAA;MAAA;QAAA;UAAA;YAAA,MASM,CAAC/I,WAAW,CAACtV,KAAZ,CAAkBlG,MAAnB,IAA6B,CAACwb,WAAW,CAACtV,KAAZ,CAAkB2P,IAApD;cAAA2O;cAAA;YAAA;YACMhf,KAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;cACtCmG,MAAM,EAAEjB,OAAO,CAACiB,MADsB;cAEtChb,QAAQ,EAAE,IAAIS,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,EAAqB3C,QAFO;cAGtCib,OAAO,EAAEL,WAAW,CAACtV,KAAZ,CAAkBO;YAHW,CAAN,CAAlC;YAAA,KAKI8d,cAAJ;cAAAC;cAAA;YAAA;YAAA,MACQhf,KAAN;UAAA;YAEF4D,MAAM,GAAG;cACPuS,IAAI,EAAE7V,UAAU,CAACN,KADV;cAEPA;aAFF;YAAAgf;YAAA;UAAA;YAAAA;YAAA,OAKe1I,kBAAkB,CAC/B,QAD+B,EAE/BnB,OAF+B,EAG/Ba,WAH+B,EAI/BnU,OAJ+B,EAK/Bd,QAL+B,EAM/BF,kBAN+B,EAO/BW,QAP+B,EAQ/B,IAR+B,EAS/Bud,cAT+B,EAU/B3B,cAV+B,CAAjC;UAAA;YAAAxZ,MAAM;YAAA,KAaFuR,OAAO,CAAClK,MAAR,CAAee,OAAnB;cAAAgT;cAAA;YAAA;YACM5I,MAAM,GAAG2I,cAAc,GAAG,YAAH,GAAkB,OAA7C;YAAA,MACM,IAAIzgB,KAAJ,CAAa8X,MAAb,GAAN;UAAA;YAAA,KAIAG,gBAAgB,CAAC3S,MAAD,CAApB;cAAAob;cAAA;YAAA;YAAA,MAKQ,IAAIjV,QAAJ,CAAa,IAAb,EAAmB;cACvBL,MAAM,EAAE9F,MAAM,CAAC8F,MADQ;cAEvBC,OAAO,EAAE;gBACPsV,QAAQ,EAAErb,MAAM,CAAC1I;cADV;YAFc,CAAnB,CAAN;UAAA;YAAA,KAQEyb,gBAAgB,CAAC/S,MAAD,CAApB;cAAAob;cAAA;YAAA;YACMhf,OAAK,GAAGiQ,sBAAsB,CAAC,GAAD,EAAM;cAAEkG,IAAI,EAAE;YAAR,CAAN,CAAlC;YAAA,KACI4I,cAAJ;cAAAC;cAAA;YAAA;YAAA,MACQhf,OAAN;UAAA;YAEF4D,MAAM,GAAG;cACPuS,IAAI,EAAE7V,UAAU,CAACN,KADV;cAEPA;aAFF;UAAA;YAAA,KAME+e,cAAJ;cAAAC;cAAA;YAAA;YAAA,KAGMvI,aAAa,CAAC7S,MAAD,CAAjB;cAAAob;cAAA;YAAA;YAAA,MACQpb,MAAM,CAAC5D,KAAb;UAAA;YAAA,mCAGK;cACL6B,OAAO,EAAE,CAACmU,WAAD,CADJ;cAELnF,UAAU,EAAE,EAFP;cAGLC,UAAU,sBAAKkF,WAAW,CAACtV,KAAZ,CAAkBO,EAAnB,EAAwB2C,MAAM,CAAC2F,KAHxC;cAILwH,MAAM,EAAE,IAJH;cAKL;cACA;cACA0M,UAAU,EAAE,GAPP;cAQLC,aAAa,EAAE,EARV;cASLC,aAAa,EAAE,EATV;cAUL1L,eAAe,EAAE;aAVnB;UAAA;YAAA,KAcEwE,aAAa,CAAC7S,MAAD,CAAjB;cAAAob;cAAA;YAAA;YACE;YACA;YACItI,aAAa,GAAGrB,mBAAmB,CAACxT,OAAD,EAAUmU,WAAW,CAACtV,KAAZ,CAAkBO,EAA5B,CAAvC;YAAA+d;YAAA,OACoBN,aAAa,CAC/BvJ,OAD+B,EAE/BtT,OAF+B,EAG/Bub,cAH+B,EAI/B/iB,SAJ+B,sBAM5Bqc,aAAa,CAAChW,KAAd,CAAoBO,EAArB,EAA0B2C,MAAM,CAAC5D,OANrC;UAAA;YAAIkf,UAAO;YAAA,mCAWX3G,aACK2G,UADL;cAEEzB,UAAU,EAAE9P,oBAAoB,CAAC/J,MAAM,CAAC5D,KAAR,CAApB,GACR4D,MAAM,CAAC5D,KAAP,CAAa0J,MADL,GAER,GAJN;cAKEoH,UAAU,EAAE,IALd;cAME6M,aAAa,EACP/Z,mBAAM,CAAC+F,OAAP,uBAAoBqM,WAAW,CAACtV,KAAZ,CAAkBO,EAAnB,EAAwB2C,MAAM,CAAC+F,WAAY,EADvD;YANf;UAAA;YAjGqB;YA8GnBwV,aAAa,GAAG,IAAIxJ,OAAJ,CAAYR,OAAO,CAACpX,GAApB,EAAyB;cAC3C4L,OAAO,EAAEwL,OAAO,CAACxL,OAD0B;cAE3C4D,QAAQ,EAAE4H,OAAO,CAAC5H,QAFyB;cAG3CtC,MAAM,EAAEkK,OAAO,CAAClK;YAH2B,CAAzB,CAApB;YAAA+T;YAAA,OAKoBN,aAAa,CAACS,aAAD,EAAgBtd,OAAhB,EAAyBub,cAAzB,CAAjC;UAAA;YAAI8B,OAAO;YAAA,mCAEX3G,aACK2G,OADL,EAGMtb,MAAM,CAAC6Z,UAAP,GAAoB;cAAEA,UAAU,EAAE7Z,MAAM,CAAC6Z;YAArB,CAApB,GAAwD,EAH9D;cAIE3M,UAAU,sBACPkF,WAAW,CAACtV,KAAZ,CAAkBO,EAAnB,EAAwB2C,MAAM,CAAC2F,KALnC;cAOEoU,aAAa,EACP/Z,mBAAM,CAAC+F,OAAP,uBAAoBqM,WAAW,CAACtV,KAAZ,CAAkBO,EAAnB,EAAwB2C,MAAM,CAAC+F,WAAY,EADvD;YAPf;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAWD;IAAA;EAAA;EAAA,SAEc+U,aAAfA;IAAA;EAAA;EAAA;IAAAU,+FACEjK,OADF,EAEEtT,OAFF,EAGEub,cAHF,EAIEmB,UAJF,EAKE7I,kBALF;MAAA;MAAA;QAAA;UAAA;YAaMqJ,cAAc,GAAGR,UAAU,IAAI,IAAnC,EAR8B;YAAA,MAY5BQ,cAAc,IACd,EAACR,UAAD,YAACA,UAAU,CAAE7d,KAAZ,CAAkB4P,MAAnB,CADA,IAEA,EAACiO,UAAD,IAACA,kBAAU,CAAE7d,KAAZ,CAAkB2P,IAAnB,CAHF;cAAAgP;cAAA;YAAA;YAAA,MAKQpP,sBAAsB,CAAC,GAAD,EAAM;cAChCmG,MAAM,EAAEjB,OAAO,CAACiB,MADgB;cAEhChb,QAAQ,EAAE,IAAIS,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,EAAqB3C,QAFC;cAGhCib,OAAO,EAAEkI,UAAF,oBAAEA,UAAU,CAAE7d,KAAZ,CAAkBO;YAHK,CAAN,CAA5B;UAAA;YAOE6X,cAAc,GAAGyF,UAAU,GAC3B,CAACA,UAAD,CAD2B,GAE3Be,6BAA6B,CAC3Bzd,OAD2B,EAE3B4D,MAAM,CAAC2N,IAAP,CAAYsC,kBAAkB,IAAI,EAAlC,EAAsC,CAAtC,CAF2B,CAFjC;YAMIsB,aAAa,GAAG8B,cAAc,CAAClU,MAAf,CACjBwL,WAAD;cAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQ4P,MAAR,IAAkBF,CAAC,CAAC1P,KAAF,CAAQ2P,IADf;YAAA,EAApB,EA7B8B;YAAA,MAkC1B2G,aAAa,CAACzc,MAAd,KAAyB,CAA7B;cAAA8kB;cAAA;YAAA;YAAA,mCACS;cACLxd,OADK,EACLA,OADK;cAEL;cACAgP,UAAU,EAAEhP,OAAO,CAACgD,MAAR,CACV,UAACqG,GAAD,EAAMkF,CAAN;gBAAA,OAAY3K,MAAM,CAACxF,MAAP,CAAciL,GAAd,sBAAsBkF,CAAC,CAAC1P,KAAF,CAAQO,EAAT,EAAc,MADrC;cAAA,GAEV,EAFU,CAHP;cAOL8P,MAAM,EAAE2E,kBAAkB,IAAI,IAPzB;cAQL+H,UAAU,EAAE,GARP;cASLC,aAAa,EAAE,EATV;cAULzL,eAAe,EAAE;aAVnB;UAAA;YAAAoN;YAAA,OAckB3U,OAAO,CAACqQ,GAAR,oBACf/D,aAAa,CAAChd,GAAd,CAAmBuL,eAAD;cAAA,OACnB+Q,kBAAkB,CAChB,QADgB,EAEhBnB,OAFgB,EAGhB5P,KAHgB,EAIhB1D,OAJgB,EAKhBd,QALgB,EAMhBF,kBANgB,EAOhBW,QAPgB,EAQhB,IARgB,EAShBud,cATgB,EAUhB3B,cAVgB,CADjB;YAAA,EAD2B,EAAhC;UAAA;YAAIvF,OAAO;YAAA,KAiBP1C,OAAO,CAAClK,MAAR,CAAee,OAAnB;cAAAqT;cAAA;YAAA;YACMjJ,MAAM,GAAG2I,cAAc,GAAG,YAAH,GAAkB,OAA7C;YAAA,MACM,IAAIzgB,KAAJ,CAAa8X,MAAb,GAAN;UAAA;YApE4B;YAwE1BnE,eAAe,GAAG,IAAIhB,GAAJ,EAAtB;YACIiO,OAAO,GAAGK,sBAAsB,CAClC1d,OADkC,EAElCmV,aAFkC,EAGlCa,OAHkC,EAIlCnC,kBAJkC,EAKlCzD,eALkC,CAApC,EAzE8B;YAkF1BuN,eAAe,GAAG,IAAIhf,GAAJ,CACpBwW,aAAa,CAAChd,GAAd,CAAmBuL,eAAD;cAAA,OAAWA,KAAK,CAAC7E,KAAN,CAAYO,EAAzC;YAAA,EADoB,CAAtB;YAGAY,OAAO,CAACgB,OAAR,CAAiB0C,eAAD,EAAU;cACxB,IAAI,CAACia,eAAe,CAAC3V,GAAhB,CAAoBtE,KAAK,CAAC7E,KAAN,CAAYO,EAAhC,CAAL,EAA0C;gBACxCie,OAAO,CAACrO,UAAR,CAAmBtL,KAAK,CAAC7E,KAAN,CAAYO,EAA/B,IAAqC,IAArC;cACD;aAHH;YAAA,mCAMAsX,aACK2G,OADL;cAEErd,OAFF,EAEEA,OAFF;cAGEoQ,eAAe,EACbA,eAAe,CAACjF,IAAhB,GAAuB,CAAvB,GACIvH,MAAM,CAACga,WAAP,CAAmBxN,eAAe,CAAClY,OAAhB,EAAnB,CADJ,GAEI;YANR;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAQD;IAAA;EAAA;EAED,OAAO;IACLqV,UADK,EACLA,UADK;IAEL4N,KAFK,EAELA,KAFK;IAGLe;GAHF;AAKD;AAID;AACA;AACA;;AAEA;;;AAGG;;SACa2B,0BACd9e,QACAse,SACAlf,OAAU;EAEV,IAAI2f,UAAU,gBACTT,OADS;IAEZzB,UAAU,EAAE,GAFA;IAGZ1M,MAAM,sBACHmO,OAAO,CAACU,0BAAR,IAAsChf,MAAM,CAAC,CAAD,CAAN,CAAUK,EAAjD,EAAsDjB;GAJ1D;EAOA,OAAO2f,UAAP;AACD;AAED,SAASE,sBAATA,CACElM,IADF,EAC6B;EAE3B,OAAOA,IAAI,IAAI,IAAR,IAAgB,cAAcA,IAArC;AACD;AAED,SAASG,WAATA,CACE5Y,QADF,EAEE2G,OAFF,EAGEL,QAHF,EAIEse,eAJF,EAKE9kB,EALF,EAME+Y,WANF,EAOEC,QAPF,EAOgC;EAE9B,IAAI+L,iBAAJ;EACA,IAAIC,gBAAJ;EACA,IAAIjM,WAAW,IAAI,IAAf,IAAuBC,QAAQ,KAAK,MAAxC,EAAgD;IAC9C;IACA;IACA;IACA;IACA+L,iBAAiB,GAAG,EAApB;IAAA,4CACkBle,OAAlB;MAAAoe;IAAA;MAAA,uDAA2B;QAAA,IAAlB1a,KAAT;QACEwa,iBAAiB,CAAC5jB,IAAlB,CAAuBoJ,KAAvB;QACA,IAAIA,KAAK,CAAC7E,KAAN,CAAYO,EAAZ,KAAmB8S,WAAvB,EAAoC;UAClCiM,gBAAgB,GAAGza,KAAnB;UACA;QACD;MACF;IAAA;MAAA2a;IAAA;MAAAA;IAAA;EACF,CAbD,MAaO;IACLH,iBAAiB,GAAGle,OAApB;IACAme,gBAAgB,GAAGne,OAAO,CAACA,OAAO,CAACtH,MAAR,GAAiB,CAAlB,CAA1B;EACD,CApB6B;;EAuB9B,IAAIwB,IAAI,GAAGyM,SAAS,CAClBxN,EAAE,GAAGA,EAAH,GAAQ,GADQ,EAElBuN,0BAA0B,CAACwX,iBAAD,CAA1B,CAA8C/lB,GAA9C,CAAmDoW,WAAD;IAAA,OAAOA,CAAC,CAACzK,YAA3D;EAAA,EAFkB,EAGlBzK,QAAQ,CAACE,QAHS,EAIlB4Y,QAAQ,KAAK,MAJK,CAApB,CAvB8B;EA+B9B;EACA;;EACA,IAAIhZ,EAAE,IAAI,IAAV,EAAgB;IACde,IAAI,CAACE,MAAL,GAAcf,QAAQ,CAACe,MAAvB;IACAF,IAAI,CAACG,IAAL,GAAYhB,QAAQ,CAACgB,IAArB;EACD,CApC6B;;EAuC9B,IACE,CAAClB,EAAE,IAAI,IAAN,IAAcA,EAAE,KAAK,EAArB,IAA2BA,EAAE,KAAK,GAAnC,KACAglB,gBADA,IAEAA,gBAAgB,CAACtf,KAAjB,CAAuBxG,KAFvB,IAGA,CAACimB,kBAAkB,CAACpkB,IAAI,CAACE,MAAN,CAJrB,EAKE;IACAF,IAAI,CAACE,MAAL,GAAcF,IAAI,CAACE,MAAL,GACVF,IAAI,CAACE,MAAL,CAAYO,OAAZ,CAAoB,KAApB,EAA2B,SAA3B,CADU,GAEV,QAFJ;EAGD,CAhD6B;EAmD9B;EACA;EACA;;EACA,IAAIsjB,eAAe,IAAIte,QAAQ,KAAK,GAApC,EAAyC;IACvCzF,IAAI,CAACX,QAAL,GACEW,IAAI,CAACX,QAAL,KAAkB,GAAlB,GAAwBoG,QAAxB,GAAmCgB,SAAS,CAAC,CAAChB,QAAD,EAAWzF,IAAI,CAACX,QAAhB,CAAD,CAD9C;EAED;EAED,OAAOM,UAAU,CAACK,IAAD,CAAjB;AACD;AAGD;;AACA,SAASmY,wBAATA,CACEkM,mBADF,EAEEC,SAFF,EAGEtkB,IAHF,EAIE4X,IAJF,EAI8B;EAM5B;EACA,IAAI,CAACA,IAAD,IAAS,CAACkM,sBAAsB,CAAClM,IAAD,CAApC,EAA4C;IAC1C,OAAO;MAAE5X;KAAT;EACD;EAED,IAAI4X,IAAI,CAACxF,UAAL,IAAmB,CAACkP,aAAa,CAAC1J,IAAI,CAACxF,UAAN,CAArC,EAAwD;IACtD,OAAO;MACLpS,IADK,EACLA,IADK;MAELiE,KAAK,EAAEiQ,sBAAsB,CAAC,GAAD,EAAM;QAAEmG,MAAM,EAAEzC,IAAI,CAACxF;OAArB;KAF/B;EAID,CAhB2B;;EAmB5B,IAAIgG,UAAJ;EACA,IAAIR,IAAI,CAACrF,QAAT,EAAmB;IACjB,IAAIH,UAAU,GAAGwF,IAAI,CAACxF,UAAL,IAAmB,KAApC;IACAgG,UAAU,GAAG;MACXhG,UAAU,EAAEiS,mBAAmB,GAC1BjS,UAAU,CAACmS,WAAX,EAD0B,GAE1BnS,UAAU,CAAC7G,WAAX,EAHM;MAIX8G,UAAU,EAAEmS,iBAAiB,CAACxkB,IAAD,CAJlB;MAKXsS,WAAW,EACRsF,IAAI,IAAIA,IAAI,CAACtF,WAAd,IAA8B,mCANrB;MAOXC,QAAQ,EAAEqF,IAAI,CAACrF;KAPjB;IAUA,IAAI4E,gBAAgB,CAACiB,UAAU,CAAChG,UAAZ,CAApB,EAA6C;MAC3C,OAAO;QAAEpS,IAAF,EAAEA,IAAF;QAAQoY;OAAf;IACD;EACF,CAnC2B;;EAsC5B,IAAI/U,UAAU,GAAGpD,SAAS,CAACD,IAAD,CAA1B;EACA,IAAIykB,YAAY,GAAGC,6BAA6B,CAAC9M,IAAI,CAACrF,QAAN,CAAhD,CAvC4B;EAyC5B;EACA;;EACA,IAAI+R,SAAS,IAAIjhB,UAAU,CAACnD,MAAxB,IAAkCkkB,kBAAkB,CAAC/gB,UAAU,CAACnD,MAAZ,CAAxD,EAA6E;IAC3EukB,YAAY,CAACE,MAAb,CAAoB,OAApB,EAA6B,EAA7B;EACD;EACDthB,UAAU,CAACnD,MAAX,SAAwBukB,YAAxB;EAEA,OAAO;IAAEzkB,IAAI,EAAEL,UAAU,CAAC0D,UAAD,CAAlB;IAAgC+U;GAAvC;AACD;AAGD;;AACA,SAASmL,6BAATA,CACEzd,OADF,EAEE8e,UAFF,EAEqB;EAEnB,IAAIC,eAAe,GAAG/e,OAAtB;EACA,IAAI8e,UAAJ,EAAgB;IACd,IAAIzmB,KAAK,GAAG2H,OAAO,CAACgf,SAAR,CAAmBzQ,WAAD;MAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAe0f,UAAxC;IAAA,EAAZ;IACA,IAAIzmB,KAAK,IAAI,CAAb,EAAgB;MACd0mB,eAAe,GAAG/e,OAAO,CAAC3D,KAAR,CAAc,CAAd,EAAiBhE,KAAjB,CAAlB;IACD;EACF;EACD,OAAO0mB,eAAP;AACD;AAED,SAAS7J,gBAATA,CACEpb,OADF,EAEEvB,KAFF,EAGEyH,OAHF,EAIEsS,UAJF,EAKEjZ,QALF,EAMEsW,sBANF,EAOEC,uBAPF,EAQEC,qBARF,EASEM,gBATF,EAUE4C,WAVF,EAWEpT,QAXF,EAYEiU,iBAZF,EAaEpB,YAbF,EAa0B;EAExB,IAAI8E,YAAY,GAAG9E,YAAY,GAC3B5O,MAAM,CAAC4Y,MAAP,CAAchK,YAAd,EAA4B,CAA5B,CAD2B,GAE3BoB,iBAAiB,GACjBhQ,MAAM,CAAC4Y,MAAP,CAAc5I,iBAAd,CAAiC,EAAjC,CADiB,GAEjBpb,SAJJ;EAMA,IAAIymB,UAAU,GAAGnlB,OAAO,CAACC,SAAR,CAAkBxB,KAAK,CAACc,QAAxB,CAAjB;EACA,IAAI6lB,OAAO,GAAGplB,OAAO,CAACC,SAAR,CAAkBV,QAAlB,CAAd,CATwB;;EAYxB,IAAIylB,UAAU,GAAGtM,YAAY,GAAG5O,MAAM,CAAC2N,IAAP,CAAYiB,YAAZ,EAA0B,CAA1B,CAAH,GAAkCha,SAA/D;EACA,IAAIumB,eAAe,GAAGtB,6BAA6B,CAACzd,OAAD,EAAU8e,UAAV,CAAnD;EAEA,IAAIK,iBAAiB,GAAGJ,eAAe,CAAChc,MAAhB,CAAuB,UAACW,KAAD,EAAQrL,KAAR,EAAiB;IAC9D,IAAIqL,KAAK,CAAC7E,KAAN,CAAY2P,IAAhB,EAAsB;MACpB;MACA,OAAO,IAAP;IACD;IACD,IAAI9K,KAAK,CAAC7E,KAAN,CAAY4P,MAAZ,IAAsB,IAA1B,EAAgC;MAC9B,OAAO,KAAP;IACD,CAP6D;;IAU9D,IACE2Q,WAAW,CAAC7mB,KAAK,CAACyW,UAAP,EAAmBzW,KAAK,CAACyH,OAAN,CAAc3H,KAAd,CAAnB,EAAyCqL,KAAzC,CAAX,IACAkM,uBAAuB,CAAC9M,IAAxB,CAA8B1D,YAAD;MAAA,OAAQA,EAAE,KAAKsE,KAAK,CAAC7E,KAAN,CAAYO,EAAxD;IAAA,EAFF,EAGE;MACA,OAAO,IAAP;IACD,CAf6D;IAkB9D;IACA;IACA;;IACA,IAAIigB,iBAAiB,GAAG9mB,KAAK,CAACyH,OAAN,CAAc3H,KAAd,CAAxB;IACA,IAAIinB,cAAc,GAAG5b,KAArB;IAEA,OAAO6b,sBAAsB,CAAC7b,KAAD;MAC3Bub,UAD2B,EAC3BA,UAD2B;MAE3BO,aAAa,EAAEH,iBAAiB,CAACxb,MAFN;MAG3Bqb,OAH2B,EAG3BA,OAH2B;MAI3BO,UAAU,EAAEH,cAAc,CAACzb;IAJA,GAKxByO,UALwB;MAM3BgF,YAN2B,EAM3BA,YAN2B;MAO3BoI,uBAAuB;MAAA;MAErB/P,sBAAsB;MAAA;MAEtBsP,UAAU,CAACjiB,QAAX,OAA0BkiB,OAAO,CAACliB,QAAR,EAF1B;MAAA;MAIAiiB,UAAU,CAAC7kB,MAAX,KAAsB8kB,OAAO,CAAC9kB,MAJ9B,IAKAulB,kBAAkB,CAACN,iBAAD,EAAoBC,cAApB;KAdtB;GAxBsB,CAAxB,CAfwB;;EA0DxB,IAAIlK,oBAAoB,GAA0B,EAAlD;EACAjF,gBAAgB,CAACnP,OAAjB,CAAyB,UAAC4U,CAAD,EAAIxc,GAAJ,EAAW;IAClC;IACA,IAAI,CAAC4G,OAAO,CAAC8C,IAAR,CAAcyL,WAAD;MAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAewW,CAAC,CAACpB,OAArC;IAAA,EAAL,EAAoD;MAClD;IACD;IAED,IAAIoL,cAAc,GAAGngB,WAAW,CAACsT,WAAD,EAAc6C,CAAC,CAAC1b,IAAhB,EAAsByF,QAAtB,CAAhC,CANkC;IASlC;;IACA,IAAI,CAACigB,cAAL,EAAqB;MACnBxK,oBAAoB,CAAC9a,IAArB,CAA0B;QACxBlB,GADwB,EACxBA,GADwB;QAExBob,OAAO,EAAEoB,CAAC,CAACpB,OAFa;QAGxBta,IAAI,EAAE0b,CAAC,CAAC1b,IAHgB;QAIxB8F,OAAO,EAAE,IAJe;QAKxB0D,KAAK,EAAE,IALiB;QAMxBqF,UAAU,EAAE;OANd;MAQA;IACD;IAED,IAAI8W,YAAY,GAAGzL,cAAc,CAACwL,cAAD,EAAiBhK,CAAC,CAAC1b,IAAnB,CAAjC;IAEA,IAAI2V,qBAAqB,CAAC3O,QAAtB,CAA+B9H,GAA/B,CAAJ,EAAyC;MACvCgc,oBAAoB,CAAC9a,IAArB,CAA0B;QACxBlB,GADwB,EACxBA,GADwB;QAExBob,OAAO,EAAEoB,CAAC,CAACpB,OAFa;QAGxBta,IAAI,EAAE0b,CAAC,CAAC1b,IAHgB;QAIxB8F,OAAO,EAAE4f,cAJe;QAKxBlc,KAAK,EAAEmc,YALiB;QAMxB9W,UAAU,EAAE,IAAIC,eAAJ;OANd;MAQA;IACD,CAlCiC;IAqClC;IACA;IACA;;IACA,IAAI8W,gBAAgB,GAAGP,sBAAsB,CAACM,YAAD;MAC3CZ,UAD2C,EAC3CA,UAD2C;MAE3CO,aAAa,EAAEjnB,KAAK,CAACyH,OAAN,CAAczH,KAAK,CAACyH,OAAN,CAActH,MAAd,GAAuB,CAArC,EAAwCmL,MAFZ;MAG3Cqb,OAH2C,EAG3CA,OAH2C;MAI3CO,UAAU,EAAEzf,OAAO,CAACA,OAAO,CAACtH,MAAR,GAAiB,CAAlB,CAAP,CAA4BmL;IAJG,GAKxCyO,UALwC;MAM3CgF,YAN2C,EAM3CA,YAN2C;MAO3C;MACAoI,uBAAuB,EAAE/P;KAR3B;IAUA,IAAImQ,gBAAJ,EAAsB;MACpB1K,oBAAoB,CAAC9a,IAArB,CAA0B;QACxBlB,GADwB,EACxBA,GADwB;QAExBob,OAAO,EAAEoB,CAAC,CAACpB,OAFa;QAGxBta,IAAI,EAAE0b,CAAC,CAAC1b,IAHgB;QAIxB8F,OAAO,EAAE4f,cAJe;QAKxBlc,KAAK,EAAEmc,YALiB;QAMxB9W,UAAU,EAAE,IAAIC,eAAJ;OANd;IAQD;GA3DH;EA8DA,OAAO,CAACmW,iBAAD,EAAoB/J,oBAApB,CAAP;AACD;AAED,SAASgK,WAATA,CACEW,iBADF,EAEEC,YAFF,EAGEtc,KAHF,EAG+B;EAE7B,IAAIuc,KAAK;EAAA;EAEP,CAACD,YAAD;EAAA;EAEAtc,KAAK,CAAC7E,KAAN,CAAYO,EAAZ,KAAmB4gB,YAAY,CAACnhB,KAAb,CAAmBO,EAJxC,CAF6B;EAS7B;;EACA,IAAI8gB,aAAa,GAAGH,iBAAiB,CAACrc,KAAK,CAAC7E,KAAN,CAAYO,EAAb,CAAjB,KAAsC5G,SAA1D,CAV6B;;EAa7B,OAAOynB,KAAK,IAAIC,aAAhB;AACD;AAED,SAASP,kBAATA,CACEK,YADF,EAEEtc,KAFF,EAE+B;EAE7B,IAAIyc,WAAW,GAAGH,YAAY,CAACnhB,KAAb,CAAmB3E,IAArC;EACA;IAAA;IAEE8lB,YAAY,CAACzmB,QAAb,KAA0BmK,KAAK,CAACnK,QAAhC;IAAA;IAEA;IACC4mB,WAAW,IAAI,IAAf,IACCA,WAAW,CAACve,QAAZ,CAAqB,GAArB,CADD,IAECoe,YAAY,CAACnc,MAAb,CAAoB,GAApB,MAA6BH,KAAK,CAACG,MAAN,CAAa,GAAb;EAAA;AAElC;AAED,SAAS0b,sBAATA,CACEa,WADF,EAEEC,GAFF,EAE8C;EAE5C,IAAID,WAAW,CAACvhB,KAAZ,CAAkBihB,gBAAtB,EAAwC;IACtC,IAAIQ,WAAW,GAAGF,WAAW,CAACvhB,KAAZ,CAAkBihB,gBAAlB,CAAmCO,GAAnC,CAAlB;IACA,IAAI,OAAOC,WAAP,KAAuB,SAA3B,EAAsC;MACpC,OAAOA,WAAP;IACD;EACF;EAED,OAAOD,GAAG,CAACX,uBAAX;AACD;AAED;;;;AAIG;AAJH,SAKea,mBAAfA;EAAA;AAAA;AAAA;EAAAC,qGACE3hB,KADF,EAEEG,kBAFF,EAGEE,QAHF;IAAA;IAAA;MAAA;QAAA;UAAA,IAKOL,KAAK,CAAC2P,IAAX;YAAAiS;YAAA;UAAA;UAAA;QAAA;UAAAA;UAAA,OAIsB5hB,KAAK,CAAC2P,IAAN,EAAtB;QAAA;UAAIkS,SAAS;UAAA,IAKR7hB,KAAK,CAAC2P,IAAX;YAAAiS;YAAA;UAAA;UAAA;QAAA;UAIIE,aAAa,GAAGzhB,QAAQ,CAACL,KAAK,CAACO,EAAP,CAA5B;UACAd,SAAS,CAACqiB,aAAD,EAAgB,4BAAhB,CAAT,CAhBuB;UAmBvB;UACA;UACA;UACA;UACA;UACA;UACA;UACIC,YAAY,GAAwB,EAAxC;UACA,KAASC,iBAAT,IAA8BH,SAA9B,EAAyC;YACnCI,gBAAgB,GAClBH,aAAa,CAACE,iBAAD,CADf;YAGIE,2BAA2B,GAC7BD,gBAAgB,KAAKtoB,SAArB;YAAA;YAEA;YACAqoB,iBAAiB,KAAK,kBAJxB;YAMArnB,OAAO,CACL,CAACunB,2BADI,EAEL,UAAUJ,gBAAa,CAACvhB,EAAxB,GAAsDyhB,iDAAtD,GAE8BA,yIAF9B,yBAFK,CAAP;YAOA,IACE,CAACE,2BAAD,IACA,CAACriB,kBAAkB,CAACsJ,GAAnB,CAAuB6Y,iBAAvB,CAFH,EAGE;cACAD,YAAY,CAACC,iBAAD,CAAZ,GACEH,SAAS,CAACG,iBAAD,CADX;YAED;UACF,CAnDsB;UAsDvB;;UACAjd,MAAM,CAACxF,MAAP,CAAcuiB,aAAd,EAA6BC,YAA7B,EAvDuB;UA0DvB;UACA;;UACAhd,MAAM,CAACxF,MAAP,CAAcuiB,aAAd,eAKK3hB,kBAAkB,CAAC2hB,aAAD,CALvB;YAMEnS,IAAI,EAAEhW;UANR;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAQD;EAAA;AAAA;AAAA,SAEcic,kBAAfA;EAAA;AAAA,EA8LC;AAGD;AACA;AAAA;EAAAuM,iFAlMA,mBACE1M,IADF,EAEEhB,OAFF,EAGE5P,KAHF,EAIE1D,OAJF,EAKEd,QALF,EAMEF,kBANF,EAOEW,QAPF,EAQEshB,eARF,EASE/D,cATF,EAUE3B,cAVF;IAAA;IAAA;MAAA;QAAA;UAU0B,IAFxB0F,eAEwB;YAFxBA,eAEwB,GAFG,KAEH;UAAA;UAAA,IADxB/D,cACwB;YADxBA,cACwB,GADE,KACF;UAAA;UAMpBgE,UAAU,GAAIC,SAAdD,UAAUA,CAAIC,OAAD,EAA6C;YAC5D;YACA,IAAIxY,MAAJ;YACA,IAAIC,YAAY,GAAG,IAAIC,OAAJ,CAAY,UAACxD,CAAD,EAAIyD,CAAJ;cAAA,OAAWH,MAAM,GAAGG,CAAhC;YAAA,EAAnB;YACAsY,QAAQ,GAAG;cAAA,OAAMzY,MAAM,EAAvB;YAAA;YACA2K,OAAO,CAAClK,MAAR,CAAe7K,gBAAf,CAAgC,OAAhC,EAAyC6iB,QAAzC;YACA,OAAOvY,OAAO,CAACe,IAAR,CAAa,CAClBuX,OAAO,CAAC;cAAE7N,OAAF,EAAEA,OAAF;cAAWzP,MAAM,EAAEH,KAAK,CAACG,MAAzB;cAAiCwZ,OAAO,EAAE9B;YAA1C,CAAD,CADW,EAElB3S,YAFkB,CAAb,CAAP;WANF;UAAAyY;UAaMF,OAAO,GAAGzd,KAAK,CAAC7E,KAAN,CAAYyV,IAAZ,CAAd;UAAA,KAEI5Q,KAAK,CAAC7E,KAAN,CAAY2P,IAAhB;YAAA6S;YAAA;UAAA;UAAA,KACMF,OAAJ;YAAAE;YAAA;UAAA;UAAAA;UAAA,OAEqBxY,OAAO,CAACqQ,GAAR,CAAY,CAC7BgI,UAAU,CAACC,OAAD,CADmB,EAE7BZ,mBAAmB,CAAC7c,KAAK,CAAC7E,KAAP,EAAcG,kBAAd,EAAkCE,QAAlC,CAFU,CAAZ,CAAnB;QAAA;UAAIsd,MAAM;UAIVza,MAAM,GAAGya,MAAM,CAAC,CAAD,CAAf;UAAA6E;UAAA;QAAA;UAAAA;UAAA,OAGMd,mBAAmB,CAAC7c,KAAK,CAAC7E,KAAP,EAAcG,kBAAd,EAAkCE,QAAlC,CAAzB;QAAA;UAEAiiB,OAAO,GAAGzd,KAAK,CAAC7E,KAAN,CAAYyV,IAAZ,CAAV;UAAA,KACI6M,OAAJ;YAAAE;YAAA;UAAA;UAAAA;UAAA,OAIiBH,UAAU,CAACC,OAAD,CAAzB;QAAA;UAAApf,MAAM;UAAAsf;UAAA;QAAA;UAAA,MACG/M,IAAI,KAAK,QAAb;YAAA+M;YAAA;UAAA;UACDnlB,GAAG,GAAG,IAAIlC,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,CAAV;UACI3C,QAAQ,GAAG2C,GAAG,CAAC3C,QAAJ,GAAe2C,GAAG,CAAC9B,MAAlC;UAAA,MACMgU,sBAAsB,CAAC,GAAD,EAAM;YAChCmG,MAAM,EAAEjB,OAAO,CAACiB,MADgB;YAEhChb,QAFgC,EAEhCA,QAFgC;YAGhCib,OAAO,EAAE9Q,KAAK,CAAC7E,KAAN,CAAYO;UAHW,CAAN,CAA5B;QAAA;UAAA,mCAQO;YAAEkV,IAAI,EAAE7V,UAAU,CAACiJ,IAAnB;YAAyBA,IAAI,EAAElP;WAAtC;QAAA;UAAA6oB;UAAA;QAAA;UAAA,IAGMF,OAAL;YAAAE;YAAA;UAAA;UACDnlB,IAAG,GAAG,IAAIlC,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,CAAV;UACI3C,SAAQ,GAAG2C,IAAG,CAAC3C,QAAJ,GAAe2C,IAAG,CAAC9B,MAAlC;UAAA,MACMgU,sBAAsB,CAAC,GAAD,EAAM;YAChC7U;UADgC,CAAN,CAA5B;QAAA;UAAA8nB;UAAA,OAIeH,UAAU,CAACC,OAAD,CAAzB;QAAA;UAAApf,MAAM;QAAA;UAGRzD,SAAS,CACPyD,MAAM,KAAKvJ,SADJ,EAEP,cAAe8b,QAAI,KAAK,QAAT,GAAoB,WAApB,GAAkC,UAAjD,4BACM5Q,KAAK,CAAC7E,KAAN,CAAYO,EADlB,iDACgEkV,IADhE,uDAFO,CAAT;UAAA+M;UAAA;QAAA;UAAAA;UAAAA;UAOAC,UAAU,GAAG7iB,UAAU,CAACN,KAAxB;UACA4D,MAAM,gBAAN;QAAA;UAAAsf;UAEA,IAAID,QAAJ,EAAc;YACZ9N,OAAO,CAAClK,MAAR,CAAe5K,mBAAf,CAAmC,OAAnC,EAA4C4iB,QAA5C;UACD;UAAA;QAAA;UAAA,KAGCnF,UAAU,CAACla,MAAD,CAAd;YAAAsf;YAAA;UAAA;UACMxZ,MAAM,GAAG9F,MAAM,CAAC8F,MAApB,EADsB;UAAA,KAIlBsE,mBAAmB,CAACnE,GAApB,CAAwBH,MAAxB,CAAJ;YAAAwZ;YAAA;UAAA;UACMhoB,QAAQ,GAAG0I,MAAM,CAAC+F,OAAP,CAAeoC,GAAf,CAAmB,UAAnB,CAAf;UACA5L,SAAS,CACPjF,QADO,EAEP,4EAFO,CAAT,CAFmC;;UAQnC,IAAI,CAACyT,kBAAkB,CAAC5J,IAAnB,CAAwB7J,QAAxB,CAAL,EAAwC;YACtCA,QAAQ,GAAG4Y,WAAW,CACpB,IAAIjY,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,CADoB,EAEpB8D,OAAO,CAAC3D,KAAR,CAAc,CAAd,EAAiB2D,OAAO,CAAC5D,OAAR,CAAgBsH,KAAhB,CAAyB,IAA1C,CAFoB,EAGpB/D,QAHoB,EAIpB,IAJoB,EAKpBtG,QALoB,CAAtB;UAOD,CARD,MAQO,IAAI,CAAC4nB,eAAL,EAAsB;YAC3B;YACA;YACA;YACIhC,UAAU,GAAG,IAAIjlB,GAAJ,CAAQsZ,OAAO,CAACpX,GAAhB,CAAjB;YACIA,KAAG,GAAG7C,QAAQ,CAACqH,UAAT,CAAoB,IAApB,CACN,OAAI1G,GAAJ,CAAQilB,UAAU,CAACsC,QAAX,GAAsBloB,QAA9B,CADM,GAEN,IAAIW,GAAJ,CAAQX,QAAR,CAFJ;YAGImoB,cAAc,GAAG5hB,aAAa,CAAC1D,KAAG,CAAC3C,QAAL,EAAeoG,QAAf,CAAb,IAAyC,IAA9D;YACA,IAAIzD,KAAG,CAACmC,MAAJ,KAAe4gB,UAAU,CAAC5gB,MAA1B,IAAoCmjB,cAAxC,EAAwD;cACtDnoB,QAAQ,GAAG6C,KAAG,CAAC3C,QAAJ,GAAe2C,KAAG,CAAC9B,MAAnB,GAA4B8B,KAAG,CAAC7B,IAA3C;YACD;UACF,CA5BkC;UA+BnC;UACA;UACA;UAAA,KACI4mB,eAAJ;YAAAI;YAAA;UAAA;UACEtf,MAAM,CAAC+F,OAAP,CAAeG,GAAf,CAAmB,UAAnB,EAA+B5O,QAA/B;UAAA,MACM0I,MAAN;QAAA;UAAA,mCAGK;YACLuS,IAAI,EAAE7V,UAAU,CAACiN,QADZ;YAEL7D,MAFK,EAELA,MAFK;YAGLxO,QAHK,EAGLA,QAHK;YAILoZ,UAAU,EAAE1Q,MAAM,CAAC+F,OAAP,CAAeoC,GAAf,CAAmB,oBAAnB,CAA6C;WAJ3D;QAAA;UAAA,KAWEgT,cAAJ;YAAAmE;YAAA;UAAA;UAAA,MAEQ;YACJ/M,IAAI,EAAEgN,UAAU,IAAI7iB,UAAU,CAACiJ,IAD3B;YAEJsV,QAAQ,EAAEjb;WAFZ;QAAA;UAOE0f,WAAW,GAAG1f,MAAM,CAAC+F,OAAP,CAAeoC,GAAf,CAAmB,cAAnB,CAAlB,EA/DsB;UAiEtB;UAAA,MACIuX,WAAW,IAAI,wBAAwBve,IAAxB,CAA6Bue,WAA7B,CAAnB;YAAAJ;YAAA;UAAA;UAAAA;UAAA,OACetf,MAAM,CAAC0F,IAAP,EAAb;QAAA;UAAAC,IAAI;UAAA2Z;UAAA;QAAA;UAAAA;UAAA,OAEStf,MAAM,CAAC2f,IAAP,EAAb;QAAA;UAAAha,IAAI;QAAA;UAAA,MAGF4Z,UAAU,KAAK7iB,UAAU,CAACN,KAA9B;YAAAkjB;YAAA;UAAA;UAAA,mCACS;YACL/M,IAAI,EAAEgN,UADD;YAELnjB,KAAK,EAAE,IAAIwN,aAAJ,CAAkB9D,MAAlB,EAA0B9F,MAAM,CAAC6J,UAAjC,EAA6ClE,IAA7C,CAFF;YAGLI,OAAO,EAAE/F,MAAM,CAAC+F;WAHlB;QAAA;UAAA,mCAOK;YACLwM,IAAI,EAAE7V,UAAU,CAACiJ,IADZ;YAELA,IAFK,EAELA,IAFK;YAGLkU,UAAU,EAAE7Z,MAAM,CAAC8F,MAHd;YAILC,OAAO,EAAE/F,MAAM,CAAC+F;WAJlB;QAAA;UAAA,MAQEwZ,UAAU,KAAK7iB,UAAU,CAACN,KAA9B;YAAAkjB;YAAA;UAAA;UAAA,mCACS;YAAE/M,IAAI,EAAEgN,UAAR;YAAoBnjB,KAAK,EAAE4D;WAAlC;QAAA;UAAA,KAGE4f,cAAc,CAAC5f,MAAD,CAAlB;YAAAsf;YAAA;UAAA;UAAA,mCACS;YACL/M,IAAI,EAAE7V,UAAU,CAACmjB,QADZ;YAELtL,YAAY,EAAEvU,MAFT;YAGL6Z,UAAU,kBAAE7Z,MAAM,CAAC4F,IAAT,qBAAEka,aAAaha,MAHpB;YAILC,OAAO,EAAE,wBAAM,CAACH,IAAP,KAAaG,qCAAb,KAAwB,IAAIC,OAAJ,CAAYhG,MAAM,CAAC4F,IAAP,CAAYG,OAAxB;WAJnC;QAAA;UAAA,mCAQK;YAAEwM,IAAI,EAAE7V,UAAU,CAACiJ,IAAnB;YAAyBA,IAAI,EAAE3F;WAAtC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACD;EAAA;AAAA;AAKD,SAASwR,uBAATA,CACEzZ,OADF,EAEET,QAFF,EAGE+P,MAHF,EAIEkJ,UAJF,EAIyB;EAEvB,IAAIpW,GAAG,GAAGpC,OAAO,CAACC,SAAR,CAAkB2kB,iBAAiB,CAACrlB,QAAD,CAAnC,CAA+C2D,SAA/C,EAAV;EACA,IAAI2K,IAAI,GAAgB;IAAEyB;GAA1B;EAEA,IAAIkJ,UAAU,IAAIjB,gBAAgB,CAACiB,UAAU,CAAChG,UAAZ,CAAlC,EAA2D;IACzD,IAAMA,UAAF,GAAwCgG,UAA5C,CAAMhG,UAAF;MAAcE,WAAd,GAAwC8F,UAA5C,CAAkB9F,WAAd;MAA2BC,WAAa6F,UAA5C,CAA+B7F,SAD0B;IAGzD;IACA;;IACA9E,IAAI,CAAC4M,MAAL,GAAcjI,UAAU,CAACmS,WAAX,EAAd;IACA9W,IAAI,CAACma,IAAL,GACEtV,WAAW,KAAK,mCAAhB,GACIoS,6BAA6B,CAACnS,QAAD,CADjC,GAEIA,QAHN;EAID,CAfsB;;EAkBvB,OAAO,IAAIqH,OAAJ,CAAY5X,GAAZ,EAAiByL,IAAjB,CAAP;AACD;AAED,SAASiX,6BAATA,CAAuCnS,QAAvC,EAAyD;EACvD,IAAIkS,YAAY,GAAG,IAAIoD,eAAJ,EAAnB;EAAA,4CAEyBtV,QAAQ,CAACvU,OAAT,EAAzB;IAAA8pB;EAAA;IAAA,uDAA6C;MAAA;QAAnC5oB,GAAD;QAAMmD,KAAN;MACP;MACAoiB,YAAY,CAACE,MAAb,CAAoBzlB,GAApB,EAAyBmD,KAAK,YAAY0lB,IAAjB,GAAwB1lB,KAAK,CAAC2lB,IAA9B,GAAqC3lB,KAA9D;IACD;EAAA;IAAA4lB;EAAA;IAAAA;EAAA;EAED,OAAOxD,YAAP;AACD;AAED,SAASjB,sBAATA,CACE1d,OADF,EAEEmV,aAFF,EAGEa,OAHF,EAIExD,YAJF,EAKEpC,eALF,EAK4C;EAO1C;EACA,IAAIpB,UAAU,GAA8B,EAA5C;EACA,IAAIE,MAAM,GAAiC,IAA3C;EACA,IAAI0M,UAAJ;EACA,IAAIwG,UAAU,GAAG,KAAjB;EACA,IAAIvG,aAAa,GAA4B,EAA7C,CAZ0C;;EAe1C7F,OAAO,CAAChV,OAAR,CAAgB,UAACe,MAAD,EAAS1J,KAAT,EAAkB;IAChC,IAAI+G,EAAE,GAAG+V,aAAa,CAAC9c,KAAD,CAAb,CAAqBwG,KAArB,CAA2BO,EAApC;IACAd,SAAS,CACP,CAACoW,gBAAgB,CAAC3S,MAAD,CADV,EAEP,qDAFO,CAAT;IAIA,IAAI6S,aAAa,CAAC7S,MAAD,CAAjB,EAA2B;MACzB;MACA;MACA,IAAI8S,aAAa,GAAGrB,mBAAmB,CAACxT,OAAD,EAAUZ,EAAV,CAAvC;MACA,IAAIjB,KAAK,GAAG4D,MAAM,CAAC5D,KAAnB,CAJyB;MAMzB;MACA;;MACA,IAAIqU,YAAJ,EAAkB;QAChBrU,KAAK,GAAGyF,MAAM,CAAC4Y,MAAP,CAAchK,YAAd,EAA4B,CAA5B,CAAR;QACAA,YAAY,GAAGha,SAAf;MACD;MAED0W,MAAM,GAAGA,MAAM,IAAI,EAAnB,CAbyB;;MAgBzB,IAAIA,MAAM,CAAC2F,aAAa,CAAChW,KAAd,CAAoBO,EAArB,CAAN,IAAkC,IAAtC,EAA4C;QAC1C8P,MAAM,CAAC2F,aAAa,CAAChW,KAAd,CAAoBO,EAArB,CAAN,GAAiCjB,KAAjC;MACD,CAlBwB;;MAqBzB6Q,UAAU,CAAC5P,EAAD,CAAV,GAAiB5G,SAAjB,CArByB;MAwBzB;;MACA,IAAI,CAAC4pB,UAAL,EAAiB;QACfA,UAAU,GAAG,IAAb;QACAxG,UAAU,GAAG9P,oBAAoB,CAAC/J,MAAM,CAAC5D,KAAR,CAApB,GACT4D,MAAM,CAAC5D,KAAP,CAAa0J,MADJ,GAET,GAFJ;MAGD;MACD,IAAI9F,MAAM,CAAC+F,OAAX,EAAoB;QAClB+T,aAAa,CAACzc,EAAD,CAAb,GAAoB2C,MAAM,CAAC+F,OAA3B;MACD;IACF,CAlCD,MAkCO;MACL,IAAIgN,gBAAgB,CAAC/S,MAAD,CAApB,EAA8B;QAC5BqO,eAAe,CAACnI,GAAhB,CAAoB7I,EAApB,EAAwB2C,MAAM,CAACuU,YAA/B;QACAtH,UAAU,CAAC5P,EAAD,CAAV,GAAiB2C,MAAM,CAACuU,YAAP,CAAoB5O,IAArC;MACD,CAHD,MAGO;QACLsH,UAAU,CAAC5P,EAAD,CAAV,GAAiB2C,MAAM,CAAC2F,IAAxB;MACD,CANI;MASL;;MACA,IACE3F,MAAM,CAAC6Z,UAAP,IAAqB,IAArB,IACA7Z,MAAM,CAAC6Z,UAAP,KAAsB,GADtB,IAEA,CAACwG,UAHH,EAIE;QACAxG,UAAU,GAAG7Z,MAAM,CAAC6Z,UAApB;MACD;MACD,IAAI7Z,MAAM,CAAC+F,OAAX,EAAoB;QAClB+T,aAAa,CAACzc,EAAD,CAAb,GAAoB2C,MAAM,CAAC+F,OAA3B;MACD;IACF;EACF,CA7DD,EAf0C;EA+E1C;EACA;;EACA,IAAI0K,YAAJ,EAAkB;IAChBtD,MAAM,GAAGsD,YAAT;IACAxD,UAAU,CAACpL,MAAM,CAAC2N,IAAP,CAAYiB,YAAZ,EAA0B,CAA1B,CAAD,CAAV,GAA2Cha,SAA3C;EACD;EAED,OAAO;IACLwW,UADK,EACLA,UADK;IAELE,MAFK,EAELA,MAFK;IAGL0M,UAAU,EAAEA,UAAU,IAAI,GAHrB;IAILC;GAJF;AAMD;AAED,SAASxF,iBAATA,CACE9d,KADF,EAEEyH,OAFF,EAGEmV,aAHF,EAIEa,OAJF,EAKExD,YALF,EAME4C,oBANF,EAOEc,cAPF,EAQE9F,eARF,EAQ4C;EAK1C,4BAA6BsN,sBAAsB,CACjD1d,OADiD,EAEjDmV,aAFiD,EAGjDa,OAHiD,EAIjDxD,YAJiD,EAKjDpC,eALiD,CAAnD;IAAMpB,UAAF,yBAAEA,UAAF;IAAcE,sCALwB;;EAc1C,KAAK,IAAI7W,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG+c,oBAAoB,CAAC1c,MAAjD,EAAyDL,KAAK,EAA9D,EAAkE;IAChE,4BAAiC+c,oBAAoB,CAAC/c,KAAD,CAArD;MAAMe,GAAF,yBAAEA,GAAF;MAAOsK,KAAP,yBAAOA,KAAP;MAAcqF;IAClBzK,SAAS,CACP4X,cAAc,KAAK1d,SAAnB,IAAgC0d,cAAc,CAAC7d,KAAD,CAAd,KAA0BG,SADnD,EAEP,2CAFO,CAAT;IAIA,IAAIuJ,MAAM,GAAGmU,cAAc,CAAC7d,KAAD,CAA3B,CANgE;;IAShE,IAAI0Q,UAAU,IAAIA,UAAU,CAACK,MAAX,CAAkBe,OAApC,EAA6C;MAC3C;MACA;IACD,CAHD,MAGO,IAAIyK,aAAa,CAAC7S,MAAD,CAAjB,EAA2B;MAChC,IAAI8S,aAAa,GAAGrB,mBAAmB,CAACjb,KAAK,CAACyH,OAAP,EAAgB0D,KAAhB,oBAAgBA,KAAK,CAAE7E,KAAP,CAAaO,EAA7B,CAAvC;MACA,IAAI,EAAE8P,MAAM,IAAIA,MAAM,CAAC2F,aAAa,CAAChW,KAAd,CAAoBO,EAArB,CAAlB,CAAJ,EAAiD;QAC/C8P,MAAM,gBACDA,MADC,sBAEH2F,aAAa,CAAChW,KAAd,CAAoBO,EAArB,EAA0B2C,MAAM,CAAC5D,OAFnC;MAID;MACD5F,KAAK,CAAC4W,QAAN,CAAe/E,MAAf,CAAsBhR,GAAtB;IACD,CATM,MASA,IAAIsb,gBAAgB,CAAC3S,MAAD,CAApB,EAA8B;MACnC;MACA;MACAzD,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAAT;IACD,CAJM,MAIA,IAAIwW,gBAAgB,CAAC/S,MAAD,CAApB,EAA8B;MACnC;MACA;MACAzD,SAAS,CAAC,KAAD,EAAQ,iCAAR,CAAT;IACD,CAJM,MAIA;MACL,IAAI0Z,WAAW,GAA0B;QACvCzf,KAAK,EAAE,MADgC;QAEvCmP,IAAI,EAAE3F,MAAM,CAAC2F,IAF0B;QAGvC4E,UAAU,EAAE9T,SAH2B;QAIvC+T,UAAU,EAAE/T,SAJ2B;QAKvCgU,WAAW,EAAEhU,SAL0B;QAMvCiU,QAAQ,EAAEjU,SAN6B;QAOvC,2BAA6B;OAP/B;MASAD,KAAK,CAAC4W,QAAN,CAAelH,GAAf,CAAmB7O,GAAnB,EAAwB4e,WAAxB;IACD;EACF;EAED,OAAO;IAAEhJ,UAAF,EAAEA,UAAF;IAAcE;GAArB;AACD;AAED,SAASsC,eAATA,CACExC,UADF,EAEEqT,aAFF,EAGEriB,OAHF,EAIEkP,MAJF,EAIsC;EAEpC,IAAIoT,gBAAgB,GAAQD,0BAAR,CAApB;EAAA,4CACkBriB,OAAlB;IAAAuiB;EAAA;IAAA,uDAA2B;MAAA,IAAlB7e,KAAT;MACE,IAAItE,EAAE,GAAGsE,KAAK,CAAC7E,KAAN,CAAYO,EAArB;MACA,IAAIijB,aAAa,CAACG,cAAd,CAA6BpjB,EAA7B,CAAJ,EAAsC;QACpC,IAAIijB,aAAa,CAACjjB,EAAD,CAAb,KAAsB5G,SAA1B,EAAqC;UACnC8pB,gBAAgB,CAACljB,EAAD,CAAhB,GAAuBijB,aAAa,CAACjjB,EAAD,CAApC;QACD;MAKF,CARD,MAQO,IAAI4P,UAAU,CAAC5P,EAAD,CAAV,KAAmB5G,SAAnB,IAAgCkL,KAAK,CAAC7E,KAAN,CAAY4P,MAAhD,EAAwD;QAC7D;QACA;QACA6T,gBAAgB,CAACljB,EAAD,CAAhB,GAAuB4P,UAAU,CAAC5P,EAAD,CAAjC;MACD;MAED,IAAI8P,MAAM,IAAIA,MAAM,CAACsT,cAAP,CAAsBpjB,EAAtB,CAAd,EAAyC;QACvC;QACA;MACD;IACF;EAAA;IAAAqjB;EAAA;IAAAA;EAAA;EACD,OAAOH,gBAAP;AACD;AAGD;AACA;;AACA,SAAS9O,mBAATA,CACExT,OADF,EAEEwU,OAFF,EAEkB;EAEhB,IAAIkO,eAAe,GAAGlO,OAAO,GACzBxU,OAAO,CAAC3D,KAAR,CAAc,CAAd,EAAiB2D,OAAO,CAACgf,SAAR,CAAmBzQ,WAAD;IAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAeoV,OAAxC;EAAA,EAAmD,IAApE,CADyB,sBAErBxU,OAAJ,CAFJ;EAGA,OACE0iB,eAAe,CAACC,OAAhB,GAA0BpG,IAA1B,CAAgChO,WAAD;IAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQsO,gBAAR,KAA6B,IAAnE;EAAA,MACAnN,OAAO,CAAC,CAAD,CAFT;AAID;AAED,SAASqO,sBAATA,CAAgCtP,MAAhC,EAAiE;EAI/D;EACA,IAAIF,KAAK,GAAGE,MAAM,CAACwd,IAAP,CAAazT,WAAD;IAAA,OAAOA,CAAC,CAACzQ,KAAF,IAAW,CAACyQ,CAAC,CAAC5O,IAAd,IAAsB4O,CAAC,CAAC5O,IAAF,KAAW,GAApD;EAAA,EAA4D;IACtEkF,EAAE;GADJ;EAIA,OAAO;IACLY,OAAO,EAAE,CACP;MACE6D,MAAM,EAAE,EADV;MAEEtK,QAAQ,EAAE,EAFZ;MAGEuK,YAAY,EAAE,EAHhB;MAIEjF;IAJF,CADO,CADJ;IASLA;GATF;AAWD;AAED,SAASuP,sBAATA,CACEvG,MADF,EAYQ+a;EAAA,iCAAF,EAAE;IATJrpB,QADF,UACEA,QADF;IAEEib,OAFF,UAEEA,OAFF;IAGED,MAHF,UAGEA,MAHF;IAIED;EAQF,IAAI1I,UAAU,GAAG,sBAAjB;EACA,IAAIiX,YAAY,GAAG,iCAAnB;EAEA,IAAIhb,MAAM,KAAK,GAAf,EAAoB;IAClB+D,UAAU,GAAG,aAAb;IACA,IAAI2I,MAAM,IAAIhb,QAAV,IAAsBib,OAA1B,EAAmC;MACjCqO,YAAY,GACV,aAActO,SAAd,sBAAoChb,QAApC,4DAC2Cib,OAD3C,GADF;IAID,CALD,MAKO,IAAIF,IAAI,KAAK,cAAb,EAA6B;MAClCuO,YAAY,GAAG,qCAAf;IACD;EACF,CAVD,MAUO,IAAIhb,MAAM,KAAK,GAAf,EAAoB;IACzB+D,UAAU,GAAG,WAAb;IACAiX,YAAY,GAAarO,oBAAb,GAA6Cjb,qCAA7C,GAAZ;EACD,CAHM,MAGA,IAAIsO,MAAM,KAAK,GAAf,EAAoB;IACzB+D,UAAU,GAAG,WAAb;IACAiX,YAAY,+BAA4BtpB,QAA5B,GAAZ;EACD,CAHM,MAGA,IAAIsO,MAAM,KAAK,GAAf,EAAoB;IACzB+D,UAAU,GAAG,oBAAb;IACA,IAAI2I,MAAM,IAAIhb,QAAV,IAAsBib,OAA1B,EAAmC;MACjCqO,YAAY,GACV,aAActO,SAAM,CAACkK,WAAP,EAAd,GAAkDllB,2BAAlD,GAC4Cib,iEAD5C,GADF;KADF,MAKO,IAAID,MAAJ,EAAY;MACjBsO,YAAY,GAA8BtO,oCAAM,CAACkK,WAAP,EAA9B,GAAZ;IACD;EACF;EAED,OAAO,IAAI9S,aAAJ,CACL9D,MAAM,IAAI,GADL,EAEL+D,UAFK,EAGL,IAAInP,KAAJ,CAAUomB,YAAV,CAHK,EAIL,IAJK,CAAP;AAMD;;AAGD,SAAS1M,YAATA,CAAsBH,OAAtB,EAA2C;EACzC,KAAK,IAAI/V,CAAC,GAAG+V,OAAO,CAACtd,MAAR,GAAiB,CAA9B,EAAiCuH,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;IAC5C,IAAI8B,MAAM,GAAGiU,OAAO,CAAC/V,CAAD,CAApB;IACA,IAAIyU,gBAAgB,CAAC3S,MAAD,CAApB,EAA8B;MAC5B,OAAOA,MAAP;IACD;EACF;AACF;AAED,SAAS2c,iBAATA,CAA2BxkB,IAA3B,EAAmC;EACjC,IAAIqD,UAAU,GAAG,OAAOrD,IAAP,KAAgB,QAAhB,GAA2BC,SAAS,CAACD,IAAD,CAApC,GAA6CA,IAA9D;EACA,OAAOL,UAAU,cAAM0D,UAAN;IAAkBlD,IAAI,EAAE;GAAzC;AACD;AAED,SAASgZ,gBAATA,CAA0BnR,CAA1B,EAAuCC,CAAvC,EAAkD;EAChD,OACED,CAAC,CAAC3I,QAAF,KAAe4I,CAAC,CAAC5I,QAAjB,IAA6B2I,CAAC,CAAC9H,MAAF,KAAa+H,CAAC,CAAC/H,MAA5C,IAAsD8H,CAAC,CAAC7H,IAAF,KAAW8H,CAAC,CAAC9H,IADrE;AAGD;AAED,SAASya,gBAATA,CAA0B/S,MAA1B,EAA4C;EAC1C,OAAOA,MAAM,CAACuS,IAAP,KAAgB7V,UAAU,CAACmjB,QAAlC;AACD;AAED,SAAShN,aAATA,CAAuB7S,MAAvB,EAAyC;EACvC,OAAOA,MAAM,CAACuS,IAAP,KAAgB7V,UAAU,CAACN,KAAlC;AACD;AAED,SAASuW,gBAATA,CAA0B3S,MAA1B,EAA6C;EAC3C,OAAO,CAACA,MAAM,IAAIA,MAAM,CAACuS,IAAlB,MAA4B7V,UAAU,CAACiN,QAA9C;AACD;AAEK,SAAUiW,cAAVA,CAAyBplB,KAAzB,EAAmC;EACvC,IAAIqlB,QAAQ,GAAiBrlB,KAA7B;EACA,OACEqlB,QAAQ,IACR,OAAOA,QAAP,KAAoB,QADpB,IAEA,OAAOA,QAAQ,CAACla,IAAhB,KAAyB,QAFzB,IAGA,OAAOka,QAAQ,CAACnX,SAAhB,KAA8B,UAH9B,IAIA,OAAOmX,QAAQ,CAACjX,MAAhB,KAA2B,UAJ3B,IAKA,OAAOiX,QAAQ,CAACkB,WAAhB,KAAgC,UANlC;AAQD;AAED,SAAS7G,UAATA,CAAoB1f,KAApB,EAA8B;EAC5B,OACEA,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAACsL,MAAb,KAAwB,QADxB,IAEA,OAAOtL,KAAK,CAACqP,UAAb,KAA4B,QAF5B,IAGA,OAAOrP,KAAK,CAACuL,OAAb,KAAyB,QAHzB,IAIA,OAAOvL,KAAK,CAACulB,IAAb,KAAsB,WALxB;AAOD;AAED,SAAS/E,kBAATA,CAA4Bhb,MAA5B,EAAuC;EACrC,IAAI,CAACka,UAAU,CAACla,MAAD,CAAf,EAAyB;IACvB,OAAO,KAAP;EACD;EAED,IAAI8F,MAAM,GAAG9F,MAAM,CAAC8F,MAApB;EACA,IAAIxO,QAAQ,GAAG0I,MAAM,CAAC+F,OAAP,CAAeoC,GAAf,CAAmB,UAAnB,CAAf;EACA,OAAOrC,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAA3B,IAAkCxO,QAAQ,IAAI,IAArD;AACD;AAED,SAASyjB,oBAATA,CAA8BiG,GAA9B,EAAsC;EACpC,OACEA,GAAG,IACH9G,UAAU,CAAC8G,GAAG,CAAC/F,QAAL,CADV,KAEC+F,GAAG,CAACzO,IAAJ,KAAa7V,UAAU,CAACiJ,IAAxB,IAAgCjJ,UAAU,CAACN,KAF5C,CADF;AAKD;AAED,SAASqd,aAATA,CAAuBjH,MAAvB,EAAqC;EACnC,OAAOrI,mBAAmB,CAAClE,GAApB,CAAwBuM,MAAM,CAAC9O,WAAP,EAAxB,CAAP;AACD;AAED,SAAS4L,gBAATA,CACEkD,MADF,EACgB;EAEd,OAAOvI,oBAAoB,CAAChE,GAArB,CAAyBuM,MAAM,CAAC9O,WAAP,EAAzB,CAAP;AACD;AAAA,SAEc0T,sBAAfA;EAAA;AAAA;AAAA;EAAA6J,wGACEjK,cADF,EAEE5D,aAFF,EAGEa,OAHF,EAIEiN,OAJF,EAKEzE,SALF,EAMEuB,iBANF;IAAA;IAAA;MAAA;QAAA;UAAAmD;YAAA;YAAA;cAAA;gBAAA;kBASQnhB,MAAM,GAAGiU,OAAO,CAAC3d,KAAD,CAApB;kBACIqL,KAAK,GAAGyR,aAAa,CAAC9c,KAAD,CAAzB,EAFmD;kBAInD;kBACA;kBAAA,IACKqL,KAAL;oBAAAyf;oBAAA;kBAAA;kBAAA;gBAAA;kBAIInD,YAAY,GAAGjH,cAAc,CAACwD,IAAf,CAChBhO,WAAD;oBAAA,OAAOA,CAAC,CAAC1P,KAAF,CAAQO,EAAR,KAAesE,KAAM,CAAC7E,KAAP,CAAaO,EADlB;kBAAA,EAAnB;kBAGIgkB,oBAAoB,GACtBpD,YAAY,IAAI,IAAhB,IACA,CAACL,kBAAkB,CAACK,YAAD,EAAetc,KAAf,CADnB,IAEA,CAACqc,iBAAiB,IAAIA,iBAAiB,CAACrc,KAAK,CAAC7E,KAAN,CAAYO,EAAb,CAAvC,MAA6D5G,SAH/D;kBAAA,MAKIsc,gBAAgB,CAAC/S,MAAD,CAAhB,KAA6Byc,SAAS,IAAI4E,oBAA1C,CAAJ;oBAAAD;oBAAA;kBAAA;kBACE;kBACA;kBACA;kBACI/Z,MAAM,GAAG6Z,OAAO,CAAC5qB,KAAD,CAApB;kBACAiG,SAAS,CACP8K,MADO,EAEP,kEAFO,CAAT;kBAAA+Z;kBAAA,OAIMhL,mBAAmB,CAACpW,MAAD,EAASqH,MAAT,EAAiBoV,SAAjB,CAAnB,CAA+C3U,IAA/C,CAAqD9H,gBAAD,EAAW;oBACnE,IAAIA,MAAJ,EAAY;sBACViU,OAAO,CAAC3d,KAAD,CAAP,GAAiB0J,MAAM,IAAIiU,OAAO,CAAC3d,KAAD,CAAlC;oBACD;kBACF,CAJK,CAAN;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;UA3BKA,KAAK,GAAG,CAAjB;QAAA;UAAA,MAAoBA,KAAK,GAAG2d,OAAO,CAACtd,MAApC;YAAA2qB;YAAA;UAAA;UAAA;QAAA;UAAAC;UAAA;YAAAD;YAAA;UAAA;UAAA;QAAA;UAA4ChrB,KAAK,EAAjD;UAAAgrB;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAkCD;EAAA;AAAA;AAAA,SAEclL,mBAAfA;EAAA;AAAA;AAAA;EAAAoL,qGACExhB,MADF,EAEEqH,MAFF,EAGEoa,MAHF;IAAA;IAAA;MAAA;QAAA;UAGgB,IAAdA,MAAc;YAAdA,MAAc,GAAL,KAAK;UAAA;UAAAC;UAAA,OAEM1hB,MAAM,CAACuU,YAAP,CAAoBwM,WAApB,CAAgC1Z,MAAhC,CAApB;QAAA;UAAIe,OAAO;UAAA,KACPA,OAAJ;YAAAsZ;YAAA;UAAA;UAAA;QAAA;UAAA,KAIID,MAAJ;YAAAC;YAAA;UAAA;UAAAA;UAAA,mCAEW;YACLnP,IAAI,EAAE7V,UAAU,CAACiJ,IADZ;YAELA,IAAI,EAAE3F,MAAM,CAACuU,YAAP,CAAoBoN;WAF5B;QAAA;UAAAD;UAAAA;UAAA,mCAMO;YACLnP,IAAI,EAAE7V,UAAU,CAACN,KADZ;YAELA,KAAK;WAFP;QAAA;UAAA,mCAOG;YACLmW,IAAI,EAAE7V,UAAU,CAACiJ,IADZ;YAELA,IAAI,EAAE3F,MAAM,CAACuU,YAAP,CAAoB5O;WAF5B;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAID;EAAA;AAAA;AAED,SAAS4W,kBAATA,CAA4BlkB,MAA5B,EAA0C;EACxC,OAAO,IAAI2nB,eAAJ,CAAoB3nB,MAApB,EAA4BupB,MAA5B,CAAmC,OAAnC,CAA4C7gB,KAA5C,CAAkD+H,WAAD;IAAA,OAAOA,CAAC,KAAK,EAA9D;EAAA,EAAP;AACD;AAGD;;AACA,SAAS+P,qBAATA,CACElX,KADF,EAEEsL,UAFF,EAEuB;EAErB,IAAMnQ,KAAF,GAA8B6E,KAAlC,CAAM7E,KAAF;IAAStF,QAAT,GAA8BmK,KAAlC,CAAanK,QAAT;IAAmBsK,SAAWH,KAAlC,CAAuBG;EACvB,OAAO;IACLzE,EAAE,EAAEP,KAAK,CAACO,EADL;IAEL7F,QAFK,EAELA,QAFK;IAGLsK,MAHK,EAGLA,MAHK;IAIL6D,IAAI,EAAEsH,UAAU,CAACnQ,KAAK,CAACO,EAAP,CAJX;IAKLwkB,MAAM,EAAE/kB,KAAK,CAAC+kB;GALhB;AAOD;AAED,SAASxP,cAATA,CACEpU,OADF,EAEE3G,QAFF,EAE6B;EAE3B,IAAIe,MAAM,GACR,OAAOf,QAAP,KAAoB,QAApB,GAA+Bc,SAAS,CAACd,QAAD,CAAT,CAAoBe,MAAnD,GAA4Df,QAAQ,CAACe,MADvE;EAEA,IACE4F,OAAO,CAACA,OAAO,CAACtH,MAAR,GAAiB,CAAlB,CAAP,CAA4BmG,KAA5B,CAAkCxG,KAAlC,IACAimB,kBAAkB,CAAClkB,MAAM,IAAI,EAAX,CAFpB,EAGE;IACA;IACA,OAAO4F,OAAO,CAACA,OAAO,CAACtH,MAAR,GAAiB,CAAlB,CAAd;EACD,CAV0B;EAY3B;;EACA,IAAImrB,WAAW,GAAGnd,0BAA0B,CAAC1G,OAAD,CAA5C;EACA,OAAO6jB,WAAW,CAACA,WAAW,CAACnrB,MAAZ,GAAqB,CAAtB,CAAlB;AACD","names":["Action","PopStateEventType","options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","_ref$search","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2$window","defaultView","_options2$v5Compat","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","explodeOptionalSegments","_step","exploded","_iterator","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","compilePath","_compilePath2","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","_ref3$search","_ref3$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","_inherits","_classCallCheck","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","_this","signal","acc","trackPromise","done","_createClass","pendingKeysSet","add","promise","race","then","_this2","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","_this3","cancel","abort","v","k","_this4","_context","_this5","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","_step2","_iterator2","getSavedScrollPosition","navigate","_navigate","opts","_context2","normalizedPath","normalizeTo","fromRouteId","relative","_normalizeNavigateOpt2","normalizeNavigateOptions","submission","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_startNavigation","saveScrollPosition","routesToUse","loadingNavigation","_context3","_getShortCircuitMatch2","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","Request","handleLoaders","fetcherSubmission","_yield$handleLoaders","_handleAction","actionMatch","getTargetMatch","_context4","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","_handleLoaders","activeSubmission","_getMatchesToLoad","getMatchesToLoad","matchesToLoad","revalidatingFetchers","_context5","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortPendingFetchRevalidations","f","abortFetcher","callLoadersAndMaybeResolveData","_yield$callLoadersAnd","results","loaderResults","fetcherResults","findRedirect","_processLoaderData","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","_extends","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","_handleFetcherAction","requestMatches","_context6","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","staleKey","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_handleFetcherLoader","_context7","resolveDeferredData","_startRedirectNavigation","_temp","_ref6","redirectLocation","_isFetchActionRedirect","_window","_context8","isDifferentBasename","redirectHistoryAction","_state$navigation","_callLoadersAndMaybeResolveData","currentMatches","fetchersToLoad","_context9","all","resolveDeferredResults","markFetchersDone","_step3","_iterator3","doneKeys","_step4","_iterator4","landedId","yeetedKeys","_step5","_iterator5","getBlocker","blocker","newBlocker","_ref2","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_query","_temp2","_ref7","requestContext","isValidMethod","_context10","_getShortCircuitMatch3","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","_getShortCircuitMatch4","queryImpl","isResponse","queryRoute","_queryRoute","_temp3","_ref8","_context11","find","values","_queryImpl","routeMatch","_context12","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","_submit","isRouteRequest","_context14","Location","context","loaderRequest","_loadRouteData","_context15","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","prependBasename","contextualMatches","activeRouteMatch","_step6","_iterator6","hasNakedIndexQuery","normalizeFormMethod","isFetcher","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","_loadLazyRouteModule","_context16","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_callLoaderOrAction","isStaticRequest","runHandler","handler","onReject","_context17","resultType","protocol","isSameBasename","contentType","text","isDeferredData","deferred","_result$init","body","URLSearchParams","_step7","File","name","_iterator7","foundError","newLoaderData","mergedLoaderData","_step8","hasOwnProperty","_iterator8","eligibleMatches","reverse","_temp4","errorMessage","resolveData","obj","_resolveDeferredResults","signals","_loop","_context18","isRevalidatingLoader","_context19","_ret","_resolveDeferredData","unwrap","_context20","unwrappedData","getAll","handle","pathMatches"],"sources":["E:\\react_mongodb\\frontend\\node_modules\\@remix-run\\router\\history.ts","E:\\react_mongodb\\frontend\\node_modules\\@remix-run\\router\\utils.ts","E:\\react_mongodb\\frontend\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\ntype BaseNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  fromRouteId?: string;\n};\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.toString() === nextUrl.toString() ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}